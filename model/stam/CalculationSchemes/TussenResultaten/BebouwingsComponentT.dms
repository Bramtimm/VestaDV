//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template BebouwingsComponentT
{
	// begin case parameters
	unit<uint32>      BebouwingsObjectZonderNieuwbouw;
	parameter<string> BCname;
	parameter<bool>   IsNieuwbouw;
	parameter<bool>   HasResterendFactors;

	container ResterendFactorMaps;
	unit<uint32>  ModelObject;
	attribute<bool> SchilSprong_sel(Classifications/SchilSprong);
	container LocatieSpecifiekeOpties;
	container VraagKentallenComponent;
	unit<uint32>  PrevObject;

	unit<uint8> PrijzenAardgas;

	parameter<string> NcwRefBase;
	parameter<Ratio>  BTW_Factor;
	parameter<Ratio>  BTW_Factor_gv;
	// end of case parameters
	
	
	parameter<Classifications/BebouwingsComponent> BC_rel := rlookup(BCname, Classifications/BebouwingsComponent/Name); // TODO: Laat dit de parameter zijn en zoek de rest op.
	
	container NcwRefs 
	{
		container _15 := ='NCW/'+NcwRefBase+'15';
		container _30 := ='NCW/'+NcwRefBase+'30';
		container _50 := ='NCW/'+NcwRefBase+'50';
		container _28 := ='NCW/'+NcwRefBase+'28';
		container _20 := ='NCW/'+NcwRefBase+'20';
	}

	unit<uint8> PrijzenElektriciteit := Prijzen/Elektriciteit/Staffel;

	unit<uint8>   BebouwingsTypeDomein := BO/BebouwingsTypeDomein;
	
	container union := =IsNieuwbouw ? 'CalculationSchemes/BebouwingsOperaties/union(PrevObject, BebouwingsObjectZonderNieuwbouw)' : '..';
	
	unit<uint32>  BO := =IsNieuwbouw ? 'union/result' : 'BebouwingsObjectZonderNieuwbouw'
	{
		container BebouwingsComponent_UpRef := ..; // TODO: used sporadically, try to avoid this
		container NcwRefs := BebouwingsComponent_UpRef/NcwRefs;
		container Opbrengsten := BebouwingsComponent_UpRef/Opbrengsten;
		container VraagKentallen := VraagKentallenComponent;
		container BcKentallen := BC_kentallen;
		
		attribute<Invoer/SpecifiekeInstellingen/PlanRegio> PlanRegio_rel (BO) := BO/buurt_rel;
		attribute<ModelObject> Model_rel     (BO) := rlookup(BO/ModelObjectKey, ModelObject/ModelObjectKey), KeepData = "True";
		attribute<PrevObject>  PrevObject_rel(BO) := rlookup(BO/code, PrevObject/code);
	
		unit<uint32>  AfnameGebied         := PrevState/AfnameGebied;
		attribute<Classifications/SchilLabel>  SchilLabel_rel  (BO) := PrevObject/SchilLabel_rel [PrevObject_rel];
		attribute<Classifications/WarmteOptie> WarmteOptie_rel (BO) := PrevObject/WarmteOptie_rel[PrevObject_rel];
				
		container InstallatiePerProduct := for_each_nedv(Classifications/Product/Name
		,	'PrevObject/InstallatiePerProduct/'+Classifications/Product/Name+'[PrevObject_rel]'
		,	BO, Classifications/Installatie
		)
		{
			attribute<Classifications/Installatie> Dak (BO) := const(Classifications/Installatie/V/geen, BO); //TODO Maarten
		}
		
		attribute<Classifications/AfgifteSysteem> AfgifteSysteem_rel(BO) := PrevObject/AfgifteSysteem_rel[PrevObject_rel];	
		
		attribute<AfnameGebied>  AfnameGebied_rel (BO):= PrevObject/AfnameGebied_rel[PrevObject_rel];	
		
		attribute<Classifications/GebouwOptie> GebouwOptie_rel (BO) := PrevObject/GebouwOptie_rel[PrevObject_rel]; // REMOVE, OBSOLETE, vervangen door Schillabel_rel, InstallatiePerProduct en GebiedsOptie

		attribute<Geography/rdc_grids/m100> gridm100_rel (BO) := point[Geography/rdc_grids/m100];		
		attribute<bool>   IsMeergezins (.) := BebouwingsTypeDomein/IsMeergezins[BebouwingsType];
		attribute<bool>   IsHoogbouw   (.) := BebouwingsTypeDomein/IsHoogbouw  [BebouwingsType];
		
		attribute<Ratio> ResterendFactorBase := = HasResterendFactors
			? 'MakeDefined(merge(BebouwingsType, Ratio, '+AsItemList('ResterendFactorMaps/'+BebouwingsTypeDomein/ResterendFactorName+'[gridm100_rel]')+'), 1.0)'
			: 'const(1.0, BO)';

		attribute<Ratio>      ResterendFactor := ResterendFactorBase * float64(IsDefined(PlanRegio_rel));
		attribute<nrAansl>    nrAansluitingen := ResterendFactor * nrAansluitingen_i;
		attribute<m2>         Oppervlakte     := ResterendFactor * Oppervlakte_i;
				
		// TODO: Optimaliseer domein voor Niet woningen tbv specifiek BCcDomein
		attribute<string>    BCc (.) :=
			(BCname == 'BestaandeUtil' || BCname == 'NieuwBouwUtil'  ) ? 'u' :
			(BCname == 'BestaandeGLTB' || BCname == 'NieuwBouwGLTB'  ) ? 't' :
			IsMeergezins ? 'wh' : 'wl';
		
		container AansluitCapaciteit
		{
			attribute<kW> RV    (..) := ASW_RVmt;
			attribute<kW> TW    (..) := ASW_TWmt;
			attribute<kW> Warmte(..) := RV + TW;
			attribute<kW> K     (..) := ASW_K;
			attribute<kW> eWP   (..) := max_elem(RV, TW);
			attribute<kW> eZ    (..) := ASW_Eapp;
			attribute<kW> eM    (..) := ASW_Eewp;

			attribute<ratio> GTF_RVmt (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_RVmt) , case(BCc=='u', Vermogens/GTF_u_RVmt), Vermogens/GTF_w_RVmt) ;
			attribute<ratio> GTF_RVlt (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_RVlt) , case(BCc=='u', Vermogens/GTF_u_RVlt), Vermogens/GTF_w_RVlt) ;
			attribute<ratio> GTF_TW   (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_TW  ) , case(BCc=='u', Vermogens/GTF_u_TW  ), Vermogens/GTF_w_TW  ) ;
			attribute<ratio> GTF_K    (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_K   ) , case(BCc=='u', Vermogens/GTF_u_K   ), Vermogens/GTF_w_K   ) ;
			attribute<ratio> GTF_Enet (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_Enet) , case(BCc=='u', Vermogens/GTF_u_Enet), Vermogens/GTF_w_Enet) ;
				
			attribute<kW>    ASW_RVmt      (..) := =BCc != 'u' ? 'ASW_RVmt_flat' : 'Vermogens/ASW_RVmt_u_opp_specific[BebouwingsType] * Oppervlakte'; //Vermogens/ASW_RVmt_u_opp_specific[BebouwingsType]
			
			attribute<kW>    ASW_RVmt_flat (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_RVmt_t_opp) , case(BCc=='u', Vermogens/ASW_RVmt_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_RVmt_wl_opp),                Vermogens/ASW_RVmt_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_RVmt_t_asl) , case(BCc=='u', Vermogens/ASW_RVmt_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_RVmt_wl_asl),                Vermogens/ASW_RVmt_wh_asl) ;
			attribute<kW>    ASW_TWmt (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_TWmt_t_opp) , case(BCc=='u', Vermogens/ASW_TWmt_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_TWmt_wl_opp),                Vermogens/ASW_TWmt_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_TWmt_t_asl) , case(BCc=='u', Vermogens/ASW_TWmt_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_TWmt_wl_asl),                Vermogens/ASW_TWmt_wh_asl) ;
			attribute<kW>    ASW_RVlt (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_RVlt_t_opp) , case(BCc=='u', Vermogens/ASW_RVlt_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_RVlt_wl_opp),                Vermogens/ASW_RVlt_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_RVlt_t_asl) , case(BCc=='u', Vermogens/ASW_RVlt_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_RVlt_wl_asl),                Vermogens/ASW_RVlt_wh_asl) ;
			attribute<kW>    ASW_TWlt (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_TWlt_t_opp) , case(BCc=='u', Vermogens/ASW_TWlt_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_TWlt_wl_opp),                Vermogens/ASW_TWlt_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_TWlt_t_asl) , case(BCc=='u', Vermogens/ASW_TWlt_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_TWlt_wl_asl),                Vermogens/ASW_TWlt_wh_asl) ;
			attribute<kW>    ASW_K    (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_K_t_opp)    , case(BCc=='u', Vermogens/ASW_K_u_opp)     ,
										   case(BCc=='wl',Vermogens/ASW_K_wl_opp)   ,                Vermogens/ASW_K_wh_opp)    
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_K_t_asl)    , case(BCc=='u', Vermogens/ASW_K_u_asl)     ,
										   case(BCc=='wl',Vermogens/ASW_K_wl_asl   ),                Vermogens/ASW_K_wh_asl)    ;
			attribute<kW>    ASW_Eapp (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_Eapp_t_opp) , case(BCc=='u', Vermogens/ASW_Eapp_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_Eapp_wl_opp),                Vermogens/ASW_Eapp_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_Eapp_t_asl) , case(BCc=='u', Vermogens/ASW_Eapp_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_Eapp_wl_asl),                Vermogens/ASW_Eapp_wh_asl) ;
			attribute<kW>    ASW_Ehwp (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_Ehwp_t_opp) , case(BCc=='u', Vermogens/ASW_Ehwp_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_Ehwp_wl_opp),                Vermogens/ASW_Ehwp_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_Ehwp_t_asl) , case(BCc=='u', Vermogens/ASW_Ehwp_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_Ehwp_wl_asl),                Vermogens/ASW_Ehwp_wh_asl) ;
			attribute<kW>    ASW_Eewp (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_Eewp_t_opp) , case(BCc=='u', Vermogens/ASW_Eewp_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_Eewp_wl_opp),                Vermogens/ASW_Eewp_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_Eewp_t_asl) , case(BCc=='u', Vermogens/ASW_Eewp_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_Eewp_wl_asl),                Vermogens/ASW_Eewp_wh_asl) ;
		}
		container Functioneel
		{
			container DragerSpecifiekeOpties := SpecifiekeInstellingen/RuimtelijkeVraag/Drager;
			
			attribute<Ratio>	Klimaateffect (..)	:=	KlimaatFactorMap[gridm100_rel];
			
			attribute<GJ_yr>	TW(..) := (nrAansluitingen * ModelObject/V_TW_asl [Model_rel] + Oppervlakte * ModelObject/V_TW_opp [Model_rel])
						* DragerSpecifiekeOpties/TapWater;
						
			attribute<GJ_yr>	K (..) := =
			'('
				+	(all(ModelObject/V_K_asl == 0[GJ_Yr_asl]) ?'':'NrAansluitingen * ModelObject/V_K_asl[Model_rel] +')
				+	'Oppervlakte * ModelObject/V_K_opp[Model_rel] '
				+	') * DragerSpecifiekeOpties/Koude * ( 1.0 + 3.66*(1.0 - Klimaateffect))';
			
			attribute<GJ_yr>	EA(..) := (nrAansluitingen * ModelObject/V_EA_asl [Model_rel] + Oppervlakte * ModelObject/V_EA_opp [Model_rel])
						* DragerSpecifiekeOpties/ElektrischeApparatuur;
			
			// TODO, OPTIMIZE, V_RV_asl/@SL@ alleen meenemen indien niet allemaal 0, zoals bij utiliteiten wel het geval is
			container RV := for_each_nedv(Classifications/SchilLabel/Name
			,	replace(
					'(nrAansluitingen * ModelObject/V_RV_asl/@SL@[Model_rel] + Oppervlakte * ModelObject/V_RV_opp/@SL@[Model_rel])'
						'* DragerSpecifiekeOpties/RuimteVerwarming'
						'* Klimaateffect'
				,'@SL@', Classifications/SchilLabel/Name)
			,	.., GJ_Yr);
			
			attribute<GJ_Yr> CurrRV(..) := ='merge(SchilLabel_rel, GJ_Yr, '+AsItemList('RV/'+Classifications/SchilLabel/Name)+')';	
			
			attribute<GJ_yr> Ventilatie(..)	:=	=				
				'('
				+	(all(ModelObject/V_Vent_asl == 0[GJ_yr_asl]) ? '' : 'NrAansluitingen * ModelObject/V_Vent_asl + ')
				+ 'Oppervlakte * ModelObject/V_Vent_opp[Model_rel]'
				+ ') * DragerSpecifiekeOpties/ElektrischeApparatuur'
				;
		}
	}

	container Criteria := BO/Criteria // inherit, TODO: opruimen na aanpassing runs
	{
		attribute<bool> always (BO) := const(true,  BO);
		attribute<bool> never  (BO) := const(false, BO);
		attribute<bool> gebied (BO) := never;
		attribute<bool> WP_na_gebied (BO) := never;
		
		attribute<bool> Alloc  (BO) := Classifications/WarmteOptie/isGebiedsOptie[BO/WarmteOptie_rel];
		attribute<bool> NoAlloc(BO) := not(Alloc);
		
		attribute<bool> S1isS1a(BO) := NoAlloc && s1 == 's1a';
		attribute<bool> S1isS1b(BO) := NoAlloc && s1 == 's1b';
		attribute<bool> isUtilGroot(BO) := BO/AansluitCapaciteit/RV >= 100 kW;
		attribute<bool> isUtilKlein(BO) := not(isUtilGroot);
		attribute<bool> S1isS1b_uG (BO) := S1isS1b && isUtilGroot;
		attribute<bool> S1isS1b_uK (BO) := S1isS1b && isUtilKlein;
		attribute<string> s1 (BO) := Invoer/RuimtelijkeData/leidraad_oktober_2019/buurt/S1_variant_keuze[BO/Planregio_rel]; // TODO: liever code attribuut dan string.
	}

	container EIA_Opties := ='SpecifiekeInstellingen/Beleid/EIA/E_'+NcwRefBase;
	container EEA_Opties := SpecifiekeInstellingen/Beleid/EEA/Kosten/Basis;

	container VerbruiksOpties {
	
		unit<uint8> SchilSprong_set := subset(SchilSprong_sel) {
			attribute<Classifications/SchilSprong> SchilSprong_rel := nr_OrgEntity;
			attribute<string> Name := Classifications/SchilSprong/name[SchilSprong_rel];
			attribute<Classifications/SchilLabel> Naar_rel := Classifications/SchilSprong/Naar_rel[SchilSprong_rel];
			attribute<Classifications/SchilSprongCode> SchilSprongCode_rel := Classifications/SchilSprong/SchilSprongCode_rel[SchilSprong_rel];
			
			attribute<string> LeerCurveName := Classifications/SchilLabel/LeerCurveName[Naar_rel];
			
			unit<uint32> xMO := combine(., ModelObject) {
				attribute<EUR_asl> Ki_asl := =#.=0?'const(0[EUR_asl],.)':'union_data(.,'+AsItemList(replace('(ModelObject/Ki_min_asl/@SS@ * Schuiven/KostenMin + ModelObject/Ki_max_asl/@SS@ * Schuiven/KostenMax) * Leercurves/'+LeerCurveName+'/Curve', '@SS@', Name))+')';
				attribute<EUR_m2 > Ki_opp := =#.=0?'const(0[EUR_m2 ],.)':'union_data(.,'+AsItemList(replace('(ModelObject/Ki_min_opp/@SS@ * Schuiven/KostenMin + ModelObject/Ki_max_opp/@SS@ * Schuiven/KostenMax) * Leercurves/'+LeerCurveName+'/Curve', '@SS@', Name))+')';
			}
		}
		unit<uint8> SchilSprongOrIdle_set := union_unit_uint8(Classifications/SchilLabel, SchilSprong_set) {
			attribute<Classifications/SchilLabel> Van_rel  := union_data(., ID(Classifications/SchilLabel), Classifications/SchilSprong/Van_rel [SchilSprong_set/nr_OrgEntity]);
			attribute<Classifications/SchilLabel> Naar_rel := union_data(., ID(Classifications/SchilLabel), Classifications/SchilSprong/Naar_rel[SchilSprong_set/nr_OrgEntity]);
			
			attribute<string> Name := union_data(., 'S'+repeat(Classifications/SchilLabel/name,2), SchilSprong_set/name);
			
			unit<uint32> xMO := combine(., ModelObject) {
				attribute<EUR_asl> Ki_asl := ='union_data(., ' + AsItemList(const('const(0[EUR_asl], ModelObject)', Classifications/SchilLabel))+', SchilSprong_set/xMO/Ki_asl)';
				attribute<EUR_m2 > Ki_opp := ='union_data(., ' + AsItemList(const('const(0[EUR_m2 ], ModelObject)', Classifications/SchilLabel))+', SchilSprong_set/xMO/Ki_opp)';
			}
		}
		
		parameter<string> BcCode := Classifications/BebouwingsComponent/BcCode[BC_rel];
		unit<uint32> Installatie := Classifications/Installatie {
			// TODO, MTA: remove const in merge wanneer void domain hier zal worden toegestaan, issue XXX.
			attribute<EUR_asl> Ki_asl := =replace('(Ki_asl_min_@BC * Schuiven/KostenMin + Ki_asl_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, Float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/Name+'/Curve, .)')+')', '@BC', BcCode);
			attribute<EUR_kW>  Ki_cap := =replace('(Ki_cap_min_@BC * Schuiven/KostenMin + Ki_cap_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, Float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/Name+'/Curve, .)')+')', '@BC', BcCode);
			attribute<EUR_m2>  Ki_opp := =replace('(Ki_opp_min_@BC * Schuiven/KostenMin + Ki_opp_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, Float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/Name+'/Curve, .)')+')', '@BC', BcCode);

			attribute<EUR_kW>  Ki30_cap := Ki_cap * AT30;
			attribute<EUR_kW>  Ki20_cap := Ki_cap * AT20;
			attribute<EUR_kW>  Ki15_cap := Ki_cap * AT15;
			attribute<EUR_Yr_kW>  Kj_OH_cap  := Ki_cap * R_OH;
			attribute<EUR_Yr_kW>  Kj_Adm_cap := Ki_cap * R_Adm;
		}
		
		unit<uint8> GebouwOptie := Classifications/GebouwOptie {
			attribute<EUR_asl> Ki_asl := sum(Installatie/Ki_asl[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_m2 > Ki_opp := sum(Installatie/Ki_opp[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			
			attribute<EUR_Yr_asl> Kj_Adm_asl := sum((Installatie/Ki_asl * Installatie/R_Adm)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_Yr_asl> Kj_OH_asl  := sum((Installatie/Ki_asl * Installatie/R_OH )[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_Yr_m2 > Kj_Adm_opp := sum((Installatie/Ki_opp * Installatie/R_Adm)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_Yr_m2 > Kj_OH_opp  := sum((Installatie/Ki_opp * Installatie/R_OH )[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			
			attribute<EUR_asl> Ki30_asl := sum((Installatie/Ki_asl * Installatie/AT30)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_asl> Ki20_asl := sum((Installatie/Ki_asl * Installatie/AT20)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_asl> Ki15_asl := sum((Installatie/Ki_asl * Installatie/AT15)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			
			attribute<EUR_m2 > Ki30_opp := sum((Installatie/Ki_opp * Installatie/AT30)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_m2 > Ki20_opp := sum((Installatie/Ki_opp * Installatie/AT20)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_m2 > Ki15_opp := sum((Installatie/Ki_opp * Installatie/AT15)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
		}
	}
	
	container DoelLabels := for_each_ne(Classifications/DoelLabel_NaSprong/Name, 'DoelLabelT(BO, Classifications/DoelLabel_NaSprong/V/'+Classifications/DoelLabel_NaSprong/Name+')') {
		container geen  // handle as special case
		{
			attribute<EUR> Ki_GV (BO) := const(0[EUR], BO);
		}
	}
		
	attribute<string> GebouwOptie_sel_Expr(Classifications/GebouwOptie) := 'LowerCase(LocatieSpecifiekeOpties/GebouwOpties/'+Classifications/GebouwOptie/Name+') != ' + Quote('criteria/never');
	
	attribute<bool> GebouwOptie_sel(Classifications/GebouwOptie) := ='union_data(Classifications/GebouwOptie, '+AsItemList(GebouwOptie_sel_Expr)+')';
	
	unit<uint8> BcGebouwOptie := subset(GebouwOptie_sel) {
		attribute<string> Name := Classifications/GebouwOptie/Name[nr_OrgEntity];
		attribute<string> Label := Name, DialogType = "LabelText";
		attribute<string> Criterium_expr := ='replace_value(LowerCase(union_data(., '+AsItemList('LocatieSpecifiekeOpties/GebouwOpties/'+Name)+')), ''criteria/always'', '''')';
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	container GebouwOpties := for_each_ne(BcGebouwOptie/Name, 'GebouwOptieT(BO, Classifications/GebouwOptie/V/'+BcGebouwOptie/Name+', '+Quote(BcGebouwOptie/Criterium_expr)+')');
	
	unit<uint32> BebouwingsObjectMetGebouwOptie := BO
	{
		unit<uint8> BcGebouwOptie := BebouwingsComponent_UpRef/BcGebouwOptie;
		attribute<BcGebouwOptie> GebouwOptie_rel := =(#BcGebouwOptie == 1)? 'const(0[BcGebouwOptie],BO)' : 'argmin('+AsItemList('GebouwOpties/'+BcGebouwOptie/Name+'/kosten_or_undefined')+')[BcGebouwOptie]';
		attribute<Classifications/WarmteOptie> WarmteOptie_rel := 
			Classifications/WarmteOptie/IsGebiedsOptie[BO/WarmteOptie_rel]
			?	BO/WarmteOptie_rel
			:	Classifications/GebouwOptie/WarmteOptie_rel[BcGebouwOptie/nr_OrgEntity[GebouwOptie_rel]];
		
		attribute<Classifications/SchilLabel> SchilLabel_rel := ='merge(GebouwOptie_rel, Classifications/SchilLabel, '+AsItemList('GebouwOpties/'+BcGebouwOptie/Name+'/SchilLabel_rel')+')';
		container InstallatiePerProduct := for_each_nedv(Classifications/Product/Name
			,	replace('merge(GebouwOptie_rel, Classifications/Installatie, '+AsItemList('GebouwOpties/'+BcGebouwOptie/Name+'/InstallatiePerProduct/@P')+')', '@P', Classifications/Product/Name)
			,	., Classifications/Installatie
			);
			
		attribute<Classifications/AfgifteSysteem> AfgifteSysteem_rel (BO) := 
			='merge(GebouwOptie_rel, Classifications/AfgifteSysteem, '+AsItemList('GebouwOpties/'+BcGebouwOptie/Name+'/AfgifteSysteem_rel')+')';		
			
		// Extra info
		attribute<string>	WarmteOptie		(BO)	:=	Classifications/WarmteOptie/name[WarmteOptie_rel];
	}
	container Kapitaallasten := results/Kapitaallasten;
	container statistics {
		attribute<EUR> Ki_lowest_value  (BO) := ='min_elem('+AsItemList('GebouwOpties/'+BcGebouwOptie/Name+'kosten_j')+')';
		attribute<EUR> Ki_lowest_index  (BO) := ='argmin  ('+AsItemList('GebouwOpties/'+BcGebouwOptie/Name+'kosten_j')+')';
		attribute<EUR> Ki_highest_value (BO) := ='max_elem('+AsItemList('GebouwOpties/'+BcGebouwOptie/Name+'kosten_j')+')';
		attribute<EUR> Ki_highest_index (BO) := ='argmax  ('+AsItemList('GebouwOpties/'+BcGebouwOptie/Name+'kosten_j')+')';
	}
		
	container OpwekkingsOpties
	{
		container bereidheid
		{
			attribute<Ratio> Zon_PV     (BO) := const(LocatieSpecifiekeOpties/OpwekkingF/Zon_PV,      BO);
			attribute<Ratio> ZonneBoiler(BO) := const(LocatieSpecifiekeOpties/OpwekkingF/ZonneBoiler, BO);
		}
		container org_capaciteit
		{
			attribute<Ratio> Zon_PV     (BO) := MakeDefined(PrevObject/OpwekkingsOpties/capaciteit/Zon_PV     [PrevObject_rel], 0[Ratio]);
			attribute<Ratio> ZonneBoiler(BO) := MakeDefined(PrevObject/OpwekkingsOpties/capaciteit/ZonneBoiler[PrevObject_rel], 0[Ratio]);
		}
		container investering
		{
			attribute<Ratio> Zon_PV     (BO) := median(0.0, bereidheid/Zon_PV      - org_capaciteit/Zon_PV,      1.0[Ratio] - org_capaciteit/Zon_PV);
			attribute<Ratio> ZonneBoiler(BO) := median(0.0, bereidheid/ZonneBoiler - org_capaciteit/ZonneBoiler, 1.0[Ratio] - org_capaciteit/ZonneBoiler);
		}
		container capaciteit
		{
			attribute<Ratio> Zon_PV     (BO) := org_capaciteit/Zon_PV      + investering/Zon_PV;
			attribute<Ratio> ZonneBoiler(BO) := org_capaciteit/ZonneBoiler + investering/ZonneBoiler;
		}
	}
/* REMOVE
	container Hoeveelheden
	{
		attribute<m2>      ZonneBoiler (BO) := RuimtelijkeVraagObject/oppervlakte * OpwekkingsOpties/capaciteit/ZonneBoiler * BC_kentallen/R_ZonB_opp  [BebouwingsType];
		attribute<m2>      Zon_PV      (BO) := BO/oppervlakte * OpwekkingsOpties/capaciteit/Zon_PV      * BC_kentallen/m2dak_m2bvo [BebouwingsType];
	
		attribute<nrAansl> mWKK        (BO) := BO/nrAansluitingen * Opwekking/mWKK;
		attribute<nrAansl> hWP         (BO) := BO/nrAansluitingen * Opwekking/hWP;
	}
*/
	container BC_kentallen :=	kengetallen/BCkentallen/BC_kentallen(
									Schuiven/LuchtBodemSchuif,
									Schuiven/EfficiencySchuif,
									LeerCurves/eWPlw/Curve,
									LeerCurves/eWPww/Curve,
									LeerCurves/hWP/Curve,
									LeerCurves/ZonPV/Curve,
									LeerCurves/ZonB/Curve,
									LeerCurves/mWKK/Curve,
									LeerCurves/LTAS/Curve,
									Schuiven/KostenMin,
									Schuiven/KostenMax,
									BCname,
									BebouwingsTypeDomein);
		// voor info over gebruik hWP etc voor RW gelieve de resulterende InstallatiePerProduct te raadplegen
	
	attribute<Eur_yr> KoudeAllocatie(BO) := const( 0[Eur_yr], BO);
	attribute<Eur_yr> Om_Comfort    (BO) := const( 0[Eur_yr], BO); //placeholders om statenaallocatie te kunnen initialiseren, todo: remove
	
/* REMOVE	
	container Kosten
	{
		attribute<Eur>	Ki_ZonneBoiler  (BO) :=	Hoeveelheden/ZonneBoiler  * BC_kentallen/Ki_ZonB;
		attribute<Eur>	Ki_Zon_PV       (BO) :=	Hoeveelheden/Zon_PV       * BC_kentallen/Ki_ZonPV;
		attribute<Eur>	Ki_mWKK         (BO) :=	Hoeveelheden/mWKK         * BC_kentallen/Ki_mWKK;
		attribute<Eur>	Ki_hWP_var      (BO) :=	Hoeveelheden/hWP > 0d ? RuimtelijkeVraagComponent/Aansluitcapaciteit/RV * BC_kentallen/Ki_hWP_var : 0[eur];
		attribute<Eur>	Ki_hWP_vast     (BO) :=	Hoeveelheden/hWP          * BC_kentallen/Ki_hWP_vast;
		attribute<Eur>	Ki_hWP          (BO) :=	Ki_hWP_var + Ki_hWP_vast;
		attribute<Eur>	Ki_eWP          (BO) :=	RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_eWP;
		attribute<Eur>	Ki_EWV          (BO) :=	RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_EWV;
		attribute<Eur>	Oi_HR           (BO) :=	WarmteAllocatie != 0[Classifications/WarmteOptie] ? 
																(1[Ratio] - Kengetallen/constanten/afschrijving_resterend) * Sprongen/Ki_HR : 0[eur];

		attribute<Ratio> fractie_afschrijftermijn_15jaar (BO) :=	= Schuiven/LuchtBodemAlsS1 ? 'Sprongen/AnnualisationFactor_S1/fractie_afschrijftermijn_15jaar' : 'const(BC_kentallen/fractie_afschrijftermijn_15jaar, BO)';														
		attribute<Ratio> fractie_afschrijftermijn_30jaar (BO) :=	= Schuiven/LuchtBodemAlsS1 ? 'Sprongen/AnnualisationFactor_S1/fractie_afschrijftermijn_30jaar' : 'const(BC_kentallen/fractie_afschrijftermijn_30jaar, BO)';
		
		attribute<Eur> Ki_LokaleOpwekking30 (BO) := Ki_ZonneBoiler + Ki_Zon_PV + Ki_EWV + fractie_afschrijftermijn_30jaar * Ki_eWP;
		attribute<Eur> Ki_LokaleOpwekking15 (BO) := Ki_mWKK + Ki_hWP + fractie_afschrijftermijn_15jaar * Ki_eWP;
		
		attribute<Eur> Ki_GebouwVerbetering (BO) := RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_gv; // cumulatief
		attribute<Eur_yr> Kj_gv_incentive   (BO) := Sprongen/Incentive_eigenaar_excl + PrevObject/Kosten/Kj_gv_incentive[PrevObject_rel];

		attribute<Eur> Ki_LokaleOpwekking   (BO) := Ki_LokaleOpwekking30 + Ki_LokaleOpwekking15;
		attribute<Eur> Ki_Totaal            (BO) := Ki_LokaleOpwekking + Ki_GebouwVerbetering;
	}
REMOVE */	

	container Functioneel2
	{
		attribute<GJ_yr> V_RV    (BO) := ='merge(BebouwingsObjectMetGebouwOptie/GebouwOptie_rel, GJ_Yr, '+AsItemList('GebouwOpties/'+BcGebouwOptie/Name+'/Functioneel/RV')+')';
		attribute<GJ_yr> V_TW    (BO) := ='merge(BebouwingsObjectMetGebouwOptie/GebouwOptie_rel, GJ_Yr, '+AsItemList('GebouwOpties/'+BcGebouwOptie/Name+'/Functioneel/TW')+')';
		attribute<GJ_yr> V_Warmte(BO):=  V_RV + V_TW;
	}
	container Opbrengsten
	{
		attribute<float64> AansluitTarief (BO) := 
			  (VraagKentallenComponent/Opbrengsten/AansluitTarief_min[BO/BebouwingsType] * Schuiven/OpbrMin
			+  VraagKentallenComponent/Opbrengsten/AansluitTarief_max[BO/BebouwingsType] * Schuiven/OpbrMax);
			
		parameter<Eur_yr_Aansl>	VastRechtMT :=
			( VraagKentallenComponent/Opbrengsten/VastRechtMT_Min * Schuiven/OpbrMin 
			+ VraagKentallenComponent/Opbrengsten/VastRechtMT_Max * Schuiven/OpbrMax);
		parameter<Eur_yr_Aansl>	VastRechtLT :=
			( VraagKentallenComponent/Opbrengsten/VastRechtLT_Min * Schuiven/OpbrMin 
			+ VraagKentallenComponent/Opbrengsten/VastRechtLT_Max * Schuiven/OpbrMax);
		parameter<Eur_yr_Aansl>	VastRechtK  :=
			( VraagKentallenComponent/Opbrengsten/VastRechtK_Min  * Schuiven/OpbrMin 
			+ VraagKentallenComponent/Opbrengsten/VastRechtK_Max  * Schuiven/OpbrMax);


		attribute<Eur>	AansluitBijdrageG  (BO) := BO/nrAansluitingen * Kengetallen/Infra/AansluitTarief_bw_g, Descr = "Aansluitbijdrage voor nieuwe aansluiting op het gasnet";
		attribute<Eur>	AansluitBijdrageE  (BO) := BO/nrAansluitingen * Kengetallen/Infra/AansluitTarief_bw_e, Descr = "Aansluitbijdrage voor nieuwe aansluiting op het elektriciteitsnetnet";
		attribute<Eur>	AansluitBijdrageT  (BO) := BO/nrAansluitingen * AansluitTarief,                        Descr = "Aansluitbijdrage voor nieuwe aansluiting op warmtenetten, niet gecorrigeerd voor deelname";
		
		attribute<Eur_yr>	VastRechtBijdrageG (BO) := BO/nrAansluitingen * Kengetallen/Infra/JaarlijksVast_g, Descr = "VastRechtBijdrage voor aansluiting op het gasnet";
		attribute<Eur_yr>	VastRechtBijdrageE (BO) := BO/nrAansluitingen * Kengetallen/Infra/JaarlijksVast_e, Descr = "VastRechtBijdrage voor aansluiting op het elektriciteitsnetnet";
		attribute<Eur_yr>	VastRechtMT_T      (BO) := BO/nrAansluitingen * VastRechtMT,                       Descr = "VastRechtBijdrage voor aansluiting op warmtenetten, niet gecorrigeerd voor deelname";
		attribute<Eur_yr>	VastRechtLT_T      (BO) := BO/nrAansluitingen * VastRechtLT,                       Descr = "VastRechtBijdrage voor aansluiting op warmtenetten, niet gecorrigeerd voor deelname";
		attribute<Eur_yr>	VastRechtK_T       (BO) := BO/nrAansluitingen * VastRechtK,                        Descr = "VastRechtBijdrage voor aansluiting op warmtenetten, niet gecorrigeerd voor deelname";
		
		attribute<Eur_yr>	HeffingskortingE   (BO) := BO/nrAansluitingen * SpecifiekeInstellingen/Beleid/Heffingskorting;
	}
		
	unit<uint32> Results := BebouwingsObjectMetGebouwOptie
	{
		unit<uint8> BcGebouwOptie := BebouwingsComponent_UpRef/BcGebouwOptie;
		container GebouwOpties  := BebouwingsComponent_UpRef/GebouwOpties;
		container BC_kentallen  := BebouwingsComponent_UpRef/BC_kentallen;	
		container Functioneel   := BebouwingsComponent_UpRef/BO/Functioneel;	
			
		container Kapitaallasten
		{
			container PrevResults := =IsNieuwbouw ? 'Union/result/Kapitaallasten' : 'PrevObject/Kapitaallasten';
			//Aansluitbijdrages
			attribute<Eur_yr> Kji_Asl_Enet (BO) := PrevResults/Kji_Asl_Enet;
			attribute<Eur_yr> Kmi_Asl_Enet (BO) := PrevResults/Kmi_Asl_Enet;
			attribute<Eur_yr> Kji_Asl_Gnet (BO) := PrevResults/Kji_Asl_Gnet;
			attribute<Eur_yr> Kmi_Asl_Gnet (BO) := PrevResults/Kmi_Asl_Gnet;
			
			//Investeringen			
			attribute<Eur_yr> Kji30_LO (BO) := PrevResults/Kji30_LO;
			attribute<Eur_yr> Kmi30_LO (BO) := PrevResults/Kmi30_LO;
			attribute<Eur_yr> Kji20_LO (BO) := PrevResults/Kji20_LO;
			attribute<Eur_yr> Kmi20_LO (BO) := PrevResults/Kmi20_LO;
			attribute<Eur_yr> Kji15_LO (BO) := PrevResults/Kji15_LO;
			attribute<Eur_yr> Kmi15_LO (BO) := PrevResults/Kmi15_LO;
			attribute<Eur_yr> Kji_gv   (BO) := PrevResults/Kji_gv;
			attribute<Eur_yr> Kmi_gv   (BO) := PrevResults/Kmi_gv;
			
			//Subsidies
			attribute<Eur_yr> Oji_s_LO_30 (BO) := PrevResults/Oji_s_LO_30;
			attribute<Eur_yr> Oji_s_LO_20 (BO) := PrevResults/Oji_s_LO_20;
			attribute<Eur_yr> Oji_s_LO_15 (BO) := PrevResults/Oji_s_LO_15;
			attribute<Eur_yr> Oji_s_gv    (BO) := PrevResults/Oji_s_gv;
		}

		container Warmtewet := Functioneel2
		{
			attribute<GJ_yr> V_gas   (BO) := ='merge(GebouwOptie_rel, GJ_Yr, '+AsItemList('GebouwOpties/'+BcGebouwOptie/Name+'/Metervraag/gas')+')';
			
			unit<uint32> GasVerbruikers := subset(V_Gas > 0.0[gj_yr])
			{
				attribute<GJ_yr> V_gas    := ../V_gas[nr_OrgEntity];
				attribute<GJ_yr> V_warmte := V_RV[nr_OrgEntity] + V_TW[nr_OrgEntity];
				//TODO bij V_warmte aftrek eventuele installaties die al een deel van de vraag vullen binnen deze groep (bijv Zonneboilers)
			}
			parameter<float64> PrijsFactor_impl :=  sum(GasVerbruikers/V_gas) / sum(GasVerbruikers/V_warmte) * Voorkeuren/MinderDanAndersFactor;
			parameter<float64> PrijsFactor_corr :=  MakeDefined(PrijsFactor_impl, 1.25);
			parameter<float64> PrijsFactor      :=  = Classifications/BebouwingsComponent/name[Classifications/BebouwingsComponent/Warmtewet_BC_rel[BC_rel]]+'/results/Warmtewet/PrijsFactor_corr';

			parameter<Eur_GJ> WarmtePrijs := = Voorkeuren/IsVasteWarmtePrijs 
				? 'Voorkeuren/VasteWarmtePrijs'
				: 'PrijsFactor * PrijzenAardgas/KGJ_eindgebruik_excl[classify(0[GJ_yr], PrijzenAardgas/ClassBreak)]';
		}
	}
}
