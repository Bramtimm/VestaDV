//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template BCdata
{
	// begin case parameters
	unit<uint32>      BebouwingsObjectZonderNieuwbouw;
	parameter<string> BCname;
	parameter<bool>   IsNieuwbouw;
	parameter<bool>   HasResterendFactors;

	container ResterendFactorMaps;
	unit<uint32>  ModelObject;
	attribute<bool> SchilSprong_sel(Classifications/SchilSprong);
	container LocatieSpecifiekeOpties;
	container VraagKentallen;
	container StartingStateComponent;

	unit<uint8> PrijzenAardgas;

	parameter<string> NcwRefBase;
	parameter<Ratio>  BTW_Factor;
	parameter<Ratio>  BTW_Factor_gv;
	// end of case parameters

	container NcwRefs 
	{
		container _15 := ='NCW/'+NcwRefBase+'15';
		container _30 := ='NCW/'+NcwRefBase+'30';
		container _50 := ='NCW/'+NcwRefBase+'50';
		container _28 := ='NCW/'+NcwRefBase+'28';
	}

	unit<uint8> PrijzenElektriciteit := Prijzen/Elektriciteit/Staffel;

	container union := =IsNieuwbouw ? 'CalculationSchemes/BebouwingsOperaties/union(StartingStateComponent/BebouwingsObject, BebouwingsObjectZonderNieuwbouw)' : '..';
	
	unit<uint32>  BebouwingsObject := =IsNieuwbouw ? 'union/result' : 'BebouwingsObjectZonderNieuwbouw';
	unit<uint32>  PrevObject           := StartingStateComponent/BebouwingsObject;
	unit<uint8>   BebouwingsTypeDomein := BebouwingsObject/BebouwingsTypeDomein;

	attribute<Invoer/SpecifiekeInstellingen/PlanRegio> PlanRegio_rel (BebouwingsObject) := BebouwingsObject/buurt_rel;


	attribute<ModelObject> Model_rel        (BebouwingsObject) := rlookup(BebouwingsObject/ModelObjectKey, ModelObject/ModelObjectKey);
	attribute<PrevObject>  StartingState_rel(BebouwingsObject) := rlookup(BebouwingsObject/code, PrevObject/code);
	
	container beginState {
	
		unit<uint32>  AfnameGebied         := StateVoorAllocatie/AfnameGebied;
		attribute<Classifications/SchilLabel>  SchilLabel_rel  (BebouwingsObject) := StartingStateComponent/SchilLabel_rel [StartingState_rel];
		attribute<Classifications/GebouwOptie> GebouwOptie_rel (BebouwingsObject) := StartingStateComponent/GebouwOptie_rel[StartingState_rel];
		
		container PerProductAsTable := for_each_nedv(Classifications/Product/Name
		,	'StartingStateComponent/PerProductAsTable/'+Classifications/Product/Name+'[StartingState_rel]'
		,	BebouwingsObject, Classifications/Installatie
		);
		attribute<AfnameGebied>  AfnameGebied_rel (BebouwingsObject):= StartingStateComponent/AfnameGebied_rel[StartingState_rel];	
	}

	unit<uint32> RuimtelijkeVraagComponent := BebouwingsObject
	{
		attribute<Geography/rdc_grids/m100> gridm100_rel (BebouwingsObject) := point[Geography/rdc_grids/m100];

		attribute<Ratio> ResterendFactorBase := = HasResterendFactors
			? 'MakeDefined(merge(BebouwingsType, Ratio, '+AsItemList('ResterendFactorMaps/'+BebouwingsTypeDomein/ResterendFactorName+'[gridm100_rel]')+'), 1.0)'
			: 'const(1.0, BebouwingsObject)';

		attribute<Ratio>      ResterendFactor := ResterendFactorBase * float64(IsDefined(PlanRegio_rel));
		attribute<nrAansl>    nrAansluitingen := ResterendFactor * nrAansluitingen_i;
		attribute<m2>         Oppervlakte     := ResterendFactor * Oppervlakte_i;
		
		attribute<nrAansl>   nrAansluitingen_per_PlanRegio (Invoer/SpecifiekeInstellingen/PlanRegio) := sum(nrAansluitingen, planregio_rel);

		container AansluitCapaciteit
		{
			attribute<kW> RV    (..) := nrAansluitingen * ModelObject/ASW_RV_asl[Model_rel] + Oppervlakte * ModelObject/ASW_RV_opp[Model_rel];
			attribute<kW> WW    (..) := nrAansluitingen * ModelObject/ASW_WW_asl[Model_rel] + Oppervlakte * ModelObject/ASW_WW_opp[Model_rel];
			attribute<kW> Warmte(..) := RV + WW;
			attribute<kW> eWP   (..) := max_elem(RV, WW);
			attribute<kW> EZ    (..) := nrAansluitingen * ModelObject/ASW_EZ_asl[Model_rel] + Oppervlakte * ModelObject/ASW_EZ_opp[Model_rel];
			attribute<kW> EM    (..) := nrAansluitingen * ModelObject/ASW_EM_asl[Model_rel] + Oppervlakte * ModelObject/ASW_EM_opp[Model_rel];
		}
		container Functioneel
		{
			container DragerSpecifiekeOpties := SpecifiekeInstellingen/RuimtelijkeVraag/Drager;
			
			attribute<Ratio>	Klimaateffect (..)	:=	KlimaatFactorMap[gridm100_rel];
			
			attribute<GJ_yr>	WW(..) := (nrAansluitingen * ModelObject/V_WW_asl [Model_rel] + Oppervlakte * ModelObject/V_WW_opp [Model_rel])
						* DragerSpecifiekeOpties/WarmWater;
						
			attribute<GJ_yr>	K (..) := Oppervlakte * ModelObject/V_K_opp[Model_rel] 
						* DragerSpecifiekeOpties/Koude
						* ( 1.0 + 3.66*(1.0 - Klimaateffect));
			
			attribute<GJ_yr>	EA(..) := (nrAansluitingen * ModelObject/V_EA_asl [Model_rel] + Oppervlakte * ModelObject/V_EA_opp [Model_rel])
						* DragerSpecifiekeOpties/ElektrischeApparatuur;
			
			container RV := for_each_nedv(Classifications/SchilLabel/Name
			,	replace(
					'(nrAansluitingen * ModelObject/V_RV_asl/@SL@[Model_rel] + Oppervlakte * ModelObject/V_RV_opp/@SL@[Model_rel])'
						'* DragerSpecifiekeOpties/RuimteVerwarming'
						'* Klimaateffect'
				,'@SL@', Classifications/SchilLabel/Name)
			,	.., GJ_Yr);
			
			attribute<GJ_Yr> CurrRV(..) := ='merge(SchilLabel_rel, GJ_Yr, '+AsItemList('RV/'+Classifications/SchilLabel/Name)+')';
			
			attribute<GJ_yr>	PE  (..)	:=	Oppervlakte * ModelObject/V_PE_opp[Model_rel] * DragerSpecifiekeOpties/RuimteVerwarming;
			attribute<GJ_yr>	Vent(..)	:=	Oppervlakte * ModelObject/V_Vent_opp[Model_rel];
		}
	}

	container Criteria := BebouwingsObject/Criteria // inherit, TODO: opruimen na aanpassing runs
	{
		attribute<bool> Always (BebouwingsObject) := const(true,  BebouwingsObject);
		attribute<bool> Never  (BebouwingsObject) := const(false, BebouwingsObject);
	}

	attribute<BebouwingsTypeDomein> BebouwingsType (BebouwingsObject) := RuimtelijkeVraagComponent/BebouwingsType;

	container EIA_Opties := ='SpecifiekeInstellingen/Beleid/EIA/E_'+NcwRefBase;
	container EEA_Opties := SpecifiekeInstellingen/Beleid/EEA/Kosten/Basis;

	container VerbruiksOpties {
	
		unit<uint8> SchilSprong_set := subset(SchilSprong_sel) {
			attribute<Classifications/SchilSprong> SchilSprong_rel := nr_OrgEntity;
			attribute<string> Name := Classifications/SchilSprong/name[SchilSprong_rel];
			attribute<Classifications/SchilLabel> Naar_rel := Classifications/SchilSprong/Naar_rel[SchilSprong_rel];
			attribute<Classifications/SchilSprongCode> SchilSprongCode_rel := Classifications/SchilSprong/SchilSprongCode_rel[SchilSprong_rel];
			
			attribute<string> LeerCurveName := Classifications/SchilLabel/LeerCurveName[Naar_rel];
			
			unit<uint32> xMO := combine(., ModelObject) {
				attribute<EUR_asl> Ki_asl := ='union_data(.,'+AsItemList(replace('(ModelObject/Ki_min_asl/@SS@ * Schuiven/KostenMin + ModelObject/Ki_max_asl/@SS@ * Schuiven/KostenMax) * Leercurves/'+LeerCurveName+'/Curve', '@SS@', Name))+')';
				attribute<EUR_m2 > Ki_opp := ='union_data(.,'+AsItemList(replace('(ModelObject/Ki_min_opp/@SS@ * Schuiven/KostenMin + ModelObject/Ki_max_opp/@SS@ * Schuiven/KostenMax) * Leercurves/'+LeerCurveName+'/Curve', '@SS@', Name))+')';
			}
		}
		unit<uint8> SchilSprongOrIdle_set := union_unit_uint8(Classifications/SchilLabel, SchilSprong_set) {
			attribute<Classifications/SchilLabel> Van_rel  := union_data(., ID(Classifications/SchilLabel), Classifications/SchilSprong/Van_rel [SchilSprong_set/nr_OrgEntity]);
			attribute<Classifications/SchilLabel> Naar_rel := union_data(., ID(Classifications/SchilLabel), Classifications/SchilSprong/Naar_rel[SchilSprong_set/nr_OrgEntity]);
			
			attribute<string> Name := union_data(., 'S'+repeat(Classifications/SchilLabel/name,2), SchilSprong_set/name);
			
			unit<uint32> xMO := combine(., ModelObject) {
				attribute<EUR_asl> Ki_asl := ='union_data(., ' + AsItemList(const('const(0[EUR_asl], ModelObject)', Classifications/SchilLabel))+', SchilSprong_set/xMO/Ki_asl)';
				attribute<EUR_m2 > Ki_opp := ='union_data(., ' + AsItemList(const('const(0[EUR_m2 ], ModelObject)', Classifications/SchilLabel))+', SchilSprong_set/xMO/Ki_opp)';
			}
		}
		
		parameter<string> BcCode := Classifications/BebouwingsSector/Name[rjoin(BcName, Classifications/BebouwingsComponent/Name, Classifications/BebouwingsComponent/nr_1)] == 'w' ? 'w' : 'u';
		unit<uint32> Installatie := Classifications/Installatie {
			// TODO, MTA: remove const in merge wanneer void domain hier zal worden toegestaan, issue XXX.
			attribute<EUR_asl> Ki_asl := =replace('(Ki_asl_min_@BC * Schuiven/KostenMin + Ki_asl_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, Float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/Name+'/Curve, .)')+')', '@BC', BcCode);
			attribute<EUR_kW>  Ki_cap := =replace('(Ki_cap_min_@BC * Schuiven/KostenMin + Ki_cap_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, Float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/Name+'/Curve, .)')+')', '@BC', BcCode);
			attribute<EUR_m2>  Ki_opp := =replace('(Ki_opp_min_@BC * Schuiven/KostenMin + Ki_opp_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, Float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/Name+'/Curve, .)')+')', '@BC', BcCode);
		}
		
		unit<uint8> GebouwOptie := Classifications/GebouwOptie {
			attribute<EUR_asl> Ki_asl := sum(Installatie/Ki_asl[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_kW > Ki_cap := sum(Installatie/Ki_cap[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel); // TODO: houdt rekening met gelijktijdigheid
			attribute<EUR_m2 > Ki_opp := sum(Installatie/Ki_opp[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
		}
		unit<uint32> Optie := combine(Classifications/DoelLabel, GebouwOptie) {
			attribute<Classifications/DoelLabel> DoelLabel_rel   := nr_1;
			attribute<GebouwOptie>               GebouwOptie_rel := nr_2;
			// bepaal parameters voor verbruik
		}		
	}
	
	unit<uint32> DoelLabelSet := combine(BebouwingsObject, Classifications/DoelLabel) {
		attribute<BebouwingsObject         > BebouwingsObject_rel := nr_1;
		attribute<Classifications/DoelLabel> DoelLabel_rel        := nr_2;
		
		attribute<Classifications/SchilLabel> Van_rel  := BeginState/schillabel_rel[BebouwingsObject_rel];
		attribute<Classifications/SchilLabel> Naar_rel := MakeDefined(Classifications/DoelLabel/SchilLabel_rel[DoelLabel_rel], Van_rel);
		attribute<ModelObject>         ModelObject_rel := Model_rel[BebouwingsObject_rel];
		
		attribute<VerbruiksOpties/SchilSprong_set>     SchilSprong_rel     := rlookup(combine_data(Classifications/SchilSprongCode, Van_rel, Naar_rel), VerbruiksOpties/SchilSprong_set/SchilSprongCode_rel);
		attribute<VerbruiksOpties/SchilSprong_set/xMO> SchilSprong_xMO_rel := combine_data(VerbruiksOpties/schilsprong_set/xMO, SchilSprong_rel, ModelObject_rel);
		
		attribute<EUR> Ki_schil := MakeDefined(
			VerbruiksOpties/schilsprong_set/xMO/Ki_asl[SchilSprong_xMO_rel] * RuimtelijkeVraagComponent/nrAansluitingen[BebouwingsObject_rel] +
			VerbruiksOpties/schilsprong_set/xMO/Ki_opp[SchilSprong_xMO_rel] * RuimtelijkeVraagComponent/Oppervlakte    [BebouwingsObject_rel]
		,	0[EUR]
		);
	}
	
	unit<uint32> GebouwOptieSet := combine(BebouwingsObject, Classifications/GebouwOptie) {
		attribute<BebouwingsObject           > BebouwingsObject_rel := nr_1;
		attribute<Classifications/GebouwOptie> GebouwOptie_rel      := nr_2;
		attribute<Classifications/SchilLabel > DoelLabel_rel := Classifications/GebouwOptie/DoelLabel_rel[GebouwOptie_rel];
		attribute<DoelLabelSet>                DoelLabelSet_rel := combine_data(DoelLabelSet, BebouwingsObject_rel, DoelLabel_rel);
		attribute<EUR> Ki_installatie := 
			VerbruiksOpties/GebouwOptie/Ki_asl[GebouwOptie_rel] * RuimtelijkeVraagComponent/nrAansluitingen[BebouwingsObject_rel] +
			VerbruiksOpties/GebouwOptie/Ki_opp[GebouwOptie_rel] * RuimtelijkeVraagComponent/Oppervlakte    [BebouwingsObject_rel];
		attribute<EUR> Ki_schil       := MakeDefined(DoelLabelSet/Ki_schil[DoelLabelSet_rel], 0[EUR]);
		attribute<EUR> Ki_totaal      := Ki_installatie + Ki_schil;
	}
	attribute<EUR> Ki_totaal_max(BebouwingsObject) := max(GebouwOptieSet/Ki_totaal, GebouwOptieSet/BebouwingsObject_rel);
	
/* REMOVE	
	unit<uint32> OptieSet := combine(BebouwingsObject, VerbruiksOpties/Optie) {
		attribute<BebouwingsObject>      BebouwingsObject_rel := nr_1;
		attribute<VerbruiksOpties/Optie> VerbruiksOptie_rel   := nr_2;
		
		attribute<GebouwOptie>               GebouwOptie_rel := VerbruiksOpties/Optie/gebouwOptie_rel[nr_2];
		attribute<EUR> Ki_installatie :=  VerbruiksOpties/GebouwOptie/Ki_asl[GebouwOptie_rel] * nr_Aansl + VerbruiksOpties/GebouwOptie/Ki_opp[GebouwOptie_rel] * opp;
	}
*/	
	container OpwekkingsOpties
	{
		container bereidheid
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject) := const(LocatieSpecifiekeOpties/OpwekkingF/Zon_PV,      BebouwingsObject);
			attribute<Ratio> ZonneBoiler(BebouwingsObject) := const(LocatieSpecifiekeOpties/OpwekkingF/ZonneBoiler, BebouwingsObject);
		}
		container org_capaciteit
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject) := MakeDefined(StartingStateComponent/OpwekkingsOpties/capaciteit/Zon_PV     [StartingState_rel], 0[Ratio]);
			attribute<Ratio> ZonneBoiler(BebouwingsObject) := MakeDefined(StartingStateComponent/OpwekkingsOpties/capaciteit/ZonneBoiler[StartingState_rel], 0[Ratio]);
		}
		container investering
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject) := median(0.0, bereidheid/Zon_PV      - org_capaciteit/Zon_PV,      1.0[Ratio] - org_capaciteit/Zon_PV);
			attribute<Ratio> ZonneBoiler(BebouwingsObject) := median(0.0, bereidheid/ZonneBoiler - org_capaciteit/ZonneBoiler, 1.0[Ratio] - org_capaciteit/ZonneBoiler);
		}
		container capaciteit
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject) := org_capaciteit/Zon_PV      + investering/Zon_PV;
			attribute<Ratio> ZonneBoiler(BebouwingsObject) := org_capaciteit/ZonneBoiler + investering/ZonneBoiler;
		}
	}

	container Hoeveelheden
	{
		attribute<m2>      ZonneBoiler (BebouwingsObject) := RuimtelijkeVraagComponent/nrOppUnits * OpwekkingsOpties/capaciteit/ZonneBoiler * BC_kentallen/R_ZonB_opp  [BebouwingsType];
		attribute<m2>      Zon_PV      (BebouwingsObject) := RuimtelijkeVraagComponent/nrOppUnits * OpwekkingsOpties/capaciteit/Zon_PV      * BC_kentallen/m2dak_m2bvo [BebouwingsType];
	
		attribute<nrAansl> mWKK        (BebouwingsObject) := RuimtelijkeVraagComponent/nrAansluitingen * Opwekking/mWKK;
		attribute<nrAansl> hWP         (BebouwingsObject) := RuimtelijkeVraagComponent/nrAansluitingen * Opwekking/hWP;
	}

	container Functioneel := RuimtelijkeVraagComponent/Functioneel;

	container BC_kentallen :=	kengetallen/BCkentallen/BC_kentallen(
									Schuiven/LuchtBodemSchuif,
									Schuiven/EfficiencySchuif,
									LeerCurves/eWPlw/Curve,
									LeerCurves/eWPww/Curve,
									LeerCurves/hWP/Curve,
									LeerCurves/ZonPV/Curve,
									LeerCurves/ZonB/Curve,
									LeerCurves/mWKK/Curve,
									Schuiven/KostenMin,
									Schuiven/KostenMax,
									BCname,
									BebouwingsTypeDomein);
	container SchilLabel
	{
		attribute<Classifications/SchilLabel> LastValue    (BebouwingsObject) := StartingStateComponent/SchilLabel_rel[StartingState_rel];
		attribute<Classifications/SchilLabel> CurrValue    (BebouwingsObject) := Sprongen/NaarEnergieLabel;
		attribute<bool>                       WasChanged   (BebouwingsObject) := StartingStateComponent/EnergieLabel/IsChanged[StartingState_rel];
		attribute<bool>                       IsChangedNow (BebouwingsObject) := LastValue != CurrValue;
		attribute<bool>                       IsChanged    (BebouwingsObject) := WasChanged || IsChangedNow;
	}
	
	container Efficiency
	{
		container Gebouw
		{
			attribute<units/Ratio> LaatsteWaarde_vast  (BebouwingsObject) :=
				MakeDefined(StartingStateComponent/Efficiency/Gebouw/ResultaatWaarde_vast[StartingState_rel], EnergieVraagModellen/Efficiency/Gebouw[Model_rel]);
			attribute<units/Ratio> LaatsteWaarde_var  (BebouwingsObject) :=
				MakeDefined(StartingStateComponent/Efficiency/Gebouw/ResultaatWaarde_var[StartingState_rel], EnergieVraagModellen/Efficiency/Gebouw[Model_rel]);

			attribute<units/Ratio> VerbeterFactor_vast (BebouwingsObject) :=
					Sprongen/LabelSprong ==  0[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_T/efficiency_vast [Model_rel] :
					Sprongen/LabelSprong ==  1[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_B/efficiency_vast [Model_rel] :
					Sprongen/LabelSprong ==  2[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency_vast[Model_rel] :
					Sprongen/LabelSprong ==  3[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_B/efficiency_vast [Model_rel] :
					Sprongen/LabelSprong ==  4[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency_vast[Model_rel] :
					Sprongen/LabelSprong ==  5[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency_vast[Model_rel] :
					Sprongen/LabelSprong ==  6[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency_vast[Model_rel] : // gebouw als bij 2
					Sprongen/LabelSprong ==  7[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency_vast[Model_rel] : // gebouw als bij 4
					Sprongen/LabelSprong ==  8[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency_vast[Model_rel] : // gebouw als bij 5
					Sprongen/LabelSprong == 10[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency_vast[Model_rel] : // gebouw als bij 2
					Sprongen/LabelSprong == 11[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency_vast[Model_rel] : // gebouw als bij 4
					Sprongen/LabelSprong == 12[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency_vast[Model_rel] : // gebouw als bij 5
					1.0[Ratio];
			attribute<units/Ratio> VerbeterFactor_var (BebouwingsObject) :=
					Sprongen/LabelSprong ==  0[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_T/efficiency_var [Model_rel] :
					Sprongen/LabelSprong ==  1[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_B/efficiency_var [Model_rel] :
					Sprongen/LabelSprong ==  2[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency_var[Model_rel] :
					Sprongen/LabelSprong ==  3[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_B/efficiency_var [Model_rel] :
					Sprongen/LabelSprong ==  4[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency_var[Model_rel] :
					Sprongen/LabelSprong ==  5[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency_var[Model_rel] :
					Sprongen/LabelSprong ==  6[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency_var[Model_rel] : // gebouw als bij 2
					Sprongen/LabelSprong ==  7[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency_var[Model_rel] : // gebouw als bij 4
					Sprongen/LabelSprong ==  8[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency_var[Model_rel] : // gebouw als bij 5
					Sprongen/LabelSprong == 10[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency_var[Model_rel] : // gebouw als bij 2
					Sprongen/LabelSprong == 11[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency_var[Model_rel] : // gebouw als bij 4
					Sprongen/LabelSprong == 12[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency_var[Model_rel] : // gebouw als bij 5
					1.0[Ratio];
			attribute<units/Ratio> ResultaatWaarde_vast (BebouwingsObject) := max_elem(VerbeterFactor_vast, LaatsteWaarde_vast);
			attribute<units/Ratio> ResultaatWaarde_var (BebouwingsObject) := max_elem(VerbeterFactor_var, LaatsteWaarde_var);
		}
		container SPFeWP_S1
		{
			attribute<string>        Variant_S1       (BebouwingsObject) :=		Invoer/RuimtelijkeData/leidraad_oktober_2019/buurt/S1_variant_keuze[planregio_rel];
			attribute<ratio>         LuchtBodemSchuif (BebouwingsObject) :=		Variant_S1 == 's1a'? 1.0[Ratio] : Variant_S1 == 's1b'? 0.0[Ratio] : 0.5[Ratio];
			attribute<Ratio>         R_lucht          (BebouwingsObject) :=		LuchtBodemSchuif;
			attribute<Ratio>         R_bodem          (BebouwingsObject) :=		1.0 - R_lucht;
			
			attribute<Ratio>	SPF_rv_A  (BebouwingsObject) :=	BC_kentallen/Eff_min * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_A_min + R_bodem * Kengetallen/BCkentallen/SPF_BWP_A_min) +
																BC_kentallen/Eff_max * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_A_max + R_bodem * Kengetallen/BCkentallen/SPF_BWP_A_max);
			attribute<Ratio>	SPF_rv_B  (BebouwingsObject) :=	BC_kentallen/Eff_min * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_B_min + R_bodem * Kengetallen/BCkentallen/SPF_BWP_B_min) +
																BC_kentallen/Eff_max * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_B_max + R_bodem * Kengetallen/BCkentallen/SPF_BWP_B_max);
			attribute<Ratio>	SPF_rv_U  (BebouwingsObject) :=	BC_kentallen/Eff_min * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_U_min + R_bodem * Kengetallen/BCkentallen/SPF_BWP_u_min) +
																BC_kentallen/Eff_max * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_U_max + R_bodem * Kengetallen/BCkentallen/SPF_BWP_U_max);
			attribute<Ratio>	SPF_Koude (BebouwingsObject) :=	BC_kentallen/Eff_min * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_Koude_min + R_bodem * Kengetallen/BCkentallen/SPF_BWP_Koude_min) +
																BC_kentallen/Eff_max * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_Koude_max + R_bodem * Kengetallen/BCkentallen/SPF_BWP_Koude_max);
		}
		container RuimteVerwarming
		{
			attribute<units/Ratio> AardGas (BebouwingsObject):= // neem een opgegeven fractie van de Verbetering (Sprongen/Ruimteverwarming/Efficiency geen een maximale waarde)
				Sprongen/RuimteVerwarming/KanVerbeteren
					? Sprongen/RuimteVerwarming/efficiency
					: EnergieVraagModellen/Efficiency/RuimteVerwarming/AardGas[Model_rel];
			attribute<units/Ratio> Warmte (BebouwingsObject) := const(1.0, BebouwingsObject);
			
			
			attribute<units/Ratio>	BeWP_S1       (BebouwingsObject) :=		(BCname == 'BestaandeWoning') || (BCname == 'NieuwbouwWoning') ?
																			SPFeWP_S1/SPF_rv_B : SPFeWP_S1/SPF_rv_U;
			attribute<units/Ratio>	BeWP_org      (BebouwingsObject) :=		(BCname == 'BestaandeWoning') || (BCname == 'NieuwbouwWoning') ?
																			const(BC_kentallen/SPF_RV_B, BebouwingsObject) : const(BC_kentallen/SPF_RV_U, BebouwingsObject);
			attribute<units/Ratio>	AeWP_S1       (BebouwingsObject) :=		(BCname == 'BestaandeWoning') || (BCname == 'NieuwbouwWoning') ?
																			SPFeWP_S1/SPF_rv_A : SPFeWP_S1/SPF_rv_U;																
			attribute<units/Ratio>	AeWP_org      (BebouwingsObject) :=		(BCname == 'BestaandeWoning') || (BCname == 'NieuwbouwWoning') ?
																			const(BC_kentallen/SPF_RV_A, BebouwingsObject) : const(BC_kentallen/SPF_RV_U, BebouwingsObject);
			attribute<units/Ratio>	AeWP          (BebouwingsObject) :=		= Schuiven/LuchtBodemAlsS1 ? 'AewP_S1' : 'AewP_org';
			attribute<units/Ratio>	BeWP          (BebouwingsObject) :=		= Schuiven/LuchtBodemAlsS1 ? 'BewP_S1' : 'BewP_org';
			attribute<units/Ratio>	EWV           (BebouwingsObject) :=		const(BC_kentallen/SPF_EWV,  BebouwingsObject);
		}

		container Koude
		{
			attribute<units/Ratio>	Elektriciteit (BebouwingsObject) :=		EnergieVraagModellen/Efficiency/Koude/Elektriciteit[Model_rel];
			attribute<units/Ratio>	eWP_S1        (BebouwingsObject) :=		SPFeWP_S1/SPF_Koude;
			attribute<units/Ratio>	eWP_org       (BebouwingsObject) :=		const(BC_kentallen/SPF_Koude, BebouwingsObject);
			attribute<units/Ratio>	eWP           (BebouwingsObject) :=		= Schuiven/LuchtBodemAlsS1 ? 'ewP_S1' : 'ewP_org';
		}

		container WarmWater
		{
			attribute<units/Ratio>	AardGas       (BebouwingsObject) :=		EnergieVraagModellen/Efficiency/WarmWater/AardGas[Model_rel];
			attribute<units/Ratio>	Warmte        (BebouwingsObject) :=		const(1.0, BebouwingsObject);
			attribute<units/Ratio>	eWP           (BebouwingsObject) :=		const(BC_kentallen/SPF_WW,  BebouwingsObject);
			attribute<units/Ratio>	EWV           (BebouwingsObject) :=		const(BC_kentallen/SPF_EWV, BebouwingsObject);
		}

		container Apparatuur
		{
			attribute<units/Ratio> Elektriciteit (BebouwingsObject) := EnergieVraagModellen/Efficiency/Apparatuur/Elektriciteit[Model_rel];
		}
	}
	

	
	attribute<bool> LtVerwarmingGeschikt(BebouwingsObject) := 
	
			IsNieuwbouw 
		|| (RuimtelijkeVraagComponent/BouwJaar >= Classifications/BouwJaar/V/n2010) 
		|| (EnergieLabel/CurrValue <= Classifications/EnergieLabel/V/LabelB);
		
	#include<Sprongen.dms>

	container Opwekking
	{
		attribute<GJ_yr> ZonneBoiler (BebouwingsObject) := Hoeveelheden/ZonneBoiler * kengetallen/Constanten/Opbr_zonB_GJ;
		attribute<GJ_yr> Zon_PV      (BebouwingsObject) := Hoeveelheden/Zon_PV      * kengetallen/Constanten/Opbr_zonPV_GJ;

		attribute<Ratio> BeWP (BebouwingsObject) := value(Sprongen/BeWP, Ratio);
		attribute<Ratio> AeWP (BebouwingsObject) := value(Sprongen/AeWP, Ratio);
		attribute<Ratio> eWP  (BebouwingsObject) := BeWP + AeWP;
		attribute<Ratio> EWV  (BebouwingsObject) := value(Sprongen/EWV, Ratio);
		attribute<Ratio> mWKK (BebouwingsObject) := min_elem(OpwekkingsOpties/Capaciteit/mWKK, 1.0 - EWV - eWP);
		attribute<Ratio> hWP  (BebouwingsObject) := min_elem(OpwekkingsOpties/Capaciteit/hWP,  1.0 - EWV - eWP -mWKK);
	}
	
	attribute<Classifications/WarmteOptie> WarmteAllocatie(BebouwingsObject) := Classifications/WarmteOptie/isGebiedsOptie[WarmteAllocatie_Org]
		? WarmteAllocatie_Org
		: Classifications/EnergieLabel/WarmteOptie_rel[EnergieLabel/CurrValue] != 0[Classifications/WarmteOptie] ? Classifications/EnergieLabel/WarmteOptie_rel[EnergieLabel/CurrValue]
		: Hoeveelheden/hWP  > 0d ? 3[Classifications/WarmteOptie]
		: Hoeveelheden/mWKK > 0d ? 1[Classifications/WarmteOptie] : 0[Classifications/WarmteOptie];
	attribute<string>	WarmteOptie		(BebouwingsObject)	:=	Classifications/WarmteOptie/name[WarmteAllocatie];
	
	container Kosten
	{
		attribute<Eur>	Ki_ZonneBoiler  (BebouwingsObject) :=	Hoeveelheden/ZonneBoiler  * BC_kentallen/Ki_ZonB;
		attribute<Eur>	Ki_Zon_PV       (BebouwingsObject) :=	Hoeveelheden/Zon_PV       * BC_kentallen/Ki_ZonPV;
		attribute<Eur>	Ki_mWKK         (BebouwingsObject) :=	Hoeveelheden/mWKK         * BC_kentallen/Ki_mWKK;
		attribute<Eur>	Ki_hWP_var      (BebouwingsObject) :=	Hoeveelheden/hWP > 0d ? RuimtelijkeVraagComponent/Aansluitcapaciteit/RV * BC_kentallen/Ki_hWP_var : 0[eur];
		attribute<Eur>	Ki_hWP_vast     (BebouwingsObject) :=	Hoeveelheden/hWP          * BC_kentallen/Ki_hWP_vast;
		attribute<Eur>	Ki_hWP          (BebouwingsObject) :=	Ki_hWP_var + Ki_hWP_vast;
		attribute<Eur>	Ki_eWP          (BebouwingsObject) :=	RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_eWP;
		attribute<Eur>	Ki_EWV          (BebouwingsObject) :=	RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_EWV;
		attribute<Eur>	Oi_HR           (BebouwingsObject) :=	WarmteAllocatie != 0[Classifications/WarmteOptie] ? 
																(1[Ratio] - Kengetallen/constanten/afschrijving_resterend) * Sprongen/Ki_HR : 0[eur];

		attribute<Ratio> fractie_afschrijftermijn_15jaar (BebouwingsObject) :=	= Schuiven/LuchtBodemAlsS1 ? 'Sprongen/AnnualisationFactor_S1/fractie_afschrijftermijn_15jaar' : 'const(BC_kentallen/fractie_afschrijftermijn_15jaar, BebouwingsObject)';														
		attribute<Ratio> fractie_afschrijftermijn_30jaar (BebouwingsObject) :=	= Schuiven/LuchtBodemAlsS1 ? 'Sprongen/AnnualisationFactor_S1/fractie_afschrijftermijn_30jaar' : 'const(BC_kentallen/fractie_afschrijftermijn_30jaar, BebouwingsObject)';
		
		attribute<Eur> Ki_LokaleOpwekking30 (BebouwingsObject) := Ki_ZonneBoiler + Ki_Zon_PV + Ki_EWV + fractie_afschrijftermijn_30jaar * Ki_eWP;
		attribute<Eur> Ki_LokaleOpwekking15 (BebouwingsObject) := Ki_mWKK + Ki_hWP + fractie_afschrijftermijn_15jaar * Ki_eWP;
		
		attribute<Eur> Ki_GebouwVerbetering (BebouwingsObject) := RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_gv; // cumulatief
		attribute<Eur_yr> Kj_gv_incentive   (BebouwingsObject) := Sprongen/Incentive_eigenaar_excl + StartingStateComponent/Kosten/Kj_gv_incentive[StartingState_rel];

		attribute<Eur> Ki_LokaleOpwekking   (BebouwingsObject) := Ki_LokaleOpwekking30 + Ki_LokaleOpwekking15;
		attribute<Eur> Ki_Totaal            (BebouwingsObject) := Ki_LokaleOpwekking + Ki_GebouwVerbetering;
	}
	
	container DragerOpties
	{
		container RuimteVerwarming
		{
			parameter<float64>	Aardgas_leidingverliesfactor	:=	1.0 - Kengetallen/Efficiency/Leidingverlies_RV_aardgas,	Descr = "extra op te wekken warmte door verlies in leidingen binnen gebouw", Source = "Validatiesessies startanalyse 2019"; //TODO source naar FO 4.0
			parameter<float64>	eWP_leidingverliesfactor		:=	1.0 - Kengetallen/Efficiency/Leidingverlies_RV_ewp,		Descr = "extra op te wekken warmte door verlies in leidingen binnen gebouw", Source = "Validatiesessies startanalyse 2019"; //TODO source naar FO 4.0
			
			container vast
			{
				attribute<GJ_yr>	AardGas (BebouwingsObject) :=	Functioneel/RuimteVerwarming_vast / Efficiency/Gebouw/ResultaatWaarde_vast;
				attribute<GJ_yr>	Warmte  (BebouwingsObject) :=	Functioneel/RuimteVerwarming_vast / Efficiency/Gebouw/ResultaatWaarde_vast;
				attribute<GJ_yr>	eWP     (BebouwingsObject) :=	Functioneel/RuimteVerwarming_vast / Efficiency/Gebouw/ResultaatWaarde_vast;
				attribute<GJ_yr>	EWV     (BebouwingsObject) :=	Functioneel/RuimteVerwarming_vast / Efficiency/Gebouw/ResultaatWaarde_vast;
			}

			container var
			{
				attribute<GJ_yr>	AardGas (BebouwingsObject) :=	Functioneel/RuimteVerwarming_var  / Efficiency/Gebouw/ResultaatWaarde_var;
				attribute<GJ_yr>	Warmte  (BebouwingsObject) :=	Functioneel/RuimteVerwarming_var  / Efficiency/Gebouw/ResultaatWaarde_var;
				attribute<GJ_yr>	eWP     (BebouwingsObject) :=	Functioneel/RuimteVerwarming_var  / Efficiency/Gebouw/ResultaatWaarde_var;
				attribute<GJ_yr>	EWV     (BebouwingsObject) :=	Functioneel/RuimteVerwarming_var  / Efficiency/Gebouw/ResultaatWaarde_var;
			}

			attribute<GJ_yr>	AardGas		(BebouwingsObject)	:=	(vast/AardGas + var/AardGas) / (Efficiency/RuimteVerwarming/AardGas * Aardgas_leidingverliesfactor);
			attribute<GJ_yr>	Warmte		(BebouwingsObject)	:=	(vast/Warmte  + var/Warmte ) / Efficiency/RuimteVerwarming/Warmte;
			attribute<GJ_yr>	BeWP		(BebouwingsObject)	:=	(vast/eWP     + var/eWP    ) / (Efficiency/RuimteVerwarming/BeWP * eWP_leidingverliesfactor);
			attribute<GJ_yr>	AeWP		(BebouwingsObject)	:=	(vast/eWP     + var/eWP    ) / (Efficiency/RuimteVerwarming/AeWP * eWP_leidingverliesfactor);
			attribute<GJ_yr>	EWV			(BebouwingsObject)	:=	(vast/EWV     + var/EWV    ) / Efficiency/RuimteVerwarming/EWV;
		}
		container Koude
		{
			attribute<ratio> KoudeInvulling (BebouwingsObject) := const(Vraagkentallen/KoudeInvulling, BebouwingsObject);
			attribute<GJ_yr> Elektriciteit  (BebouwingsObject) := KoudeInvulling * (Functioneel/Koude / Efficiency/Koude/Elektriciteit);
		}
		container WarmWater
		{
			parameter<float64>	Aardgas_leidingverliesfactor	:=	1.0 - Kengetallen/Efficiency/Leidingverlies_WW_aardgas,	Descr = "extra op te wekken warmte door verlies in leidingen binnen gebouw", Source = "Validatiesessies startanalyse 2019"; //TODO source naar FO 4.0
			parameter<float64>	eWP_leidingverliesfactor		:=	1.0 - Kengetallen/Efficiency/Leidingverlies_WW_ewp,		Descr = "extra op te wekken warmte door verlies in leidingen binnen gebouw", Source = "Validatiesessies startanalyse 2019"; //TODO source naar FO 4.0
			
			attribute<GJ_yr> AardGas     (BebouwingsObject) := ((Functioneel/WarmWater - Opwekking/Zonneboiler) / Efficiency/WarmWater/AardGas) / Aardgas_leidingverliesfactor;
			attribute<GJ_yr> Warmte      (BebouwingsObject) := ((Functioneel/WarmWater - Opwekking/Zonneboiler) / Efficiency/WarmWater/Warmte );
			attribute<GJ_yr> eWP         (BebouwingsObject) := ((Functioneel/WarmWater - Opwekking/Zonneboiler) / Efficiency/WarmWater/eWP    ) / eWP_leidingverliesfactor;
			attribute<GJ_yr> EWV         (BebouwingsObject) := ((Functioneel/WarmWater - Opwekking/Zonneboiler) / Efficiency/WarmWater/EWV    );
			attribute<GJ_yr> ZonneBoiler (BebouwingsObject) := Opwekking/Zonneboiler;
		}
		container Warmte
		{
			attribute<GJ_yr> AardGas (BebouwingsObject) := RuimteVerwarming/AardGas + WarmWater/AardGas;
			attribute<GJ_yr> Warmte  (BebouwingsObject) := RuimteVerwarming/Warmte  + WarmWater/Warmte;
			attribute<GJ_yr> BeWP    (BebouwingsObject) := RuimteVerwarming/BeWP    + WarmWater/eWP;
			attribute<GJ_yr> AeWP    (BebouwingsObject) := RuimteVerwarming/AeWP    + WarmWater/eWP;
			attribute<GJ_yr> EWV     (BebouwingsObject) := RuimteVerwarming/EWV     + WarmWater/EWV;
		}
		container Apparatuur
		{
			attribute<GJ_yr>	Zon_PV        (BebouwingsObject)	:=	Opwekking/Zon_PV;
			attribute<GJ_yr>	Elektriciteit (BebouwingsObject)	:=	Functioneel/Apparatuur / Efficiency/Apparatuur/Elektriciteit - Zon_PV;
			attribute<GJ_yr>	Ventilatie    (BebouwingsObject)	:=	Functioneel/Ventilatie;
		}
	}
	container Aandeel
	{
		attribute<float64>  Ventilatie           (BebouwingsObject) := float64(Energielabel/Currvalue <= /Classifications/energielabel/V/LabelB || Energielabel/Currvalue == /Classifications/energielabel/V/BeWP);
		attribute<Ratio>    Electric             (BebouwingsObject) := Opwekking/eWP + Opwekking/EWV;
		attribute<Ratio>    Electric_mWKK        (BebouwingsObject) := Electric + Opwekking/mWKK;
		attribute<Ratio>    IndividueleOpwekking (BebouwingsObject) := Electric_mWKK + Opwekking/hWP, IntegrityCheck = "this <= 1.0";
		attribute<float64>  WarmteVraag          (BebouwingsObject) := min_elem(RuimtelijkeVraagComponent/AandeelWarmteVraag, 1.0 - IndividueleOpwekking);
		attribute<float64>  NietDeelnemers       (BebouwingsObject) := 1.0 - WarmteVraag;
		attribute<float64>  Gas                  (BebouwingsObject) := 1.0 - max_elem(float64(Classifications/WarmteOptie/isGebiedsOptie[WarmteAllocatie]), Electric);
	}
	
	container WarmteVraag
	{
		container deelnemers
		{
			attribute<nrAansl>   NrAansluitingen    (BebouwingsObject) := Aandeel/WarmteVraag * RuimtelijkeVraagComponent/nrAansluitingen ;
			attribute<m2>        Oppervlakte        (BebouwingsObject) := Aandeel/WarmteVraag * RuimtelijkeVraagComponent/Oppervlakte;
			attribute<kW>        AansluitCapaciteit (BebouwingsObject) := Aandeel/WarmteVraag * RuimtelijkeVraagComponent/AansluitCapaciteit/Warmte;
			attribute<GJ_yr>     Verbruik           (BebouwingsObject) := Aandeel/WarmteVraag * DragerOpties/Warmte/Warmte;
			attribute<GJ_yr>     Verbruik_RV        (BebouwingsObject) := Aandeel/WarmteVraag * DragerOpties/RuimteVerwarming/Warmte;
			attribute<GJ_yr>     Verbruik_WW        (BebouwingsObject) := Aandeel/WarmteVraag * DragerOpties/WarmWater/Warmte;
		}

		container alle
		{
			attribute<nrAansl>   NrAansluitingen    (BebouwingsObject) := (1.0 - Aandeel/Electric) * RuimtelijkeVraagComponent/nrAansluitingen;
			attribute<kW>        AansluitCapaciteit (BebouwingsObject) := (1.0 - Aandeel/Electric) * RuimtelijkeVraagComponent/AansluitCapaciteit/Warmte;
			attribute<GJ_yr>     Verbruik           (BebouwingsObject) := (1.0 - Aandeel/Electric) * DragerOpties/Warmte/Warmte;
			attribute<GJ_yr>     Verbruik_nofilter  (BebouwingsObject) :=  DragerOpties/Warmte/Warmte;
		}
	}

	container Warmtewet 
	{
		parameter<float64> PrijsFactor_impl :=  sum( Aandeel/Gas * DragerOpties/Warmte/Aardgas) / sum( Aandeel/Gas * DragerOpties/Warmte/Warmte ) * Voorkeuren/MinderDanAndersFactor;
		parameter<float64> PrijsFactor_corr :=  MakeDefined(PrijsFactor_impl, 1.25);
		parameter<float64> PrijsFactor      :=  = 'BebouwingsComponenten/'+rjoin(BCname, Classifications/BebouwingsComponent/name, Classifications/BebouwingsComponent/name[Classifications/BebouwingsComponent/Warmtewet_BC_rel])+'/Warmtewet/PrijsFactor_corr';

		parameter<Eur_GJ> WarmtePrijs := = Voorkeuren/IsVasteWarmtePrijs 
			? 'Voorkeuren/VasteWarmtePrijs'
			: 'PrijsFactor * PrijzenAardgas/KGJ_eindgebruik_excl[classify(0[GJ_yr], PrijzenAardgas/ClassBreak)]';
	}
}
