//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container Prijzen
{
	container AardGas
	{
		unit<uint32> TabelAG := Invoer/EnergiePrijzen/AardGas/Table;
		container bronAG     := Invoer/EnergiePrijzen/AardGas/results;
		
		unit<uint32> TabelGG := Invoer/EnergiePrijzen/GroenGas/Table;
		container bronGG     := Invoer/EnergiePrijzen/GroenGas/results;
		
		parameter<TabelAG> JaarIndexAG := classify(RekenJaar_jaar, bronAG/Jaar);
		parameter<TabelGG> JaarIndexGG := classify(RekenJaar_jaar, bronGG/Jaar);
		
		parameter<kg_GJ> CO2_GJ    := bronAG/CO2_GJ[JaarIndexAG] * (1.0 - Voorkeuren/GroenGasFactor),
			IntegrityCheck = "bronGG/CO2_GJ[JaarIndexGG] * Voorkeuren/GroenGasFactor == 0[kg_GJ]";
		parameter<Float64>  GroenGasFactor:= Voorkeuren/GroenGasFactor;
		parameter<Float64>  GrijsGasFactor:= 1.0 - GroenGasFactor;
		
		unit<uint8> Staffel := classifications/gebruiksgrootteklasse 
		{
			attribute<GJ_yr>  ClassBreak := gas_break;
			attribute<Eur_GJ> KGJ_Commodity        := ='union_data(., ' + AsItemList('bronAG/' + name + '/CommodityPrice  [JaarIndexAG] * GrijsGasFactor + bronGG/' + name + '/CommodityPrice  [JaarIndexGG] * GroenGasFactor') + ')';
			attribute<Eur_GJ> KGJ_netwerk          := ='union_data(., ' + AsItemList('bronAG/' + name + '/netwerk         [JaarIndexAG] * GrijsGasFactor + bronGG/' + name + '/netwerk         [JaarIndexGG] * GroenGasFactor') + ')';
			attribute<Eur_GJ> KGJ_eindgebruik_excl := ='union_data(., ' + AsItemList('bronAG/' + name + '/eindgebruik_excl[JaarIndexAG] * GrijsGasFactor + bronGG/' + name + '/eindgebruik_excl[JaarIndexGG] * GroenGasFactor') + ')';
			attribute<Eur_GJ> KGJ_Maatschappelijk  := ='union_data(., ' + AsItemList('bronAG/' + name + '/Maatschappelijk [JaarIndexAG] * GrijsGasFactor + bronGG/' + name + '/Maatschappelijk [JaarIndexGG] * GroenGasFactor') + ')';
			attribute<Eur_GJ> KGJ_EnergieHeffing   := ='union_data(., ' + AsItemList('bronAG/' + name + '/EnergieHeffing  [JaarIndexAG] * GrijsGasFactor + bronGG/' + name + '/EnergieHeffing  [JaarIndexGG] * GroenGasFactor') + ')';
			attribute<Eur_GJ> KGJ_CO2Heffing       := ='union_data(., ' + AsItemList('bronAG/' + name + '/CO2Heffing      [JaarIndexAG] * GrijsGasFactor + bronGG/' + name + '/CO2Heffing      [JaarIndexGG] * GroenGasFactor') + ')';
		}

		unit<uint8>  Glastuinbouw : nrofrows = 1
		{
			attribute<GJ_yr>  ClassBreak           := union_data(., first(staffel/Classbreak));
			attribute<Eur_GJ> KGJ_eindgebruik_excl := bronAG/Glastuinbouw/eindgebruik_excl[const(JaarIndexAG,.)] * GrijsGasFactor + bronGG/Glastuinbouw/eindgebruik_excl[const(JaarIndexGG,.)] * GroenGasFactor;
			attribute<Eur_GJ> KGJ_Maatschappelijk  := bronAG/Glastuinbouw/Maatschappelijk [const(JaarIndexAG,.)] * GrijsGasFactor + bronGG/Glastuinbouw/Maatschappelijk [const(JaarIndexGG,.)] * GroenGasFactor;
			attribute<Eur_GJ> KGJ_netwerk          := bronAG/Glastuinbouw/netwerk         [const(JaarIndexAG,.)] * GrijsGasFactor + bronGG/Glastuinbouw/netwerk         [const(JaarIndexGG,.)] * GroenGasFactor;
			attribute<Eur_GJ> KGJ_EnergieHeffing   := bronAG/Glastuinbouw/EnergieHeffing  [const(JaarIndexAG,.)] * GrijsGasFactor + bronGG/Glastuinbouw/EnergieHeffing  [const(JaarIndexGG,.)] * GroenGasFactor;
			attribute<Eur_GJ> KGJ_CO2Heffing       := bronAG/Glastuinbouw/CO2Heffing      [const(JaarIndexAG,.)] * GrijsGasFactor + bronGG/Glastuinbouw/CO2Heffing      [const(JaarIndexGG,.)] * GroenGasFactor;
		}

		container Bijstook
		{
			parameter<Eur_GJ> KGJ_eindgebruik_excl := bronAG/GrootGebruik/eindgebruik_excl[JaarIndexAG] * GrijsGasFactor + bronGG/GrootGebruik/eindgebruik_excl[JaarIndexGG] * GroenGasFactor;
			parameter<Eur_GJ> KGJ_Maatschappelijk  := bronAG/GrootGebruik/Maatschappelijk [JaarIndexAG] * GrijsGasFactor + bronGG/GrootGebruik/Maatschappelijk [JaarIndexGG] * GroenGasFactor;
			parameter<Eur_GJ> KGJ_netwerk          := bronAG/GrootGebruik/netwerk         [JaarIndexAG] * GrijsGasFactor + bronGG/GrootGebruik/netwerk         [JaarIndexGG] * GroenGasFactor;
			parameter<Eur_GJ> KGJ_EnergieHeffing   := bronAG/GrootGebruik/EnergieHeffing  [JaarIndexAG] * GrijsGasFactor + bronGG/GrootGebruik/EnergieHeffing  [JaarIndexGG] * GroenGasFactor;
			parameter<Eur_GJ> KGJ_CO2Heffing       := bronAG/GrootGebruik/CO2Heffing      [JaarIndexAG] * GrijsGasFactor + bronGG/GrootGebruik/CO2Heffing      [JaarIndexGG] * GroenGasFactor;
		}
	}

	container Elektriciteit
	{
		unit<uint32> Tabel := Invoer/EnergiePrijzen/Elektriciteit/Table;
		container    bron  := Invoer/EnergiePrijzen/Elektriciteit/results;

		parameter<Tabel> JaarIndex := classify(RekenJaar_jaar, bron/Jaar);
		parameter<kg_GJ> CO2_GJ    := bron/CO2_GJ[JaarIndex];

		unit<uint8> Staffel := classifications/gebruiksgrootteklasse
		{
			attribute<GJ_yr>  ClassBreak           := elek_break_kWh [GJ_yr];
			attribute<Eur_GJ> KGJ_commodity        := ='union_data(., ' + AsItemList('bron/' + name + '/CommodityPrice  [JaarIndex]') + ')';
			attribute<Eur_GJ> KGJ_eindgebruik_excl := ='union_data(., ' + AsItemList('bron/' + name + '/eindgebruik_excl[JaarIndex]') + ')';
			attribute<Eur_GJ> KGJ_Maatschappelijk  := ='union_data(., ' + AsItemList('bron/' + name + '/Maatschappelijk [JaarIndex]') + ')';
			attribute<Eur_GJ> KGJ_netwerk          := ='union_data(., ' + AsItemList('bron/' + name + '/netwerk         [JaarIndex]') + ')';
			attribute<Eur_GJ> KGJ_EnergieHeffing   := ='union_data(., ' + AsItemList('bron/' + name + '/EnergieHeffing  [JaarIndex]') + ')';
			attribute<Eur_GJ> KGJ_CO2Heffing       := ='union_data(., ' + AsItemList('bron/' + name + '/CO2Heffing      [JaarIndex]') + ')';
		}
	}
	
	container overig
	{
		container bron := Invoer/EnergiePrijzen/Overig/results;

		parameter<Eur_GJ> Pj_biomassa := bron/Biomassa [rlookup(RekenJaar_jaar, bron/jaar)];
		parameter<Eur_GJ> Pj_pellets  := bron/Pellets  [rlookup(RekenJaar_jaar, bron/jaar)];
		parameter<Eur_GJ> Pj_H2       := bron/Waterstof[rlookup(RekenJaar_jaar, bron/jaar)];

		parameter<Eur_GJ> Pm_biomassa := Pj_biomassa;
		parameter<Eur_GJ> Pm_pellets  := Pj_pellets;
	}
}