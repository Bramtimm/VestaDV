//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template EnergieKengetallenImport
{
	// Begin case parameters
	parameter<string> FileName;
	parameter<string> ModelType_str_name;

	unit<uint8> model_type;
	unit<uint8> bouwjaarindeling;

	unit<float64> model_eenheid;
	unit<float64> koppel_eenheid;
	// end case parameters

	unit<float64> GJ_yr_per_eenheid := (units/GJ / Units/Yr) / model_eenheid;
	unit<float64> kW_per_eenheid    := units/kW      / model_eenheid; // capaciteit
	unit<float64> kWh_per_eenheid   := units/kWh     / model_eenheid;
	unit<float64> kg_per_eenheid    := units/kg     / model_eenheid;
	unit<float64> Eur_per_eenheid   := units/Eur     / model_eenheid;
	unit<float64> m2_per_eenheid    := units/m2      / model_eenheid;
	unit<float64> MU_per_JU         := model_eenheid / koppel_eenheid;

	unit<uint32> Table
	:	StorageName     = "='%EnergieDataProjDir%/'+ FileName"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	,	SyncMode        = "All"
	,	IsHidden        = "True"
	{
		attribute<string> BouwJaar_str;
		attribute<string> ModelType_str := =ModelType_str_name;

		attribute<string> Label     := trim(ModelType_str) +  ', ' + trim(BouwJaar_str), DialogType = "LabelText";
		parameter<string> LabelList := lowercase(AsItemList(Label));
	}

	unit<uint32> TableColumns := SubItem_PropValues(table, 'name'), isHidden = "True";

	container Results : FreeData = "False"
	{
		unit<uint32>  ModelObject := Table;
		unit<float64> ModelUnit   := model_eenheid;
		unit<float64> JoinedUnit  := koppel_eenheid;
		
		attribute<MU_per_JU> nrMUperJU(ModelObject) := const(1.0[ModelUnit / JoinedUnit], Table);
		
		attribute<bouwjaarindeling> BouwJaar       (ModelObject) := rlookup(trim(Table/BouwJaar_str ), bouwjaarindeling/excel_code);
		attribute<model_type>       ModelType      (ModelObject) := rlookup(trim(Table/ModelType_str), model_type/Excel_code);
		attribute<uint8>            ModelObjectKey (ModelObject) := ModelType *  uint8(NrOfRows(bouwjaarindeling)) + BouwJaar;

		container Functioneel
		{
			attribute<GJ_yr_per_eenheid>	RuimteVerwarming_vast  (ModelObject) :=	value(table/V_RV_vast, GJ_yr_per_eenheid),	Descr = "vaste functionele warmtevraag, onafhankelijk van oppervlak",
				IntegrityCheck = "strcount(table/V_RV_vast, ',')==0";
			attribute<GJ_yr_m2>				RuimteVerwarming_var   (ModelObject) :=	value(table/V_RV_var,  GJ_yr_m2),			Descr = "variabel deel functionele warmtevraag, afhankelijk van oppervlak";
			attribute<GJ_yr_m2>				V_Ventilatie           (ModelObject) :=	value(table/V_Vent,    GJ_yr_m2),			Descr = "variabele extra ventilatievraag bij woningen vanaf schillabel B";
			
			attribute<Ratio>				RV_slechterfactor_vast (ModelObject) :=	makedefined(value(table/V_RV_CORR_vast, GJ_yr_per_eenheid) / RuimteVerwarming_vast , 1.0[Ratio]);
			attribute<Ratio>				RV_slechterfactor_var  (ModelObject) :=	makedefined(value(table/V_RV_CORR_var,  GJ_yr_m2)          / RuimteVerwarming_var  , 1.0[Ratio]);
			attribute<Ratio>				RV_onbekendfactor_vast (ModelObject) :=	makedefined(value(table/V_RV_GL_vast,   GJ_yr_per_eenheid) / RuimteVerwarming_vast , 1.0[Ratio]);
			attribute<Ratio>				RV_onbekendfactor_var  (ModelObject) :=	makedefined(value(table/V_RV_GL_var,    GJ_yr_m2)          / RuimteVerwarming_var  , 1.0[Ratio]);
			
			attribute<GJ_yr_M2>          Pompenergie_M2        (ModelObject) :=
				= IsDefined(rlookup('V_P_ELEK', TableColumns/name))
					? 'MakeDefined(value(table/V_P_ELEK,  Ratio), 0.0[GJ_yr_M2])'
					: 'const(0.0[GJ_yr_M2], ModelObject)';

			attribute<GJ_yr_M2>				Koude                 (ModelObject) :=	value(table/V_KOU,      GJ_yr_M2);
			attribute<GJ_yr_per_eenheid>	WarmWater             (ModelObject) :=	value(table/V_WW,       GJ_yr_per_eenheid);
			attribute<GJ_yr_per_eenheid>	ElektrischeApparatuur (ModelObject) :=	value(table/V_APP_ELEK, GJ_yr_per_eenheid);
		}
		container Efficiency
		{
			attribute<Classifications/EnergieLabel> EnergieLabel(ModelObject) := 
				results/energie/Label == 'A'
					? Classifications/EnergieLabel/V/Aplus
					: rlookup(results/energie/Label, Classifications/EnergieLabel/Label);

			attribute<Ratio> Gebouw            (ModelObject) := value(table/EG, Ratio);

			container RuimteVerwarming
			{
				attribute<Ratio> AardGas       (ModelObject) := MakeDefined(value(table/E_RV_Gas,  Ratio), value(1.0, Ratio));
			}
			container Koude
			{
				attribute<Ratio> Elektriciteit (ModelObject) := MakeDefined(value(table/E_KOU_ELEK, Ratio), 1.0[Ratio]), Descr = "Efficiency Airco";
			}
			container WarmWater
			{
				attribute<Ratio> AardGas       (ModelObject) := MakeDefined(value(table/E_WW_GAS,  Ratio), 1.0[Ratio]);
			}
			container Apparatuur
			{
				attribute<Ratio> Elektriciteit (ModelObject):= MakeDefined(value(table/E_APP_Elek, Ratio), value(1.0, Ratio));
			}
		}
		container AansluitCapaciteit
		{
			attribute<kW_per_eenheid> RV            (ModelObject) := value(table/AC_RV, kW_per_eenheid);
			attribute<kW_per_eenheid> WW            (ModelObject) := value(table/AC_WW, kW_per_eenheid);
			attribute<kW_per_eenheid> Warmte        (ModelObject) := RV + WW;
		}
		container Energie
		{
			attribute<float64> Index (ModelObject) := float64(table/EnergieIndex);
			attribute<string>  Label (ModelObject) := string(table/EnergieLabel);
		}
		
		container Verbeteringen
		{
			container RuimteVerwarming
			{
				attribute<Ratio> efficiency (ModelObject) := MakeDefined(table/MV_RV[Ratio], 1.07[ratio]);
			}
			container LTAS
			{
				attribute<Eur_per_eenheid> kosten_min(ModelObject) := = IsDefined(rlookup('K_LTAS_MIN', TableColumns/name)) ? 'value(table/K_LTAS_MIN, Eur_per_eenheid)' : 'const(0[Eur_per_eenheid], ModelObject)';
				attribute<Eur_per_eenheid> kosten_max(ModelObject) := = IsDefined(rlookup('K_LTAS_MAX', TableColumns/name)) ? 'value(table/K_LTAS_MAX, Eur_per_eenheid)' : 'const(0[Eur_per_eenheid], ModelObject)';
			}
		}
		
	}
}