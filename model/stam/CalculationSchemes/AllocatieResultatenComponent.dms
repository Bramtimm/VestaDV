//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template AllocatieResultatenComponent
{
	// begin case parameters
	unit<uint32> BO;
	container WarmteVraagComponent;
	parameter<string>                      BebouwingsComponent_name;
	// end case parameters
	
	attribute<Classifications/WarmteOptie> WarmteAllocatie (BO) := BO/WarmteOptie_rel; // TODO: substitute

	container                                         VraagKentallen                                      := BO/VraagKentallen;
	unit<uint32>                                      PlanRegio                                           := Invoer/SpecifiekeInstellingen/PlanRegio;
	attribute<Classifications/WoningtypeBestaand>     BebouwingsType                   (BO) := BO/BebouwingsType;
	attribute<bool>                                   VeroorzaaktGrondroering          (BO) := Classifications/WarmteOptie/isGebiedsOptie[WarmteAllocatie];
	attribute<bool>                                   GrondroeringInPlanRegio          (PlanRegio)        := sum(VeroorzaaktGrondroering ? 1 : 0, BO/PlanRegio_rel) > 0;
 
// 	attribute<nrAansl>   nrAsl_e_app  (PlanRegio) := sum(BO/Aansluitingen/Enet_app, BO/Planregio_rel);
// 	attribute<nrAansl>   nrAsl_e_ewp  (PlanRegio) := sum(BO/Aansluitingen/Enet_ewp, BO/Planregio_rel);
// 	attribute<nrAansl>   nrAsl_e_hwp  (PlanRegio) := sum(BO/Aansluitingen/Enet_hwp, BO/Planregio_rel);
	
	attribute<kw> CapaciteitsvraagE (PlanRegio) :=  sum(BO/AansluitCapaciteit/GTF_Enet * 
		( BO/AansluitCapaciteit/ASW_Eapp * float64(Aansluitingen/PerBO/nrAsl_e_app > 0.0[nrAansl])
		+ BO/AansluitCapaciteit/ASW_Ehwp * float64(Aansluitingen/PerBO/nrAsl_e_hwp > 0.0[nrAansl])
		+ BO/AansluitCapaciteit/ASW_Eewp * float64(Aansluitingen/PerBO/nrAsl_e_ewp > 0.0[nrAansl]) ), BO/Planregio_rel);

	container Aansluitingen
	{
		container PerBO
		{
			attribute<nrAansl> nrAsl_gas   (BO) := BO/nrAansluitingen * float64(not(Classifications/WarmteOptie/isGebiedsOptie[WarmteAllocatie])) - nrAsl_e_ewp;
			attribute<nrAansl> nrAsl_H2net (BO) := BO/nrAansluitingen * float64(aandelen/WaterstofWP) + BO/nrAansluitingen * float64(aandelen/WaterstofHR);
			attribute<nrAansl> nrAsl_e_app (BO) := BO/Aansluitingen/Enet_app - BO/nrAansluitingen * float64(aandelen/WaterstofWP);
			attribute<nrAansl> nrAsl_e_ewp (BO) := BO/Aansluitingen/Enet_ewp * float64(not(Classifications/WarmteOptie/isGebiedsOptie[WarmteAllocatie]));
			attribute<nrAansl> nrAsl_e_hwp (BO) := BO/Aansluitingen/Enet_hwp + BO/nrAansluitingen * float64(aandelen/WaterstofWP);
		}
		attribute<nrAansl>   nrAsl_gas    (PlanRegio) := sum(PerBO/nrAsl_gas,   BO/Planregio_rel);
		attribute<nrAansl>   nrAsl_H2net  (PlanRegio) := sum(PerBO/nrAsl_H2net, BO/Planregio_rel);
		attribute<nrAansl>   nrAsl_e_app  (PlanRegio) := sum(PerBO/nrAsl_e_app, BO/Planregio_rel);
		attribute<nrAansl>   nrAsl_e_ewp  (PlanRegio) := sum(PerBO/nrAsl_e_ewp, BO/Planregio_rel);
		attribute<nrAansl>   nrAsl_e_hwp  (PlanRegio) := sum(PerBO/nrAsl_e_hwp, BO/Planregio_rel);
	}
	container Aandelen := for_each_nedv(Classifications/GebiedsOptie/name, 'WarmteAllocatie == Classifications/WarmteOptie/V/'+Classifications/GebiedsOptie/name+'', BO, bool);

	container MeterVraag := for_each_nedv(Classifications/GebiedsOptie/name, 'float64(Aandelen/'+Classifications/GebiedsOptie/name+') * (BO/Functioneel/V_RV + BO/Functioneel/V_TW)', BO, GJ_yr)
	{
		attribute<GJ_yr> Aardgas       (BO) := BO/Metervraag/V_gas * float64(not(Classifications/WarmteOptie/isGebiedsOptie[WarmteAllocatie]));
		attribute<GJ_yr> Elektriciteit (BO) := BO/Metervraag/V_e;
		attribute<GJ_yr> Waterstof     (BO) := BO/Metervraag/V_H2;
		attribute<GJ_yr> Pellets       (BO) := const(0.0[gj_yr], BO); //TODO: vraag opnemen, bijv. BO/Metervraag/V_pellets;
		attribute<GJ_yr> Biomassa      (BO) := const(0.0[gj_yr], BO); //TODO: vraag opnemen, bijv. BO/Metervraag/V_biomassa;
		attribute<GJ_yr> Kolen         (BO) := const(0.0[gj_yr], BO); //TODO: vraag opnemen, bijv. BO/Metervraag/V_kolen;
		attribute<GJ_yr> Wind          (BO) := const(0.0[gj_yr], BO); //TODO: vraag opnemen, bijv. BO/Metervraag/V_wind;
		attribute<GJ_yr> Zon           (BO) := const(0.0[gj_yr], BO); //TODO: vraag opnemen, bijv. BO/Metervraag/V_zon;
		attribute<GJ_yr> Koude         (BO) := BO/Functioneel/V_K * float64(Aandelen/WKO);
		attribute<GJ_yr> Warmte_LT     (BO) := BO/Functioneel/V_Warmte * float64(Classifications/WarmteOptie/IsLT[BO/WarmteOptie_rel]);
		attribute<GJ_yr> Warmte_MT     (BO) := BO/Functioneel/V_Warmte * float64(Classifications/WarmteOptie/IsMT[BO/WarmteOptie_rel]);
		attribute<GJ_yr> GebiedsOptie  (BO) := ='add('+AsItemList(Classifications/GebiedsOptie/name)+')';
	}

	container AardGas 
	{
		attribute<bool>    heeft_gas        (BO) := Metervraag/Aardgas > 0.0[GJ_yr];
		attribute<nrAansl> nrAansl_gas      (BO) := float64(heeft_gas) * BO/nrAansluitingen;
		attribute<Eur>     AansluitBijdrage (BO) := BO/Opbrengsten/AansluitBijdrageG   * float64(heeft_gas);
		attribute<Eur_yr>  VastRecht        (BO) := BO/Opbrengsten/VastRechtBijdrageG  * float64(heeft_gas);

		unit<uint8> ggk := Prijzen/Aardgas/Staffel; // gebruiksgrootte klasse
		attribute<ggk>    ggk_rel          (BO) := classify(MeterVraag/AardGas, ggk/ClassBreak);
		attribute<Eur_yr> eindgebruik_excl (BO) := MeterVraag/AardGas * ggk/KGJ_eindgebruik_excl[ggk_rel];
		attribute<Eur_yr> maatschappelijk  (BO) := MeterVraag/AardGas * ggk/KGJ_maatschappelijk [ggk_rel];
		attribute<Eur_yr> netwerk          (BO) := MeterVraag/AardGas * ggk/KGJ_netwerk         [ggk_rel];
		attribute<Eur_yr> EnergieHeffing   (BO) := MeterVraag/AardGas * ggk/KGJ_EnergieHeffing  [ggk_rel];
		attribute<Eur_yr> CO2Heffing       (BO) := MeterVraag/AardGas * ggk/KGJ_CO2Heffing      [ggk_rel];
	}
	
	container Vastrecht
	{	
		attribute<Eur_yr> Kj_Vastrecht_MT(BO) := float64(Classifications/WarmteOptie/IsMT[BO/WarmteOptie_rel]) * BO/Opbrengsten/VastRechtMT_T;			
		attribute<Eur_yr> Kj_Vastrecht_LT(BO) := float64(Classifications/WarmteOptie/IsLT[BO/WarmteOptie_rel]) * BO/Opbrengsten/VastRechtLT_T;
		attribute<Eur_yr> Kj_Vastrecht_K (BO) := float64(WarmteAllocatie == Classifications/WarmteOptie/V/WKO) * BO/Opbrengsten/VastRechtK_T;
			
		attribute<Eur_yr>Kj_Vastrecht    (BO) := Kj_Vastrecht_MT + Kj_Vastrecht_LT + Kj_Vastrecht_K;
	}
	
	attribute<nrAansl> aant_g_aansl_per_planregio        (PlanRegio) := sum((BO/Aansluitingen/Gnet + BO/Aansluitingen/H2net), BO/PlanRegio_rel);
	attribute<nrAansl> aant_g_aansl_hoogb_per_planregio  (PlanRegio) := sum((BO/Aansluitingen/Gnet + BO/Aansluitingen/H2net) * float64( BO/IsMeergezins), BO/PlanRegio_rel);
	attribute<nrAansl> aant_g_aansl_laagb_per_planregio  (PlanRegio) := sum((BO/Aansluitingen/Gnet + BO/Aansluitingen/H2net) * float64(!BO/IsMeergezins), BO/PlanRegio_rel);
	
	container Elektriciteit
	{
		attribute<Eur>    AansluitBijdrage (BO) := BO/Opbrengsten/AansluitBijdrageE;
		attribute<Eur_yr> VastRecht        (BO) := BO/Opbrengsten/VastRechtBijdrageE;
		attribute<Eur_yr> Heffingskorting  (BO) := BO/Opbrengsten/HeffingskortingE;

		unit<uint8> ggk := Prijzen/Elektriciteit/Staffel; // gebruiksgrootte klasse
		attribute<ggk>    ggk_rel          (BO) := classify(MeterVraag/Elektriciteit, ggk/ClassBreak);
		attribute<Eur_yr> eindgebruik_excl (BO) := MeterVraag/Elektriciteit * ggk/KGJ_eindgebruik_excl[ggk_rel];
		attribute<Eur_yr> maatschappelijk  (BO) := MeterVraag/Elektriciteit * ggk/KGJ_maatschappelijk [ggk_rel];
		attribute<Eur_yr> netwerk          (BO) := MeterVraag/Elektriciteit * ggk/KGJ_netwerk         [ggk_rel];
		attribute<Eur_yr> EnergieHeffing   (BO) := MeterVraag/Elektriciteit * ggk/KGJ_EnergieHeffing  [ggk_rel] - Heffingskorting;
		attribute<Eur_yr> CO2Heffing       (BO) := MeterVraag/Elektriciteit * ggk/KGJ_CO2Heffing      [ggk_rel];
	}
	container CO2
	{
		attribute<KG_yr> AardGas           (BO) := MeterVraag/AardGas       * prijzen/AardGas/CO2_GJ;
		attribute<KG_yr> Elektriciteit     (BO) := MeterVraag/Elektriciteit * prijzen/Elektriciteit/CO2_GJ;
	}
}

