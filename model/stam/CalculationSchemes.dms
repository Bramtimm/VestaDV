//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container CalculationSchemes: Using = "Units;Geography"
{
	#include <ModelObjectKentallenImport.dms>

	#include <NieuwbouwWoningOperaties.dms>
	#include <NieuwbouwUtilOperaties.dms>
	#include <NieuwbouwGlTbOperaties.dms>
	#include <LegeBebouwingsComponent.dms>
	#include <BebouwingsOperaties.dms>

	#include <StartingStateComponent.dms>
	
	#include <TussenResultaten.dms>
	
	#include <Payments.dms>
	#include <Transformations.dms>
	
	#include <Resultaten.dms>
	#include <LeidraadResultaten.dms>
	#include <AllocatieResultatenComponent.dms>
	
	Template Naar100mGrid
	{
		container AllocatieResultatenComponent;
		parameter<String> WkoResultsRef; 
		
		container impl: IsHidden = "True"
		{
			container BCdata     := AllocatieResultatenComponent/BCdata;
			container RuimtelijkeVraagComponent := AllocatieResultatenComponent/RuimtelijkeVraagComponent;
			unit<UInt32> BebouwingsObject       := AllocatieResultatenComponent/BebouwingsObject;
			
			attribute<Geography/rdc_grids/m100> gridm100_rel (BebouwingsObject) := RuimtelijkeVraagComponent/gridm100_rel;
		}
		container Vraag
		{
			attribute<GJ_yr> AardGas       (Geography/rdc_grids/m100) := sum(AllocatieResultatenComponent/MeterVraag/AardGas      , impl/gridm100_rel);
			attribute<GJ_yr> RestWarmte    (Geography/rdc_grids/m100) := sum(AllocatieResultatenComponent/MeterVraag/RestWarmte   , impl/gridm100_rel);
			attribute<GJ_yr> GeoThermie    (Geography/rdc_grids/m100) := sum(AllocatieResultatenComponent/MeterVraag/GeoThermie   , impl/gridm100_rel);
			attribute<GJ_yr> WijkWKK       (Geography/rdc_grids/m100) := sum(AllocatieResultatenComponent/MeterVraag/WijkWKK      , impl/gridm100_rel);
			attribute<GJ_yr> WKO           (Geography/rdc_grids/m100) := sum(AllocatieResultatenComponent/MeterVraag/WKO          , impl/gridm100_rel);
			attribute<GJ_yr> Elektriciteit (Geography/rdc_grids/m100) := sum(AllocatieResultatenComponent/MeterVraag/Elektriciteit, impl/gridm100_rel);
			attribute<GJ_yr> Totaal        (Geography/rdc_grids/m100) := AardGas + RestWarmte + GeoThermie + WijkWKK + WKO + Elektriciteit;
			
			container Potentiaal
			{
				unit<spoint> Kernel := Geography/DistMatrices/pot1000m/KernelDomain;

				attribute<Units/GJ_yr> AardGas       (Geography/rdc_grids/m100) := float64(potential(Float32(Vraag/AardGas),       Kernel/Cilindrical));
				attribute<Units/GJ_yr> RestWarmte    (Geography/rdc_grids/m100) := float64(potential(Float32(Vraag/RestWarmte),    Kernel/Cilindrical));
				attribute<Units/GJ_yr> GeoThermie    (Geography/rdc_grids/m100) := float64(potential(Float32(Vraag/GeoThermie),    Kernel/Cilindrical));
				attribute<Units/GJ_yr> WijkWKK       (Geography/rdc_grids/m100) := float64(potential(Float32(Vraag/WijkWKK),       Kernel/Cilindrical));
				attribute<Units/GJ_yr> WKO           (Geography/rdc_grids/m100) := float64(potential(Float32(Vraag/WKO),           Kernel/Cilindrical));
				attribute<Units/GJ_yr> Elektriciteit (Geography/rdc_grids/m100) := float64(potential(Float32(Vraag/Elektriciteit), Kernel/Cilindrical));
				attribute<Units/GJ_yr> Totaal        (Geography/rdc_grids/m100) := float64(potential(Float32(Vraag/Totaal),        Kernel/Cilindrical));
			}
		}
		container AansluitCapaciteit
		{
			attribute<kW> Totaal  (Geography/rdc_grids/m100) := sum(impl/RuimtelijkeVraagComponent/AansluitCapaciteit/Warmte,   impl/gridm100_rel);
			attribute<kW> AardGas (Geography/rdc_grids/m100) := sum(impl/WarmteVraagPerObject/alle/AansluitCapaciteit, impl/gridm100_rel);
			attribute<kW> Overig  (Geography/rdc_grids/m100) := Totaal - AardGas;
		}
		container WKO
		{
			attribute<GJ_yr>  V_Warmte    (Geography/rdc_grids/m100) := =WkoResultsRef == '' ? 'const(0[GJ_yr], Geography/rdc_grids/m100)' : 'sum('+WkoResultsRef+'/V_Warmte, impl/gridm100_rel)';
			attribute<GJ_yr>  V_Koude     (Geography/rdc_grids/m100) := =WkoResultsRef == '' ? 'const(0[GJ_yr], Geography/rdc_grids/m100)' : 'sum('+WkoResultsRef+'/V_Koude , impl/gridm100_rel)';
			attribute<GJ_yr>  V_Elek      (Geography/rdc_grids/m100) := =WkoResultsRef == '' ? 'const(0[GJ_yr], Geography/rdc_grids/m100)' : 'sum('+WkoResultsRef+'/V_Elek  , impl/gridm100_rel)';
			attribute<GJ_yr>  Onttrekking (Geography/rdc_grids/m100) := V_Warmte - (V_Koude + V_Elek);

			attribute<kW>     Capaciteit  (Geography/rdc_grids/m100) := =WkoResultsRef == '' ? 'const(0[kW], Geography/rdc_grids/m100)' : 'sum('+WkoResultsRef+'/P_Warmte,     impl/gridm100_rel)';
		}
	}

	Template NaarPlanRegio //TODO: wegsubstitueren en rechtstreeks opnemen in KostenBaten.
	{
		// begin case parameters
		unit<uint32> BO;
		attribute<float64> BeschikbaarheidsFactor (BO);
		// end case parameters

//REMOVE ?		attribute<Classifications/WarmteOptie> WarmteAllocatie(BO) := BO/WarmteOptie_rel; // TODO: wegsubstiueren
		unit<uint32>                           PR                  := Invoer/SpecifiekeInstellingen/PlanRegio;
		
		parameter<Eur_GJ> WarmtePrijs := BO/Warmtewet/WarmtePrijs;


		attribute<nrAansl>        nrAanslWarmteDeelnemers      (PR) := sum(BeschikbaarheidsFactor * BO/nrAansluitingen,           BO/PlanRegio_rel);
		attribute<Units/kW>       CapaciteitWarmteDeelnemers   (PR) := sum(BeschikbaarheidsFactor * BO/AansluitCapaciteit/Warmte, BO/PlanRegio_rel);
		attribute<Units/m2>       Oppervlak_Deelnemers         (PR) := sum(BeschikbaarheidsFactor * BO/Oppervlakte,               BO/PlanRegio_rel);
		
		attribute<nrAansl>        nrAansl_totaal               (PR) := sum(BO/nrAansluitingen,           BO/PlanRegio_rel);
		attribute<Units/kW>       CapaciteitWarmte_totaal      (PR) := sum(BO/AansluitCapaciteit/Warmte, BO/PlanRegio_rel);
		attribute<Units/m2>       Oppervlak_allen              (PR) := sum(BO/Oppervlakte,               BO/PlanRegio_rel);
		
		container Verbruik
		{
			attribute<Units/GJ_yr> deelnemers_RV  (PR) := sum(BeschikbaarheidsFactor * BO/AandeelWarmteVraag * BO/Functioneel/Vj_RV, BO/PlanRegio_rel);
			attribute<Units/GJ_yr> deelnemers_TW  (PR) := sum(BeschikbaarheidsFactor * BO/AandeelWarmteVraag * BO/Functioneel/Vj_TW, BO/PlanRegio_rel);
			attribute<Units/GJ_yr> deelnemers     (PR) := deelnemers_RV + deelnemers_TW;
			attribute<Units/GJ_yr> alle           (PR) := sum(BeschikbaarheidsFactor * (BO/Functioneel/Vj_RV + BO/Functioneel/Vj_TW), BO/PlanRegio_rel);
		}
		container WarmteVraag
		{
			attribute<Units/Eur_yr> deelnemers    (PR) := WarmtePrijs * Verbruik/deelnemers, Source = "FO v7a F 8-10";
			attribute<Units/Eur_yr> alle          (PR) := WarmtePrijs * Verbruik/alle, Source = "FO v7a F 8-10";
		}
	}

	#include <EnergiePrijzen.dms>
	#include <KostenBatenSchema.dms>
	#include <KostenWoningen.dms>
	
	template BuisKosten
	{
		// begin case parameters
		unit<uint32>  PlanRegio;
		attribute<MW> Capaciteit (PlanRegio);
		// begin case parameters

		parameter<Ratio> a                 := 1.25; // omwegfactor

		attribute<Eur_m> K_min (PlanRegio) := Capaciteit > 0[MW] ? 400[Eur_m] + 210[Eur / m] * (Capaciteit * 1.0[1 / MW])^ 0.5 : 0[Eur_m], Source = "validatiesessies startanalyse 2019"; // TODO: bron = FO 4.0
		attribute<Eur_m> K_max (PlanRegio) := Capaciteit > 0[MW] ? 800[Eur_m] + 200[Eur / m] * (Capaciteit * 1.0[1 / MW])^ 0.6 : 0[Eur_m], Source = "validatiesessies startanalyse 2019"; // TODO: bron = FO 4.0
		attribute<Eur_m> K_m   (PlanRegio) := (K_min * Schuiven/KostenMin + K_max * Schuiven/KostenMax) * Leercurves/MTnet/curve;
		attribute<Eur_m> aK_m  (PlanRegio) := a * K_m; // K_hoofd_m incl omwegfactor
	}
	template BuisKostenBC
	{
		// begin case parameters
		unit<uint32>  BebouwingsComponent;
		attribute<MW> Capaciteit (BebouwingsComponent);
		// begin case parameters

		parameter<Ratio> a                 := 1.25; // omwegfactor

		attribute<Eur_m> K_min (BebouwingsComponent) := Capaciteit > 0[MW] ? 400[Eur_m] + 210[Eur / m] * (Capaciteit * 1.0[1 / MW])^ 0.5 : 0[Eur_m], Source = "validatiesessies startanalyse 2019"; // TODO: bron = FO 4.0
		attribute<Eur_m> K_max (BebouwingsComponent) := Capaciteit > 0[MW] ? 800[Eur_m] + 200[Eur / m] * (Capaciteit * 1.0[1 / MW])^ 0.6 : 0[Eur_m], Source = "validatiesessies startanalyse 2019"; // TODO: bron = FO 4.0
		attribute<Eur_m> K_m   (BebouwingsComponent) := (K_min * Schuiven/KostenMin + K_max * Schuiven/KostenMax) * Leercurves/MTnet/curve;
		attribute<Eur_m> aK_m  (BebouwingsComponent) := a * K_m; // K_hoofd_m incl omwegfactor
	}
	
	Template MaakCurve
	{
		//parameters
		attribute<Percent>	Datamin  (Classifications/ZichtJaar);
		attribute<Percent>	DataMax  (Classifications/ZichtJaar);
		//parameters
		parameter<Ratio>	CurveMin :=	interpolate_linear(RekenStap_jaar, Classifications/ZichtJaar/Jaar, DataMin) / 100[percent];
		parameter<Ratio>	CurveMax :=	interpolate_linear(RekenStap_jaar, Classifications/ZichtJaar/Jaar, DataMax) / 100[percent];
		parameter<Ratio>	Base     :=	CurveMin * Schuiven/CurveMin + CurveMax * Schuiven/CurveMax;
		parameter<Ratio>	Curve    :=	Base * Schuiven/LerenAan + 1[Ratio] * Schuiven/LerenUit;
	}
	#include <NcwSchema.dms>
	#include <AanbodOpties.dms>
	#include <Rapportage.dms>
}