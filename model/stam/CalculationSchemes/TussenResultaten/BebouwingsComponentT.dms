//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template BebouwingsComponentT
{
	// begin case parameters
	unit<uint32>      BebouwingsObjectZonderNieuwbouw;
	parameter<string> BCname;
	parameter<bool>   IsNieuwbouw;
	parameter<bool>   HasResterendFactors;

	container ResterendFactorMaps;
	unit<uint32>  ModelObject;
	attribute<bool> SchilSprong_sel(Classifications/SchilSprong);
	container LocatieSpecifiekeOpties;
	container VraagKentallen;
	unit<uint32>  PrevObject;

	unit<uint8> PrijzenAardgas;

	parameter<string> NcwRefBase;
	parameter<Ratio>  BTW_Factor;
	parameter<Ratio>  BTW_Factor_gv;
	// end of case parameters
	
	container NcwRefs 
	{
		container _15 := ='NCW/'+NcwRefBase+'15';
		container _30 := ='NCW/'+NcwRefBase+'30';
		container _50 := ='NCW/'+NcwRefBase+'50';
		container _28 := ='NCW/'+NcwRefBase+'28';
		container _20 := ='NCW/'+NcwRefBase+'20';
	}

	unit<uint8> PrijzenElektriciteit := Prijzen/Elektriciteit/Staffel;

	unit<uint8>   BebouwingsTypeDomein := BebouwingsObject/BebouwingsTypeDomein;
	
	container union := =IsNieuwbouw ? 'CalculationSchemes/BebouwingsOperaties/union(PrevObject, BebouwingsObjectZonderNieuwbouw)' : '..';
	
	unit<uint32>  BebouwingsObject := =IsNieuwbouw ? 'union/result' : 'BebouwingsObjectZonderNieuwbouw'
	{
		attribute<Invoer/SpecifiekeInstellingen/PlanRegio> PlanRegio_rel (BebouwingsObject) := BebouwingsObject/buurt_rel;
		attribute<ModelObject> Model_rel     (BebouwingsObject) := rlookup(BebouwingsObject/ModelObjectKey, ModelObject/ModelObjectKey), KeepData = "True";
		attribute<PrevObject>  PrevObject_rel(BebouwingsObject) := rlookup(BebouwingsObject/code, PrevObject/code);
	
		unit<uint32>  AfnameGebied         := PrevState/AfnameGebied;
		attribute<Classifications/SchilLabel>  SchilLabel_rel  (BebouwingsObject) := PrevObject/SchilLabel_rel [PrevObject_rel];
		attribute<Classifications/WarmteOptie> WarmteOptie_rel (BebouwingsObject) := PrevObject/WarmteOptie_rel[PrevObject_rel];
				
		container InstallatiePerProduct := for_each_nedv(Classifications/Product/Name
		,	'PrevObject/InstallatiePerProduct/'+Classifications/Product/Name+'[PrevObject_rel]'
		,	BebouwingsObject, Classifications/Installatie
		)
		{
			attribute<Classifications/Installatie> Dak (BebouwingsObject) := const(Classifications/Installatie/V/geen, BebouwingsObject); //TODO Maarten
		}
		
		attribute<Classifications/AfgifteSysteem> AfgifteSysteem_rel(BebouwingsObject) := PrevObject/AfgifteSysteem_rel[PrevObject_rel];	
		
		attribute<AfnameGebied>  AfnameGebied_rel (BebouwingsObject):= PrevObject/AfnameGebied_rel[PrevObject_rel];	
		
		attribute<Classifications/GebouwOptie> GebouwOptie_rel (BebouwingsObject) := PrevObject/GebouwOptie_rel[PrevObject_rel]; // REMOVE, OBSOLETE, vervangen door Schillabel_rel, InstallatiePerProduct en GebiedsOptie

		attribute<Geography/rdc_grids/m100> gridm100_rel (BebouwingsObject) := point[Geography/rdc_grids/m100];		
		attribute<bool>   IsMeergezins (.) := BebouwingsTypeDomein/IsMeergezins[BebouwingsType];
		attribute<bool>   IsHoogbouw   (.) := BebouwingsTypeDomein/IsHoogbouw  [BebouwingsType];
		
		attribute<Ratio> ResterendFactorBase := = HasResterendFactors
			? 'MakeDefined(merge(BebouwingsType, Ratio, '+AsItemList('ResterendFactorMaps/'+BebouwingsTypeDomein/ResterendFactorName+'[gridm100_rel]')+'), 1.0)'
			: 'const(1.0, BebouwingsObject)';

		attribute<Ratio>      ResterendFactor := ResterendFactorBase * float64(IsDefined(PlanRegio_rel));
		attribute<nrAansl>    nrAansluitingen := ResterendFactor * nrAansluitingen_i;
		attribute<m2>         Oppervlakte     := ResterendFactor * Oppervlakte_i;
		
		// TODO: Optimaliseer domein voor Niet woningen tbv specifiek BCcDomein
		attribute<string>    BCc (.) :=
			(BCname == 'BestaandeUtil' || BCname == 'NieuwBouwUtil'  ) ? 'u' :
			(BCname == 'BestaandeGLTB' || BCname == 'NieuwBouwGLTB'  ) ? 't' :
			IsMeergezins ? 'wh' : 'wl';
		
		container AansluitCapaciteit
		{
			attribute<kW> RV    (..) := ASW_RVmt;
			attribute<kW> TW    (..) := ASW_TWmt;
			attribute<kW> Warmte(..) := RV + TW;
			attribute<kW> K     (..) := ASW_K;
			attribute<kW> eWP   (..) := max_elem(RV, TW);
			attribute<kW> eZ    (..) := ASW_Eapp;
			attribute<kW> eM    (..) := ASW_Eewp;

			attribute<ratio> GTF_RVmt (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_RVmt) , case(BCc=='u', Vermogens/GTF_u_RVmt), Vermogens/GTF_w_RVmt) ;
			attribute<ratio> GTF_RVlt (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_RVlt) , case(BCc=='u', Vermogens/GTF_u_RVlt), Vermogens/GTF_w_RVlt) ;
			attribute<ratio> GTF_TW   (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_TW  ) , case(BCc=='u', Vermogens/GTF_u_TW  ), Vermogens/GTF_w_TW  ) ;
			attribute<ratio> GTF_K    (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_K   ) , case(BCc=='u', Vermogens/GTF_u_K   ), Vermogens/GTF_w_K   ) ;
			attribute<ratio> GTF_Enet (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_Enet) , case(BCc=='u', Vermogens/GTF_u_Enet), Vermogens/GTF_w_Enet) ;
			attribute<kW>    ASW_RVmt (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_RVmt_t_opp) , case(BCc=='u', Vermogens/ASW_RVmt_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_RVmt_wl_opp),                Vermogens/ASW_RVmt_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_RVmt_t_asl) , case(BCc=='u', Vermogens/ASW_RVmt_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_RVmt_wl_asl),                Vermogens/ASW_RVmt_wh_asl) ;
			attribute<kW>    ASW_TWmt (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_TWmt_t_opp) , case(BCc=='u', Vermogens/ASW_TWmt_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_TWmt_wl_opp),                Vermogens/ASW_TWmt_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_TWmt_t_asl) , case(BCc=='u', Vermogens/ASW_TWmt_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_TWmt_wl_asl),                Vermogens/ASW_TWmt_wh_asl) ;
			attribute<kW>    ASW_RVlt (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_RVlt_t_opp) , case(BCc=='u', Vermogens/ASW_RVlt_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_RVlt_wl_opp),                Vermogens/ASW_RVlt_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_RVlt_t_asl) , case(BCc=='u', Vermogens/ASW_RVlt_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_RVlt_wl_asl),                Vermogens/ASW_RVlt_wh_asl) ;
			attribute<kW>    ASW_TWlt (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_TWlt_t_opp) , case(BCc=='u', Vermogens/ASW_TWlt_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_TWlt_wl_opp),                Vermogens/ASW_TWlt_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_TWlt_t_asl) , case(BCc=='u', Vermogens/ASW_TWlt_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_TWlt_wl_asl),                Vermogens/ASW_TWlt_wh_asl) ;
			attribute<kW>    ASW_K    (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_K_t_opp)    , case(BCc=='u', Vermogens/ASW_K_u_opp)     ,
										   case(BCc=='wl',Vermogens/ASW_K_wl_opp)   ,                Vermogens/ASW_K_wh_opp)    
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_K_t_asl)    , case(BCc=='u', Vermogens/ASW_K_u_asl)     ,
										   case(BCc=='wl',Vermogens/ASW_K_wl_asl   ),                Vermogens/ASW_K_wh_asl)    ;
			attribute<kW>    ASW_Eapp (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_Eapp_t_opp) , case(BCc=='u', Vermogens/ASW_Eapp_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_Eapp_wl_opp),                Vermogens/ASW_Eapp_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_Eapp_t_asl) , case(BCc=='u', Vermogens/ASW_Eapp_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_Eapp_wl_asl),                Vermogens/ASW_Eapp_wh_asl) ;
			attribute<kW>    ASW_Ehwp (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_Ehwp_t_opp) , case(BCc=='u', Vermogens/ASW_Ehwp_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_Ehwp_wl_opp),                Vermogens/ASW_Ehwp_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_Ehwp_t_asl) , case(BCc=='u', Vermogens/ASW_Ehwp_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_Ehwp_wl_asl),                Vermogens/ASW_Ehwp_wh_asl) ;
			attribute<kW>    ASW_Eewp (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_Eewp_t_opp) , case(BCc=='u', Vermogens/ASW_Eewp_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_Eewp_wl_opp),                Vermogens/ASW_Eewp_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_Eewp_t_asl) , case(BCc=='u', Vermogens/ASW_Eewp_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_Eewp_wl_asl),                Vermogens/ASW_Eewp_wh_asl) ;
		}
		container Functioneel
		{
			container DragerSpecifiekeOpties := SpecifiekeInstellingen/RuimtelijkeVraag/Drager;
			
			attribute<Ratio>	Klimaateffect (..)	:=	KlimaatFactorMap[gridm100_rel];
			
			attribute<GJ_yr>	TW(..) := (nrAansluitingen * ModelObject/V_TW_asl [Model_rel] + Oppervlakte * ModelObject/V_TW_opp [Model_rel])
						* DragerSpecifiekeOpties/TapWater;
						
			attribute<GJ_yr>	K (..) := =
			'('
				+	(all(ModelObject/V_K_asl == 0[GJ_Yr_asl]) ?'':'NrAansluitingen * ModelObject/V_K_asl[Model_rel] +')
				+	'Oppervlakte * ModelObject/V_K_opp[Model_rel] '
				+	') * DragerSpecifiekeOpties/Koude * ( 1.0 + 3.66*(1.0 - Klimaateffect))';
			
			attribute<GJ_yr>	EA(..) := (nrAansluitingen * ModelObject/V_EA_asl [Model_rel] + Oppervlakte * ModelObject/V_EA_opp [Model_rel])
						* DragerSpecifiekeOpties/ElektrischeApparatuur;
			
			// TODO, OPTIMIZE, V_RV_asl/@SL@ alleen meenemen indien niet allemaal 0, zoals bij utiliteiten wel het geval is
			container RV := for_each_nedv(Classifications/SchilLabel/Name
			,	replace(
					'(nrAansluitingen * ModelObject/V_RV_asl/@SL@[Model_rel] + Oppervlakte * ModelObject/V_RV_opp/@SL@[Model_rel])'
						'* DragerSpecifiekeOpties/RuimteVerwarming'
						'* Klimaateffect'
				,'@SL@', Classifications/SchilLabel/Name)
			,	.., GJ_Yr);
			
			attribute<GJ_Yr> CurrRV(..) := ='merge(SchilLabel_rel, GJ_Yr, '+AsItemList('RV/'+Classifications/SchilLabel/Name)+')';	
			
			attribute<GJ_yr> Ventilatie(..)	:=	=				
				'('
				+	(all(ModelObject/V_Vent_asl == 0[GJ_yr_asl]) ? '' : 'NrAansluitingen * ModelObject/V_Vent_asl + ')
				+ 'Oppervlakte * ModelObject/V_Vent_opp[Model_rel]'
				+ ') * DragerSpecifiekeOpties/ElektrischeApparatuur'
				;
		}
	}

	container Criteria := BebouwingsObject/Criteria // inherit, TODO: opruimen na aanpassing runs
	{
		attribute<bool> always (BebouwingsObject) := const(true,  BebouwingsObject);
		attribute<bool> never  (BebouwingsObject) := const(false, BebouwingsObject);
	}

	container EIA_Opties := ='SpecifiekeInstellingen/Beleid/EIA/E_'+NcwRefBase;
	container EEA_Opties := SpecifiekeInstellingen/Beleid/EEA/Kosten/Basis;

	container VerbruiksOpties {
	
		unit<uint8> SchilSprong_set := subset(SchilSprong_sel) {
			attribute<Classifications/SchilSprong> SchilSprong_rel := nr_OrgEntity;
			attribute<string> Name := Classifications/SchilSprong/name[SchilSprong_rel];
			attribute<Classifications/SchilLabel> Naar_rel := Classifications/SchilSprong/Naar_rel[SchilSprong_rel];
			attribute<Classifications/SchilSprongCode> SchilSprongCode_rel := Classifications/SchilSprong/SchilSprongCode_rel[SchilSprong_rel];
			
			attribute<string> LeerCurveName := Classifications/SchilLabel/LeerCurveName[Naar_rel];
			
			unit<uint32> xMO := combine(., ModelObject) {
				attribute<EUR_asl> Ki_asl := =#.=0?'const(0[EUR_asl],.)':'union_data(.,'+AsItemList(replace('(ModelObject/Ki_min_asl/@SS@ * Schuiven/KostenMin + ModelObject/Ki_max_asl/@SS@ * Schuiven/KostenMax) * Leercurves/'+LeerCurveName+'/Curve', '@SS@', Name))+')';
				attribute<EUR_m2 > Ki_opp := =#.=0?'const(0[EUR_m2 ],.)':'union_data(.,'+AsItemList(replace('(ModelObject/Ki_min_opp/@SS@ * Schuiven/KostenMin + ModelObject/Ki_max_opp/@SS@ * Schuiven/KostenMax) * Leercurves/'+LeerCurveName+'/Curve', '@SS@', Name))+')';
			}
		}
		unit<uint8> SchilSprongOrIdle_set := union_unit_uint8(Classifications/SchilLabel, SchilSprong_set) {
			attribute<Classifications/SchilLabel> Van_rel  := union_data(., ID(Classifications/SchilLabel), Classifications/SchilSprong/Van_rel [SchilSprong_set/nr_OrgEntity]);
			attribute<Classifications/SchilLabel> Naar_rel := union_data(., ID(Classifications/SchilLabel), Classifications/SchilSprong/Naar_rel[SchilSprong_set/nr_OrgEntity]);
			
			attribute<string> Name := union_data(., 'S'+repeat(Classifications/SchilLabel/name,2), SchilSprong_set/name);
			
			unit<uint32> xMO := combine(., ModelObject) {
				attribute<EUR_asl> Ki_asl := ='union_data(., ' + AsItemList(const('const(0[EUR_asl], ModelObject)', Classifications/SchilLabel))+', SchilSprong_set/xMO/Ki_asl)';
				attribute<EUR_m2 > Ki_opp := ='union_data(., ' + AsItemList(const('const(0[EUR_m2 ], ModelObject)', Classifications/SchilLabel))+', SchilSprong_set/xMO/Ki_opp)';
			}
		}
		
		parameter<string> BcCode := rjoin(BcName, Classifications/BebouwingsComponent/Name, Classifications/BebouwingsComponent/BcCode);
		unit<uint32> Installatie := Classifications/Installatie {
			// TODO, MTA: remove const in merge wanneer void domain hier zal worden toegestaan, issue XXX.
			attribute<EUR_asl> Ki_asl := =replace('(Ki_asl_min_@BC * Schuiven/KostenMin + Ki_asl_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, Float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/Name+'/Curve, .)')+')', '@BC', BcCode);
			attribute<EUR_kW>  Ki_cap := =replace('(Ki_cap_min_@BC * Schuiven/KostenMin + Ki_cap_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, Float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/Name+'/Curve, .)')+')', '@BC', BcCode);
			attribute<EUR_m2>  Ki_opp := =replace('(Ki_opp_min_@BC * Schuiven/KostenMin + Ki_opp_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, Float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/Name+'/Curve, .)')+')', '@BC', BcCode);

			attribute<EUR_kW>  Ki30_cap := Ki_cap * AT30;
			attribute<EUR_kW>  Ki20_cap := Ki_cap * AT20;
			attribute<EUR_kW>  Ki15_cap := Ki_cap * AT15;
			attribute<EUR_Yr_kW>  Kj_OH_cap  := Ki_cap * R_OH;
			attribute<EUR_Yr_kW>  Kj_Adm_cap := Ki_cap * R_Adm;
		}
		
		unit<uint8> GebouwOptie := Classifications/GebouwOptie {
			attribute<EUR_asl> Ki_asl := sum(Installatie/Ki_asl[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_m2 > Ki_opp := sum(Installatie/Ki_opp[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			
			attribute<EUR_Yr_asl> Kj_Adm_asl := sum((Installatie/Ki_asl * Installatie/R_Adm)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_Yr_asl> Kj_OH_asl  := sum((Installatie/Ki_asl * Installatie/R_OH )[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_Yr_m2 > Kj_Adm_opp := sum((Installatie/Ki_opp * Installatie/R_Adm)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_Yr_m2 > Kj_OH_opp  := sum((Installatie/Ki_opp * Installatie/R_OH )[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			
			attribute<EUR_asl> Ki30_asl := sum((Installatie/Ki_asl * Installatie/AT30)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_asl> Ki20_asl := sum((Installatie/Ki_asl * Installatie/AT20)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_asl> Ki15_asl := sum((Installatie/Ki_asl * Installatie/AT15)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			
			attribute<EUR_m2 > Ki30_opp := sum((Installatie/Ki_opp * Installatie/AT30)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_m2 > Ki20_opp := sum((Installatie/Ki_opp * Installatie/AT20)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_m2 > Ki15_opp := sum((Installatie/Ki_opp * Installatie/AT15)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
		}
	}
	
	container DoelLabels := for_each_ne(Classifications/DoelLabel_NaSprong/Name, 'DoelLabelT(BebouwingsObject, Classifications/DoelLabel_NaSprong/V/'+Classifications/DoelLabel_NaSprong/Name+')') {
		container geen  // handle as special case
		{
			attribute<EUR> Ki_GV (BebouwingsObject) := const(0[EUR], BebouwingsObject);
		}
	}
		
	attribute<string> GebouwOptie_sel_Expr(Classifications/GebouwOptie) := 'LowerCase(LocatieSpecifiekeOpties/GebouwOpties/'+Classifications/GebouwOptie/Name+') != ' + Quote('criteria/never');
	
	attribute<bool> GebouwOptie_sel(Classifications/GebouwOptie) := ='union_data(Classifications/GebouwOptie, '+AsItemList(GebouwOptie_sel_Expr)+')';
	
	unit<uint8> GebouwOptie := subset(GebouwOptie_sel) {
		attribute<string> Name := Classifications/GebouwOptie/Name[nr_OrgEntity];
		attribute<string> Label := Name, DialogType = "LabelText";
		attribute<string> Criterium_expr := ='replace_value(LowerCase(union_data(., '+AsItemList('LocatieSpecifiekeOpties/GebouwOpties/'+Name)+')), ''criteria/always'', '''')';
	}
	container GebouwOpties := for_each_ne(GebouwOptie/Name, 'GebouwOptieT(BebouwingsObject, Classifications/GebouwOptie/V/'+GebouwOptie/Name+', '+Quote(GebouwOptie/Criterium_expr)+')');
	
 	attribute<GebouwOptie> BesteGebouwOptie(BebouwingsObject):= =(#GebouwOptie == 1)? 'const(0[GebouwOptie],BebouwingsObject)' : 'argmin('+AsItemList('GebouwOpties/'+GebouwOptie/Name+'/kosten_or_undefined')+')[GebouwOptie]';
 	attribute<Classifications/WarmteOptie> WarmteOptie_res_rel(BebouwingsObject) := Classifications/GebouwOptie/WarmteOptie_rel[GebouwOptie/nr_OrgEntity[BesteGebouwOptie]];
	attribute<bool> LTAS_vereist (BebouwingsObject) := ='merge(BesteGebouwOptie, bool, '+AsItemList('GebouwOpties/'+GebouwOptie/Name+'/LTAS_vereist')+')';		
	
	unit<uint32> BebouwingsObjectMetGebouwOptie := BebouwingsObject
	{
		attribute<Classifications/GebouwOptie> GebouwOptie_rel := replace_value(BesteGebouwOptie, Classifications/GebouwOptie/V/geen, BebouwingsObject/GebouwOptie_rel);
		attribute<Classifications/WarmteOptie> WarmteOptie_rel := 
			Classifications/WarmteOptie/IsGebiedsOptie[BebouwingsObject/WarmteOptie_rel] || (WarmteOptie_res_rel == Classifications/WarmteOptie/V/geen)
			?	BebouwingsObject/WarmteOptie_rel
			:	WarmteOptie_res_rel;
		
		attribute<Classifications/SchilLabel> SchilLabel_rel := ='merge(BesteGebouwOptie, Classifications/SchilLabel, '+AsItemList('GebouwOpties/'+GebouwOptie/Name+'/SchilLabel_rel')+')';
		container InstallatiePerProduct := for_each_nedv(Classifications/Product/Name
			,	replace('merge(BesteGebouwOptie, Classifications/Installatie, '+AsItemList('GebouwOpties/'+GebouwOptie/Name+'/InstallatiePerProduct/@P')+')', '@P', Classifications/Product/Name)
			,	., Classifications/Installatie
			);
			
		attribute<Classifications/AfgifteSysteem> AfgifteSysteem_rel (BebouwingsObject) := LTAS_vereist ? Classifications/AfgifteSysteem/V/LTAS : BebouwingsObject/AfgifteSysteem_rel;
			
		// Extra info
		attribute<string>	WarmteOptie		(BebouwingsObject)	:=	Classifications/WarmteOptie/name[WarmteOptie_rel];
	}
	
	container statistics {
		attribute<EUR> Ki_lowest_value  (BebouwingsObject) := ='min_elem('+AsItemList('GebouwOpties/'+GebouwOptie/Name+'kosten_j')+')';
		attribute<EUR> Ki_lowest_index  (BebouwingsObject) := ='argmin  ('+AsItemList('GebouwOpties/'+GebouwOptie/Name+'kosten_j')+')';
		attribute<EUR> Ki_highest_value (BebouwingsObject) := ='max_elem('+AsItemList('GebouwOpties/'+GebouwOptie/Name+'kosten_j')+')';
		attribute<EUR> Ki_highest_index (BebouwingsObject) := ='argmax  ('+AsItemList('GebouwOpties/'+GebouwOptie/Name+'kosten_j')+')';
	}
		
	container OpwekkingsOpties
	{
		container bereidheid
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject) := const(LocatieSpecifiekeOpties/OpwekkingF/Zon_PV,      BebouwingsObject);
			attribute<Ratio> ZonneBoiler(BebouwingsObject) := const(LocatieSpecifiekeOpties/OpwekkingF/ZonneBoiler, BebouwingsObject);
		}
		container org_capaciteit
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject) := MakeDefined(PrevObject/OpwekkingsOpties/capaciteit/Zon_PV     [PrevObject_rel], 0[Ratio]);
			attribute<Ratio> ZonneBoiler(BebouwingsObject) := MakeDefined(PrevObject/OpwekkingsOpties/capaciteit/ZonneBoiler[PrevObject_rel], 0[Ratio]);
		}
		container investering
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject) := median(0.0, bereidheid/Zon_PV      - org_capaciteit/Zon_PV,      1.0[Ratio] - org_capaciteit/Zon_PV);
			attribute<Ratio> ZonneBoiler(BebouwingsObject) := median(0.0, bereidheid/ZonneBoiler - org_capaciteit/ZonneBoiler, 1.0[Ratio] - org_capaciteit/ZonneBoiler);
		}
		container capaciteit
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject) := org_capaciteit/Zon_PV      + investering/Zon_PV;
			attribute<Ratio> ZonneBoiler(BebouwingsObject) := org_capaciteit/ZonneBoiler + investering/ZonneBoiler;
		}
	}

	container Hoeveelheden
	{
		attribute<m2>      ZonneBoiler (BebouwingsObject) := RuimtelijkeVraagObject/oppervlakte * OpwekkingsOpties/capaciteit/ZonneBoiler * BC_kentallen/R_ZonB_opp  [BebouwingsType];
		attribute<m2>      Zon_PV      (BebouwingsObject) := BebouwingsObject/oppervlakte * OpwekkingsOpties/capaciteit/Zon_PV      * BC_kentallen/m2dak_m2bvo [BebouwingsType];
	
		attribute<nrAansl> mWKK        (BebouwingsObject) := BebouwingsObject/nrAansluitingen * Opwekking/mWKK;
		attribute<nrAansl> hWP         (BebouwingsObject) := BebouwingsObject/nrAansluitingen * Opwekking/hWP;
	}

	container BC_kentallen :=	kengetallen/BCkentallen/BC_kentallen(
									Schuiven/LuchtBodemSchuif,
									Schuiven/EfficiencySchuif,
									LeerCurves/eWPlw/Curve,
									LeerCurves/eWPww/Curve,
									LeerCurves/hWP/Curve,
									LeerCurves/ZonPV/Curve,
									LeerCurves/ZonB/Curve,
									LeerCurves/mWKK/Curve,
									LeerCurves/LTAS/Curve,
									Schuiven/KostenMin,
									Schuiven/KostenMax,
									BCname,
									BebouwingsTypeDomein);
	container SchilLabel
	{
		attribute<Classifications/SchilLabel> LastValue    (BebouwingsObject) := PrevObject/SchilLabel_rel[PrevObject_rel];
		attribute<Classifications/SchilLabel> CurrValue    (BebouwingsObject) := Sprongen/NaarEnergieLabel;
		attribute<bool>                       WasChanged   (BebouwingsObject) := PrevObject/EnergieLabel/IsChanged[PrevObject_rel];
		attribute<bool>                       IsChangedNow (BebouwingsObject) := LastValue != CurrValue;
		attribute<bool>                       IsChanged    (BebouwingsObject) := WasChanged || IsChangedNow;
	}
		
	container Opwekking
	{
		attribute<GJ_yr> ZonneBoiler (BebouwingsObject) := Hoeveelheden/ZonneBoiler * kengetallen/Constanten/Opbr_zonB_GJ;
		attribute<GJ_yr> Zon_PV      (BebouwingsObject) := Hoeveelheden/Zon_PV      * kengetallen/Constanten/Opbr_zonPV_GJ;

		attribute<Ratio> BeWP (BebouwingsObject) := value(Sprongen/BeWP, Ratio);
		attribute<Ratio> AeWP (BebouwingsObject) := value(Sprongen/AeWP, Ratio);
		attribute<Ratio> eWP  (BebouwingsObject) := BeWP + AeWP;
		attribute<Ratio> EWV  (BebouwingsObject) := value(Sprongen/EWV, Ratio);
		attribute<Ratio> mWKK (BebouwingsObject) := min_elem(OpwekkingsOpties/Capaciteit/mWKK, 1.0 - EWV - eWP);
		attribute<Ratio> hWP  (BebouwingsObject) := min_elem(OpwekkingsOpties/Capaciteit/hWP,  1.0 - EWV - eWP -mWKK);
	}
	
	// voor info over gebruik hWP etc voor RW gelieve de resulterende InstallatiePerProduct te raadplegen
	
	attribute<Eur_yr> KoudeAllocatie(BebouwingsObject) := const( 0[Eur_yr], BebouwingsObject);
	attribute<Eur_yr> Om_Comfort    (BebouwingsObject) := const( 0[Eur_yr], BebouwingsObject); //placeholders om statenaallocatie te kunnen initialiseren, todo: remove
	
	
	container Kosten
	{
		attribute<Eur>	Ki_ZonneBoiler  (BebouwingsObject) :=	Hoeveelheden/ZonneBoiler  * BC_kentallen/Ki_ZonB;
		attribute<Eur>	Ki_Zon_PV       (BebouwingsObject) :=	Hoeveelheden/Zon_PV       * BC_kentallen/Ki_ZonPV;
		attribute<Eur>	Ki_mWKK         (BebouwingsObject) :=	Hoeveelheden/mWKK         * BC_kentallen/Ki_mWKK;
		attribute<Eur>	Ki_hWP_var      (BebouwingsObject) :=	Hoeveelheden/hWP > 0d ? RuimtelijkeVraagComponent/Aansluitcapaciteit/RV * BC_kentallen/Ki_hWP_var : 0[eur];
		attribute<Eur>	Ki_hWP_vast     (BebouwingsObject) :=	Hoeveelheden/hWP          * BC_kentallen/Ki_hWP_vast;
		attribute<Eur>	Ki_hWP          (BebouwingsObject) :=	Ki_hWP_var + Ki_hWP_vast;
		attribute<Eur>	Ki_eWP          (BebouwingsObject) :=	RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_eWP;
		attribute<Eur>	Ki_EWV          (BebouwingsObject) :=	RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_EWV;
		attribute<Eur>	Oi_HR           (BebouwingsObject) :=	WarmteAllocatie != 0[Classifications/WarmteOptie] ? 
																(1[Ratio] - Kengetallen/constanten/afschrijving_resterend) * Sprongen/Ki_HR : 0[eur];

		attribute<Ratio> fractie_afschrijftermijn_15jaar (BebouwingsObject) :=	= Schuiven/LuchtBodemAlsS1 ? 'Sprongen/AnnualisationFactor_S1/fractie_afschrijftermijn_15jaar' : 'const(BC_kentallen/fractie_afschrijftermijn_15jaar, BebouwingsObject)';														
		attribute<Ratio> fractie_afschrijftermijn_30jaar (BebouwingsObject) :=	= Schuiven/LuchtBodemAlsS1 ? 'Sprongen/AnnualisationFactor_S1/fractie_afschrijftermijn_30jaar' : 'const(BC_kentallen/fractie_afschrijftermijn_30jaar, BebouwingsObject)';
		
		attribute<Eur> Ki_LokaleOpwekking30 (BebouwingsObject) := Ki_ZonneBoiler + Ki_Zon_PV + Ki_EWV + fractie_afschrijftermijn_30jaar * Ki_eWP;
		attribute<Eur> Ki_LokaleOpwekking15 (BebouwingsObject) := Ki_mWKK + Ki_hWP + fractie_afschrijftermijn_15jaar * Ki_eWP;
		
		attribute<Eur> Ki_GebouwVerbetering (BebouwingsObject) := RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_gv; // cumulatief
		attribute<Eur_yr> Kj_gv_incentive   (BebouwingsObject) := Sprongen/Incentive_eigenaar_excl + PrevObject/Kosten/Kj_gv_incentive[PrevObject_rel];

		attribute<Eur> Ki_LokaleOpwekking   (BebouwingsObject) := Ki_LokaleOpwekking30 + Ki_LokaleOpwekking15;
		attribute<Eur> Ki_Totaal            (BebouwingsObject) := Ki_LokaleOpwekking + Ki_GebouwVerbetering;
	}
	
	container Warmtewet
	{
		unit<uint32> GasVerbruikers := subset(results/Aansluitingen/Gnet > 0.0)
		{
			attribute<GJ_yr> Vj_gas    := Results/Metervraag/Vj_gas[nr_OrgEntity];
			attribute<GJ_yr> Vj_warmte := Results/Functioneel/Vj_RV[nr_OrgEntity] + Results/Functioneel/Vj_TW[nr_OrgEntity];
			//TODO bij Vj_warmte aftrek eventuele installaties die al een deel van de vraag vullen binnen deze groep (bijv Zonneboilers)
		}
		parameter<float64> PrijsFactor_impl :=  sum(GasVerbruikers/Vj_gas) / sum(GasVerbruikers/Vj_warmte) * Voorkeuren/MinderDanAndersFactor;
		parameter<float64> PrijsFactor_corr :=  MakeDefined(PrijsFactor_impl, 1.25);
		parameter<float64> PrijsFactor      :=  = 'BebouwingsComponenten/'+rjoin(BCname, Classifications/BebouwingsComponent/name, Classifications/BebouwingsComponent/name[Classifications/BebouwingsComponent/Warmtewet_BC_rel])+'/Warmtewet/PrijsFactor_corr';

		parameter<Eur_GJ> WarmtePrijs := = Voorkeuren/IsVasteWarmtePrijs 
			? 'Voorkeuren/VasteWarmtePrijs'
			: 'PrijsFactor * PrijzenAardgas/KGJ_eindgebruik_excl[classify(0[GJ_yr], PrijzenAardgas/ClassBreak)]';
	}
		
	unit<uint32> Results := BebouwingsObjectMetGebouwOptie
	{
		container BemeterdeGebouwInput_rel :=  for_each_nedv(Classifications/Product/Name
			,	replace('merge(BesteGebouwOptie, Classifications/BemeterdeGebouwInput, '+AsItemList('GebouwOpties/'+GebouwOptie/Name+'/BemeterdeGebouwInput_rel/@P')+')', '@P', Classifications/Product/Name)
			,	BebouwingsObject, Classifications/BemeterdeGebouwInput
			);
			
		container SPF := for_each_nedv(Classifications/Product/Name
			,	replace('merge(BesteGebouwOptie, Float64, '+AsItemList('GebouwOpties/'+GebouwOptie/Name+'/SPF/@P')+')', '@P', Classifications/Product/Name)
			,	BebouwingsObject, Float64
		);
		
		container Aansluitingen
		{
			attribute<bool>    IsHybride     (BebouwingsObject) :=
				BemeterdeGebouwInput_rel/RVb == Classifications/BemeterdeGebouwInput/V/e
			&&	BemeterdeGebouwInput_rel/RVp != Classifications/BemeterdeGebouwInput/V/e;
			
			attribute<bool>    IsAllElectric (BebouwingsObject) := 
				BemeterdeGebouwInput_rel/RVb == Classifications/BemeterdeGebouwInput/V/e
			&&	BemeterdeGebouwInput_rel/RVp == Classifications/BemeterdeGebouwInput/V/e
			&&	BemeterdeGebouwInput_rel/TWb == Classifications/BemeterdeGebouwInput/V/e
			&&	BemeterdeGebouwInput_rel/TWp == Classifications/BemeterdeGebouwInput/V/e;
			
			attribute<nrAansl> Gnet          (BebouwingsObject) := float64(Metervraag/Vj_gas > 0.0[GJ_yr]) * RuimtelijkeVraagComponent/nraansluitingen;
			attribute<nrAansl> H2net         (BebouwingsObject) := float64(Metervraag/Vj_H2  > 0.0[GJ_yr]) * RuimtelijkeVraagComponent/nraansluitingen;
			attribute<nrAansl> Enet_app      (BebouwingsObject) := float64(!IsHybride && !IsAllElectric)   * RuimtelijkeVraagComponent/nraansluitingen;  // alleen apparatuur
			attribute<nrAansl> Enet_hwp      (BebouwingsObject) := float64(IsHybride)                      * RuimtelijkeVraagComponent/nraansluitingen;  // apparatuur en hybride systeem
			attribute<nrAansl> Enet_ewp      (BebouwingsObject) := float64(IsAllElectric)                  * RuimtelijkeVraagComponent/nraansluitingen;  // apparatuur en volledig elektrisch verwarmd
		}

		container Functioneel := BebouwingsObject/Functioneel
		{
			attribute<GJ_yr> Vj_RV   (BebouwingsObject) := ='merge(BesteGebouwOptie, GJ_Yr, '+AsItemList('GebouwOpties/'+GebouwOptie/Name+'/Functioneel/RV')+')';
			attribute<GJ_yr> Vj_TW   (BebouwingsObject) := ='merge(BesteGebouwOptie, GJ_Yr, '+AsItemList('GebouwOpties/'+GebouwOptie/Name+'/Functioneel/TW')+')';
			attribute<GJ_yr> Vj_K    (BebouwingsObject) := ='merge(BesteGebouwOptie, GJ_Yr, '+AsItemList('GebouwOpties/'+GebouwOptie/Name+'/Functioneel/K')+')';
			attribute<GJ_yr> Vj_Vent (BebouwingsObject) := Float64(SchilLabel_rel <= Classifications/SchilLabel/V/B) * Ventilatie;
			attribute<GJ_yr> Vj_App  (BebouwingsObject) := Functioneel/EA;
		}
		container Metervraag := for_each_nedv('Vj_'+Classifications/BemeterdeGebouwInput/Name
			,	replace('merge(BesteGebouwOptie, GJ_Yr, '+AsItemList('GebouwOpties/'+GebouwOptie/Name+'/metervraag/@I')+')', '@I', Classifications/BemeterdeGebouwInput/Name)
			,	BebouwingsObject, GJ_yr
			);
			
		container Eenmalig
		{
			//Aansluitbijdrages
			attribute<Eur>   Ki_Asl_Enet (BebouwingsObject) :=  BC_kentallen/Ki_Aansl_e_asl * RuimtelijkeVraagComponent/nraansluitingen
															+   BC_kentallen/Ki_Aansl_e_opp * RuimtelijkeVraagComponent/oppervlakte;
			attribute<Eur>   Ki_Asl_Gnet (BebouwingsObject) :=  Metervraag/Vj_gas <= 0.0[GJ_yr] ? 0.0[Eur] :
																BC_kentallen/Ki_Aansl_g_asl * RuimtelijkeVraagComponent/nraansluitingen
															+   BC_kentallen/Ki_Aansl_g_opp * RuimtelijkeVraagComponent/oppervlakte;
		
			//Investeringen
			attribute<Eur>   Ki30_LO (BebouwingsObject) := ='merge(BesteGebouwOptie, Eur, '+AsItemList('GebouwOpties/'+GebouwOptie/Name+'/Ki30_LO')+')';
			attribute<Eur>   Ki20_LO (BebouwingsObject) := ='merge(BesteGebouwOptie, Eur, '+AsItemList('GebouwOpties/'+GebouwOptie/Name+'/Ki20_LO')+')';
			attribute<Eur>   Ki15_LO (BebouwingsObject) := ='merge(BesteGebouwOptie, Eur, '+AsItemList('GebouwOpties/'+GebouwOptie/Name+'/Ki15_LO')+')';
			attribute<Eur>   Ki_GV   (BebouwingsObject) := ='merge(BesteGebouwOptie, Eur, '+AsItemList('GebouwOpties/'+GebouwOptie/Name+'/Ki_GV')+')';
		
			//Subsidies
			attribute<Eur>   Oi_s_LO_30 (BebouwingsObject) := const(0.0 [Eur], BebouwingsObject); //TODO Maarten
			attribute<Eur>   Oi_s_LO_20 (BebouwingsObject) := const(0.0 [Eur], BebouwingsObject); //TODO Maarten
			attribute<Eur>   Oi_s_LO_15 (BebouwingsObject) := const(0.0 [Eur], BebouwingsObject); //TODO Maarten
			attribute<Eur>   Oi_s_GV    (BebouwingsObject) := const(0.0 [Eur], BebouwingsObject); //TODO Maarten
		}
		container Kapitaallasten
		{
			//Aansluitbijdrages
			attribute<Eur_yr> Kji_Asl_Enet (BebouwingsObject) := Eenmalig/Ki_Asl_Enet * NcwRefs/_50/AnnualisationFactor;
			attribute<Eur_yr> Kmi_Asl_Enet (BebouwingsObject) := Eenmalig/Ki_Asl_Enet * NCW/mr50/AnnualisationFactor;
			attribute<Eur_yr> Kji_Asl_Gnet (BebouwingsObject) := Eenmalig/Ki_Asl_Gnet * NcwRefs/_50/AnnualisationFactor;
			attribute<Eur_yr> Kmi_Asl_Gnet (BebouwingsObject) := Eenmalig/Ki_Asl_Gnet * NCW/mr50/AnnualisationFactor;
			
			//Investeringen			
			attribute<Eur_yr> Kji30_LO (BebouwingsObject) := Eenmalig/Ki30_LO * NcwRefs/_30/AnnualisationFactor;
			attribute<Eur_yr> Kmi30_LO (BebouwingsObject) := Eenmalig/Ki30_LO * NCW/mr30/AnnualisationFactor;
			attribute<Eur_yr> Kji20_LO (BebouwingsObject) := Eenmalig/Ki20_LO * NcwRefs/_20/AnnualisationFactor;
			attribute<Eur_yr> Kmi20_LO (BebouwingsObject) := Eenmalig/Ki20_LO * NCW/mr20/AnnualisationFactor;
			attribute<Eur_yr> Kji15_LO (BebouwingsObject) := Eenmalig/Ki15_LO * NcwRefs/_15/AnnualisationFactor;
			attribute<Eur_yr> Kmi15_LO (BebouwingsObject) := Eenmalig/Ki15_LO * NCW/mr15/AnnualisationFactor;
			attribute<Eur_yr> Kji_gv   (BebouwingsObject) := Eenmalig/Ki_gv    * NcwRefs/_30/AnnualisationFactor;
			attribute<Eur_yr> Kmi_gv   (BebouwingsObject) := Eenmalig/Ki_gv    * NCW/mr30/AnnualisationFactor;
			
			//Subsidies
			attribute<Eur_yr> Oji_s_LO_30 (BebouwingsObject) := Eenmalig/Oi_s_LO_30 * NcwRefs/_30/AnnualisationFactor;
			attribute<Eur_yr> Oji_s_LO_20 (BebouwingsObject) := Eenmalig/Oi_s_LO_20 * NcwRefs/_20/AnnualisationFactor;
			attribute<Eur_yr> Oji_s_LO_15 (BebouwingsObject) := Eenmalig/Oi_s_LO_15 * NcwRefs/_15/AnnualisationFactor;
			attribute<Eur_yr> Oji_s_gv    (BebouwingsObject) := Eenmalig/Oi_s_gv    * NcwRefs/_30/AnnualisationFactor;
		}
		container Jaarlijks
		{
			//Vastrecht en korting
			attribute<Eur_yr> Kj_vastrecht_E (BebouwingsObject) := Opbrengsten/VastRechtBijdrageE;
			attribute<Eur_yr> Kj_vastrecht_G (BebouwingsObject) := Metervraag/Vj_gas <= 0.0[GJ_yr] ? 0.0[Eur_yr] : Opbrengsten/VastRechtBijdrageG;
			attribute<Eur_yr> Oj_Hkorting_E  (BebouwingsObject) := Opbrengsten/HeffingskortingE;
			
			//Elektriciteit
			attribute<classifications/gebruiksgrootteklasse> e_gebruiksgrootteklasse_rel (BebouwingsObject) := classify(Metervraag/Vj_e, Prijzen/Elektriciteit/Staffel/ClassBreak);
			attribute<Eur_yr> Kj_e       (BebouwingsObject) := Metervraag/Vj_e * Prijzen/Elektriciteit/Staffel/KGJ_eindgebruik_excl[e_gebruiksgrootteklasse_rel];
			attribute<Eur_yr> Km_e       (BebouwingsObject) := Metervraag/Vj_e * Prijzen/Elektriciteit/Staffel/KGJ_maatschappelijk [e_gebruiksgrootteklasse_rel];
			attribute<Eur_yr> Kj_e_EH    (BebouwingsObject) := Metervraag/Vj_e * Prijzen/Elektriciteit/Staffel/KGJ_EnergieHeffing[e_gebruiksgrootteklasse_rel];
			attribute<Eur_yr> Kj_e_CO2   (BebouwingsObject) := Metervraag/Vj_e * Prijzen/Elektriciteit/Staffel/KGJ_CO2Heffing[e_gebruiksgrootteklasse_rel];

			//Gas
			attribute<classifications/gebruiksgrootteklasse> g_gebruiksgrootteklasse_rel (BebouwingsObject) := classify(Metervraag/Vj_gas, Prijzen/Aardgas/Staffel/ClassBreak);
			attribute<Eur_yr> Kj_gas     (BebouwingsObject) := Metervraag/Vj_gas * Prijzen/Aardgas/Staffel/KGJ_eindgebruik_excl[e_gebruiksgrootteklasse_rel];
			attribute<Eur_yr> Km_gas     (BebouwingsObject) := Metervraag/Vj_gas * Prijzen/Aardgas/Staffel/KGJ_maatschappelijk [e_gebruiksgrootteklasse_rel];
			attribute<Eur_yr> Kj_gas_EH  (BebouwingsObject) := Metervraag/Vj_gas * Prijzen/Aardgas/Staffel/KGJ_EnergieHeffing[e_gebruiksgrootteklasse_rel];
			attribute<Eur_yr> Kj_gas_CO2 (BebouwingsObject) := Metervraag/Vj_gas * Prijzen/Aardgas/Staffel/KGJ_CO2Heffing[e_gebruiksgrootteklasse_rel];
			//Overige dragers TODO: linken aan eventuele verbruiken
			attribute<Eur_yr> Kj_H2        (BebouwingsObject) := Metervraag/Vj_H2       * invoer/energieprijzen/Overig/results/Waterstof [rlookup(RekenJaar_jaar,invoer/energieprijzen/Overig/results/jaar)];
			
			attribute<Eur_yr> Kj_kolen     (BebouwingsObject) := const(0.0 [Eur_yr], BebouwingsObject); //TODO relateren verbruik en : invoer/energieprijzen/Overig/results/Kolen_Excl[rlookup(RekenJaar_jaar,invoer/energieprijzen/Overig/results/jaar)];
			attribute<Eur_yr> Kj_kolen_CO2 (BebouwingsObject) := const(0.0 [Eur_yr], BebouwingsObject); //TODO relateren verbruik en : invoer/energieprijzen/Overig/results/Kolen_CO2 [rlookup(RekenJaar_jaar,invoer/energieprijzen/Overig/results/jaar)];
			attribute<Eur_yr> Kj_pellets   (BebouwingsObject) := metervraag/Vj_pellets  * invoer/energieprijzen/Overig/results/Pellets [rlookup(RekenJaar_jaar,invoer/energieprijzen/Overig/results/jaar)];
			attribute<Eur_yr> Kj_biomassa  (BebouwingsObject) := metervraag/Vj_biomassa * invoer/energieprijzen/Overig/results/Biomassa[rlookup(RekenJaar_jaar,invoer/energieprijzen/Overig/results/jaar)]; 
		
			//Onderhoud installaties
			attribute<Eur_yr> Kj_OH_LO   (BebouwingsObject) := const(0.0 [Eur_yr], BebouwingsObject); //TODO Maarten
			attribute<Eur_yr> Kj_Adm_LO  (BebouwingsObject) := const(0.0 [Eur_yr], BebouwingsObject); //TODO Maarten
		}
	}
}
