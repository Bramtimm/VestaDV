//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container Rapportage
{
	#include <RegionaleRapportageTempl.dms>
	#include <FlowTempl.dms>
	#include <Components.dms>

	template EindgebruikerComponent
	{
		// begin case parameters
		container AllocatieResultatenComponent;
		container NCW15;
		container NCW20;
		container NCW30;
		container NCW50;
		attribute<Eur_yr> Oj_VastRecht_g (Invoer/SpecifiekeInstellingen/PlanRegio);
		attribute<Eur>    Oi_Aansluit_g  (Invoer/SpecifiekeInstellingen/PlanRegio);
		attribute<Eur_yr> Oj_VastRecht_e (Invoer/SpecifiekeInstellingen/PlanRegio);
		attribute<Eur>    Oi_Aansluit_e  (Invoer/SpecifiekeInstellingen/PlanRegio);
		container PlanRegioKaartComponent;
		// end case parameters

		unit<uint32> BO  := AllocatieResultatenComponent/BO;

		parameter<Ratio> BTW_Factor         := BO/BebouwingsComponent_UpRef/BTW_Factor;
		parameter<Ratio> BTW_Factor_gv      := BO/BebouwingsComponent_UpRef/BTW_Factor_gv;

		unit<uint32> PlanRegio              := SpecifiekeInstellingen/PlanRegio;

		container gebouwen := for_each_ne(
				Classifications/GebiedsOptie/name, 'GebiedsOptie(Classifications/GebiedsOptie/V/'+Classifications/GebiedsOptie/name+', BO, PlanRegio, AllocatieResultatenComponent/Aandelen/'+Classifications/GebiedsOptie/name+'[ratio])')
				
		{
			container Elektriciteit
			{
				attribute<Eur_yr> Verbruik       (PlanRegio) := sum(AllocatieResultatenComponent/Elektriciteit/eindgebruik_excl, BO/PlanRegio_rel);
				attribute<Eur_yr> netwerk        (PlanRegio) := sum(AllocatieResultatenComponent/Elektriciteit/netwerk,          BO/Planregio_rel);
				attribute<Eur_yr> EnergieHeffing (PlanRegio) := sum(AllocatieResultatenComponent/Elektriciteit/EnergieHeffing,   BO/Planregio_rel);
				attribute<Eur_yr> CO2Heffing     (PlanRegio) := sum(AllocatieResultatenComponent/Elektriciteit/CO2Heffing,       BO/Planregio_rel);

				attribute<Eur_yr> VastRecht      (PlanRegio) := Oj_VastRecht_e;
				attribute<Eur_yr> Aansl_j        (PlanRegio) := Oi_Aansluit_e * Ncw50/AnnualisationFactor;
				attribute<Eur_yr> Aansl_m        (PlanRegio) := Oi_Aansluit_e * Ncw/mr50/AnnualisationFactor;

				attribute<Eur_yr> Vraag_excl     (PlanRegio) := Verbruik + VastRecht + Aansl_j;
				attribute<Eur_yr> Vraag_m        (PlanRegio) := Verbruik + Vastrecht + Aansl_m - EnergieHeffing;
			}

			container AardGas
			{
				attribute<Eur_yr> Verbruik       (PlanRegio) := sum(AllocatieResultatenComponent/AardGas/eindgebruik_excl, BO/Planregio_rel);
				attribute<Eur_yr> netwerk        (PlanRegio) := sum(AllocatieResultatenComponent/AardGas/netwerk,          BO/Planregio_rel);
				attribute<Eur_yr> EnergieHeffing (PlanRegio) := sum(AllocatieResultatenComponent/AardGas/EnergieHeffing,   BO/Planregio_rel);
				attribute<Eur_yr> CO2Heffing     (PlanRegio) := sum(AllocatieResultatenComponent/AardGas/CO2Heffing,       BO/Planregio_rel);

				attribute<Eur_yr> VastRecht      (PlanRegio) := Oj_VastRecht_g;
				attribute<Eur_yr> Aansl_j        (PlanRegio) := Oi_Aansluit_g  * Ncw50/AnnualisationFactor;
				attribute<Eur_yr> Aansl_m        (PlanRegio) := Oi_Aansluit_g  * Ncw/mr50/AnnualisationFactor;

				attribute<Eur_yr> Vraag_excl     (PlanRegio) := Verbruik + VastRecht + Aansl_j;
				attribute<Eur_yr> Vraag_m        (PlanRegio) := Verbruik + VastRecht + Aansl_m - EnergieHeffing;
			}

			template GebiedsOptie
			{
				// begin case parameters
				parameter<Classifications/GebiedsOptie> Optie;
				unit<uint32> BO;
				unit<uint32> PlanRegio;
				attribute<Ratio> Aandeel (BO);
				// end case parameters
		
//REMOVE				attribute<Invoer/SpecifiekeInstellingen/PlanRegio> PlanRegio_rel (BO) := Planregio_rel;
		
				attribute<Eur_yr> Verbruik   (PlanRegio) := sum(PlanRegioKaartComponent/WarmteVraag/deelnemers_obj * Aandeel, BO/PlanRegio_rel);
				attribute<Eur_yr> VastRecht  (PlanRegio) := sum(BO/Opbrengsten/VastRechtMT_T                       * Aandeel, BO/PlanRegio_rel);
		
				attribute<Eur>    Oi_AanslD  (PlanRegio) := sum(BO/Opbrengsten/AansluitBijdrageT                   * Aandeel, BO/PlanRegio_rel);
				attribute<Eur_yr> Aansl_j    (PlanRegio) := Oi_AanslD * BO/BO/BebouwingsComponent_UpRef/NcwRefs/_28/StartDiscountFactor * BO/NcwRefs/_28/AnnualisationFactor;
				attribute<Eur_yr> Aansl_m    (PlanRegio) := Oi_AanslD * NCW/mr28/StartDiscountFactor * NCW/mr28/AnnualisationFactor;
		
				attribute<Eur_yr> Vraag_excl (PlanRegio) : = Verbruik + VastRecht + Aansl_j;
				attribute<Eur_yr> Vraag_m    (PlanRegio) : = Verbruik + VastRecht + Aansl_m;
				
				attribute<Eur_yr> Om_Comfort (PlanRegio) := sum(AllocatieResultatenComponent/Om_Comfort  * Aandeel, BO/PlanRegio_rel);
			}

			attribute<Eur>    Ki_GebouwVerbetering_excl (PlanRegio):= sum(BO/eenmalig/Ki_gv, BO/Planregio_rel);
			attribute<Eur_yr> Kw_GebouwVerbetering_excl (PlanRegio):= Ki_GebouwVerbetering_excl * NCW30/AnnualisationFactor;

			attribute<Eur_yr> Kw_Totaal_excl            (PlanRegio):= Elektriciteit/Vraag_excl + AardGas/Vraag_excl + RestWarmte/Vraag_excl + GeoThermie/Vraag_excl + WKO/Vraag_excl + WijkWKK/Vraag_excl + BioWKK/Vraag_excl + Kw_GebouwVerbetering_excl;
			attribute<Eur_yr> Kj_Onderh_excl            (PlanRegio):= Ki_GebouwVerbetering_excl * Kengetallen/Onderhoud/R_GV_onderhoud;
			attribute<Eur_yr> Kj_Admin_excl             (PlanRegio):= Ki_GebouwVerbetering_excl * Kengetallen/Onderhoud/R_GV_admin;
		}
		container LokaleEnergieProductie
		{
			attribute<Eur>		Ki_HR          (PlanRegio)	:=	sum(AllocatieResultatenComponent/Kosten/Ki_HR, BO/Planregio_rel);
			attribute<Eur>		Oi_HR          (PlanRegio)	:=	sum(AllocatieResultatenComponent/Kosten/Oi_HR, BO/Planregio_rel);
			attribute<Eur>		Ki_HR_afschrijving   (PlanRegio)	:=	sum(AllocatieResultatenComponent/Kosten/Ki_HR_afschrijving, BO/Planregio_rel);
			attribute<Eur>		Ki_Totaal30    (PlanRegio)	:=	sum(BO/Eenmalig/Ki30_LO, BO/Planregio_rel);
			attribute<Eur>		Ki_Totaal20    (PlanRegio)	:=	sum(BO/Eenmalig/Ki20_LO, BO/Planregio_rel);
			attribute<Eur>		Ki_Totaal15    (PlanRegio)	:=	sum(BO/Eenmalig/Ki15_LO, BO/Planregio_rel);
			attribute<Eur_yr>	Kw_Totaal_excl (PlanRegio)	:=	Ki_Totaal30 * Ncw30/AnnualisationFactor + Ki_Totaal20 * Ncw20/AnnualisationFactor + Ki_Totaal15 * Ncw15/AnnualisationFactor;
			
			attribute<Eur_yr>	Kj_Onderh_excl (PlanRegio)	:=	sum(BO/Jaarlijks/Kj_OH_LO, Planregio_rel);
			attribute<Eur_yr>	Kj_Admin_excl  (PlanRegio)	:=	const(0.0[eur_yr], PlanRegio); //TODO:  controle of er echt nooit administratie is voor GV en LO
		}

		attribute<Eur_yr> Om_Comfort     (PlanRegio) := gebouwen/WKO/Om_Comfort;
		attribute<Eur_yr> Kw_Totaal_excl (PlanRegio) := gebouwen/Kw_Totaal_excl + LokaleEnergieProductie/Kw_Totaal_excl;
		attribute<Eur_yr> Kj_Onderh_excl (PlanRegio) := gebouwen/Kj_Onderh_excl + LokaleEnergieProductie/Kj_onderh_excl;
		attribute<Eur_yr> Kj_Admin_excl  (PlanRegio) := gebouwen/Kj_Admin_excl  + LokaleEnergieProductie/Kj_Admin_excl;
		
		attribute<Eur_yr> Oj_Subsidie (PlanRegio) := 
			sum(
				  BO/Eenmalig/Oi_s_LO_30 * NCW30/AnnualisationFactor
				+ BO/Eenmalig/Oi_s_LO_20 * NCW20/AnnualisationFactor
				+ BO/Eenmalig/Oi_s_LO_15 * NCW15/AnnualisationFactor
				+ BO/Eenmalig/Oi_s_GV    * NCW30/AnnualisationFactor
			,	Planregio_rel
			);

		attribute<Eur_yr> Om_Subsidie (PlanRegio) := 
			sum(
				  BO/Eenmalig/Oi_s_LO_30 * NCW/mr30/AnnualisationFactor
				+ BO/Eenmalig/Oi_s_LO_20 * NCW/mr20/AnnualisationFactor
				+ BO/Eenmalig/Oi_s_LO_15 * NCW/mr15/AnnualisationFactor
				+ BO/Eenmalig/Oi_s_GV    * NCW/mr30/AnnualisationFactor
			,	Planregio_rel
			);

		attribute<Eur_yr> Kw_Totaal_incl (PlanRegio): = 
			BTW_Factor * (Kw_Totaal_excl + Kj_Onderh_excl + Kj_Admin_excl) +
			(BTW_Factor_gv -BTW_Factor) * gebouwen/Kw_GebouwVerbetering_excl
			- Oj_Subsidie;
	}

	template WriteTable8ToCSV
	{
		// begin case parameters
		unit<uint8> table;
		parameter<string> fieldlist;
		parameter<string> filename;
		// end case parameters

		container impl: isHidden = "True"
		{
			unit<uint32> Field := range(uint32,0,strcount(fieldlist,';')+1)
			{
				attribute<string> FieldDescr  := ReadArray(fieldlist,.,string,0);
				attribute<UInt32> SepPos      := strpos(FieldDescr, ':');
				attribute<string> Name        := IsDefined(SepPos) ? substr(FieldDescr, 0, SepPos): FieldDescr;
				attribute<string> NameInTable := IsDefined(SepPos) ? substr(FieldDescr, SepPos+1, strlen(FieldDescr)) : FieldDescr;
				attribute<string> Metric := 
					='union_data(.,'+
						AsList('+PropValue(ValuesUnit(table/' + impl/Field/NameInTable +'),' + quote('metric') + ')', ',')+
					')';
			}
		}

		parameter<string> Header := AsList(Quote(impl/Field/Name +(impl/Field/Metric=='' ? '' : ' [' + impl/Field/Metric +']')), ';');

		parameter<string> Body_expr := AsList('AsExprList(table/' + impl/Field/NameInTable + ', id(table))',' +'';''+ ');
		attribute<string> Body (table) := =Body_expr;

		parameter<string> Result := Header + '\n' + AsList(Body+'\n', '')
		,	StorageName = "=filename"
		,	StorageType = "str";
	}

	template WriteTable32ToCSV
	{
		// begin case parameters
		unit<uint32> table;
		parameter<string> fieldlist;
		parameter<string> filename;
		// end   case parameters

		container impl: isHidden = "True"
		{
			unit<uint32> Field := range(uint32,0,strcount(fieldlist,';')+1)
			{
				attribute<string> FieldDescr  := ReadArray(fieldlist,.,string,0);
				attribute<UInt32> SepPos      := strpos(FieldDescr, ':');
				attribute<string> Name        := IsDefined(SepPos) ? substr(FieldDescr, 0, SepPos): FieldDescr;
				attribute<string> NameInTable := IsDefined(SepPos) ? substr(FieldDescr, SepPos+1, strlen(FieldDescr)) : FieldDescr;
				attribute<string> Metric := 
					='union_data(.,'+
						AsList('+PropValue(ValuesUnit(table/' +  impl/Field/NameInTable +'),' + quote('metric') + ')', ',')+
					')';
			}
		}
		parameter<string> Header := AsList(Quote(impl/Field/Name +(impl/Field/Metric=='' ? '' : ' [' + impl/Field/Metric +']')), ';');
			
		parameter<string> Body_expr := AsList('AsExprList(table/' + impl/Field/NameInTable + ', id(table))',' +'';''+ ');
		attribute<string> Body (table) := =Body_expr;
		parameter<string> Result := Header + '\n' + AsList(Body+'\n', '')
		,	Storagename = "=filename"
		,	StorageType = "str";
	}

}