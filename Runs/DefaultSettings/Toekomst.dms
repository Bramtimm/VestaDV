//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// Deze file bevat een basis voor de Vesta instellingen die vanuit iedere run4          //
// geincludeerd wordt en per run per Zichtjaar kan worden overreden                     //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////
container Toekomst
{
	container Stap_1 := Basis, using = "Units"
	{
		container RuimtelijkeVraag := Basis/RuimtelijkeVraag
		{
			container Lokaal := Basis/RuimtelijkeVraag/Lokaal
			{
				container Generiek := Basis/RuimtelijkeVraag/Lokaal/Generiek
				{
					container OpwekkingF := Basis/RuimtelijkeVraag/Lokaal/Generiek/OpwekkingF
					{
						attribute<Ratio> hWP (Classifications/energielabel) := const(1.0, Classifications/energielabel);
					}
					container Verbeteringen := Basis/RuimtelijkeVraag/Lokaal/Generiek/Verbeteringen
					{
						// @USERINPUT: 'Never', 'Always'
					// Letters verwijzen naar kolomheaders in het kentallen-bestand
					parameter<string> S_H_T:    ['Criteria/always']; // was: Sprong A
					parameter<string> S_H_B:    ['Criteria/always']; // was: Sprong B
					parameter<string> S_H_AP:   ['Criteria/always']; // was: Sprong C
					parameter<string> S_T_B:    ['Criteria/always']; // was: Sprong D
					parameter<string> S_T_AP:   ['Criteria/always']; // was: Sprong E
					parameter<string> S_B_AP:   ['Criteria/always']; // was: Sprong F

					// labelsprongen naar B inclusief eWP aan (incl lt-afgiftesysteem)
					parameter<string> S_H_BeWP:  ['Criteria/always']; // naar A+ met eWP
					parameter<string> S_T_BeWP:  ['Criteria/always']; // van tussenlabel naar A+ met eWP
					parameter<string> S_B_BeWP:  ['Criteria/always']; // van B naar A+ met eWP.

					// labelsprongen naar A+ inclusief eWP aan (incl lt-afgiftesysteem)
					parameter<string> S_H_AeWP:  ['Criteria/always']; // naar A+ met eWP
					parameter<string> S_T_AeWP:  ['Criteria/always']; // van tussenlabel naar A+ met eWP
					parameter<string> S_B_AeWP:  ['Criteria/always']; // van B naar A+ met eWP.
					parameter<string> S_AP_AeWP: ['Criteria/always'];  // van A+ zonder eWP naar A+ met eWP

					// labelsprongen naar A+ inclusief EWV
					parameter<string> S_H_EWV:  ['Criteria/always']; // naar A+ met EWV
					parameter<string> S_T_EWV:  ['Criteria/always']; // van tussenlabel naar A+ met EWV
					parameter<string> S_B_EWV:  ['Criteria/always']; // van B naar A+ met EWV.
					parameter<string> S_AP_EWV: ['Criteria/always'];  // van A+ zonder eWP naar A+ met EWV

					parameter<bool> SpringMeestRendabel:   [true] ; // maak rentabiliteitsafweging tbv bebouwingobject eigenaren indien true
					parameter<bool> SpringMaatschappelijk: [false] ; // maak maatschappelijke rentabiliteitsafweging indien true en SpringMeestRendabel = false
					}
				}
				container BestaandeWoning := Generiek;
				container BestaandeUtil   := Generiek;
				container BestaandeGlTb   := Generiek;
				container NieuwbouwWoning := BestaandeWoning;
				container NieuwbouwUtil   := BestaandeUtil;
				container NieuwbouwGlTb   := BestaandeGlTb;
			}
		}
	
		container Voorkeuren := Basis/Voorkeuren
		{
			container GebiedsOpties
			{
				parameter<UInt32> Aantal: [ 8 ];
				
				parameter<Classifications/GebiedsOptie> Optie1 := Classifications/GebiedsOptie/V/Restwarmte;
				parameter<Classifications/GebiedsOptie> Optie2 := Classifications/GebiedsOptie/V/Geothermie;
				parameter<Classifications/GebiedsOptie> Optie3 := Classifications/GebiedsOptie/V/BioWKK;
				parameter<Classifications/GebiedsOptie> Optie4 := Classifications/GebiedsOptie/V/Lt30_30;
				parameter<Classifications/GebiedsOptie> Optie5 := Classifications/GebiedsOptie/V/Lt30_50;
				parameter<Classifications/GebiedsOptie> Optie6 := Classifications/GebiedsOptie/V/Lt30_70;
				parameter<Classifications/GebiedsOptie> Optie7 := Classifications/GebiedsOptie/V/TEO;
				parameter<Classifications/GebiedsOptie> Optie8 := Classifications/GebiedsOptie/V/WKO;	
			}
		}
	}
	
	container Stap_2 := Basis, using = "Units"
	{
		container RuimtelijkeVraag := Basis/RuimtelijkeVraag
		{
			container Lokaal := Basis/RuimtelijkeVraag/Lokaal
			{
				container Generiek := Basis/RuimtelijkeVraag/Lokaal/Generiek
				{
					container OpwekkingF := Basis/RuimtelijkeVraag/Lokaal/Generiek/OpwekkingF
					{
						attribute<Ratio> hWP (Classifications/energielabel) := const(1.0, Classifications/energielabel);
					}
					container Verbeteringen := Basis/RuimtelijkeVraag/Lokaal/Generiek/Verbeteringen
					{
						// @USERINPUT: 'Never', 'Always'
					// Letters verwijzen naar kolomheaders in het kentallen-bestand
					parameter<string> S_H_T:    ['Criteria/Never']; // was: Sprong A
					parameter<string> S_H_B:    ['Criteria/Never']; // was: Sprong B
					parameter<string> S_H_AP:   ['Criteria/Never']; // was: Sprong C
					parameter<string> S_T_B:    ['Criteria/Never']; // was: Sprong D
					parameter<string> S_T_AP:   ['Criteria/Never']; // was: Sprong E
					parameter<string> S_B_AP:   ['Criteria/Never']; // was: Sprong F

					// labelsprongen naar B inclusief eWP aan (incl lt-afgiftesysteem)
					parameter<string> S_H_BeWP:  ['Criteria/Never']; // naar A+ met eWP
					parameter<string> S_T_BeWP:  ['Criteria/Never']; // van tussenlabel naar A+ met eWP
					parameter<string> S_B_BeWP:  ['Criteria/Never']; // van B naar A+ met eWP.

					// labelsprongen naar A+ inclusief eWP aan (incl lt-afgiftesysteem)
					parameter<string> S_H_AeWP:  ['Criteria/Never']; // naar A+ met eWP
					parameter<string> S_T_AeWP:  ['Criteria/Never']; // van tussenlabel naar A+ met eWP
					parameter<string> S_B_AeWP:  ['Criteria/Never']; // van B naar A+ met eWP.
					parameter<string> S_AP_AeWP: ['Criteria/Never'];  // van A+ zonder eWP naar A+ met eWP

					// labelsprongen naar A+ inclusief EWV
					parameter<string> S_H_EWV:  ['Criteria/Never']; // naar A+ met EWV
					parameter<string> S_T_EWV:  ['Criteria/Never']; // van tussenlabel naar A+ met EWV
					parameter<string> S_B_EWV:  ['Criteria/Never']; // van B naar A+ met EWV.
					parameter<string> S_AP_EWV: ['Criteria/Never'];  // van A+ zonder eWP naar A+ met EWV

					parameter<bool> SpringMeestRendabel:   [false] ; // maak rentabiliteitsafweging tbv bebouwingobject eigenaren indien true
					parameter<bool> SpringMaatschappelijk: [false] ; // maak maatschappelijke rentabiliteitsafweging indien true en SpringMeestRendabel = false
					}
				}
				container BestaandeWoning := Generiek;
				container BestaandeUtil   := Generiek;
				container BestaandeGlTb   := Generiek;
				container NieuwbouwWoning := BestaandeWoning;
				container NieuwbouwUtil   := BestaandeUtil;
				container NieuwbouwGlTb   := BestaandeGlTb;
			}
		}
	
		container Voorkeuren := Basis/Voorkeuren
		{
			container GebiedsOpties
			{
				parameter<UInt32> Aantal: [ 0 ];
				
// 				parameter<Classifications/GebiedsOptie> Optie1 := Classifications/GebiedsOptie/V/TEO;
// 				parameter<Classifications/GebiedsOptie> Optie2 := Classifications/GebiedsOptie/V/Lt30_70;
// 				parameter<Classifications/GebiedsOptie> Optie3 := Classifications/GebiedsOptie/V/Lt30_50;
// 				parameter<Classifications/GebiedsOptie> Optie4 := Classifications/GebiedsOptie/V/Lt30_30;
// 				parameter<Classifications/GebiedsOptie> Optie5 := Classifications/GebiedsOptie/V/WKO;
// 				parameter<Classifications/GebiedsOptie> Optie6 := Classifications/GebiedsOptie/V/BioWKK;
// 				parameter<Classifications/GebiedsOptie> Optie7 := Classifications/GebiedsOptie/V/Geothermie;
// 				parameter<Classifications/GebiedsOptie> Optie8 := Classifications/GebiedsOptie/V/Restwarmte;
			}
		}
	}
}