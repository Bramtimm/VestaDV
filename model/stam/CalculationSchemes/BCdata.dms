//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2019 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template BCdata
{
	// begin case parameters
	unit<uint32>      BebouwingsObjectZonderNieuwbouw;
	parameter<string> BCname;
	parameter<bool>   IsNieuwbouw;
	parameter<bool>   HasResterendFactors;

	container ResterendFactorMaps;
	unit<uint32>  ModelObject;
	attribute<bool> SchilSprong_sel(Classifications/SchilSprong);
	container LocatieSpecifiekeOpties;
	container VraagKentallen;
	container StartingStateComponent;

	unit<uint8> PrijzenAardgas;

	parameter<string> NcwRefBase;
	parameter<Ratio>  BTW_Factor;
	parameter<Ratio>  BTW_Factor_gv;
	// end of case parameters
	
	container NcwRefs 
	{
		container _15 := ='NCW/'+NcwRefBase+'15';
		container _30 := ='NCW/'+NcwRefBase+'30';
		container _50 := ='NCW/'+NcwRefBase+'50';
		container _28 := ='NCW/'+NcwRefBase+'28';
		container _20 := ='NCW/'+NcwRefBase+'20';
	}

	unit<uint8> PrijzenElektriciteit := Prijzen/Elektriciteit/Staffel;

	container union := =IsNieuwbouw ? 'CalculationSchemes/BebouwingsOperaties/union(StartingStateComponent/BebouwingsObject, BebouwingsObjectZonderNieuwbouw)' : '..';
	
	unit<uint32>  BebouwingsObject := =IsNieuwbouw ? 'union/result' : 'BebouwingsObjectZonderNieuwbouw';
	unit<uint32>  PrevObject           := StartingStateComponent/BebouwingsObject;
	unit<uint8>   BebouwingsTypeDomein := BebouwingsObject/BebouwingsTypeDomein;

	attribute<Invoer/SpecifiekeInstellingen/PlanRegio> PlanRegio_rel (BebouwingsObject) := BebouwingsObject/buurt_rel;
	attribute<ModelObject> Model_rel        (BebouwingsObject) := rlookup(BebouwingsObject/ModelObjectKey, ModelObject/ModelObjectKey), KeepData = "True";
	attribute<PrevObject>  StartingState_rel(BebouwingsObject) := rlookup(BebouwingsObject/code, PrevObject/code);
	
	container beginState {
	
		unit<uint32>  AfnameGebied         := StateVoorAllocatie/AfnameGebied;
		attribute<Classifications/SchilLabel>  SchilLabel_rel  (BebouwingsObject) := StartingStateComponent/SchilLabel_rel [StartingState_rel];
		attribute<Classifications/WarmteOptie> WarmteOptie_rel (BebouwingsObject) := StartingStateComponent/WarmteOptie_rel[StartingState_rel];
				
		container InstallatiePerProduct := for_each_nedv(Classifications/Product/Name
		,	'StartingStateComponent/PerProductAsTable/'+Classifications/Product/Name+'[StartingState_rel]'
		,	BebouwingsObject, Classifications/Installatie
		);
		attribute<AfnameGebied>  AfnameGebied_rel (BebouwingsObject):= StartingStateComponent/AfnameGebied_rel[StartingState_rel];	
		
		attribute<Classifications/GebouwOptie> GebouwOptie_rel (BebouwingsObject) := StartingStateComponent/GebouwOptie_rel[StartingState_rel]; // REMOVE, OBSOLETE, vervangen door Schillabel_rel, InstallatiePerProduct en GebiedsOptie
	}

	unit<uint32> RuimtelijkeVraagComponent := BebouwingsObject
	{
		attribute<Geography/rdc_grids/m100> gridm100_rel (BebouwingsObject) := point[Geography/rdc_grids/m100];
		attribute<bool>   IsMeergezins (.) := BebouwingsTypeDomein/IsMeergezins[BebouwingsType];
		attribute<Ratio> ResterendFactorBase := = HasResterendFactors
			? 'MakeDefined(merge(BebouwingsType, Ratio, '+AsItemList('ResterendFactorMaps/'+BebouwingsTypeDomein/ResterendFactorName+'[gridm100_rel]')+'), 1.0)'
			: 'const(1.0, BebouwingsObject)';

		attribute<Ratio>      ResterendFactor := ResterendFactorBase * float64(IsDefined(PlanRegio_rel));
		attribute<nrAansl>    nrAansluitingen := ResterendFactor * nrAansluitingen_i;
		attribute<m2>         Oppervlakte     := ResterendFactor * Oppervlakte_i;
		
		attribute<nrAansl>   nrAansluitingen_per_PlanRegio (Invoer/SpecifiekeInstellingen/PlanRegio) := sum(nrAansluitingen, planregio_rel);
		
		// TODO: Optimaliseer domein voor Niet woningen tbv specifiek DCcDomein
		attribute<string>    BCc (.) :=
			(BCname == 'BestaandeUtil'   || BCname == 'NieuwBouwUtil'  ) ? 'u' :
			(BCname == 'BestaandeGLTB'   || BCname == 'NieuwBouwGLTB'  ) ? 't' :
			IsMeergezins ? 'wh' : 'wl';
		
		container AansluitCapaciteit
		{
			attribute<kW> RV    (..) := ASW_RVmt;
			attribute<kW> TW    (..) := ASW_TWmt;
			attribute<kW> Warmte(..) := RV + TW;
			attribute<kW> K     (..) := ASW_K;
			attribute<kW> eWP   (..) := max_elem(RV, TW);
			attribute<kW> eZ    (..) := ASW_Eapp;
			attribute<kW> eM    (..) := ASW_Eewp;

			attribute<ratio> GTF_RVmt (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_RVmt) , case(BCc=='u', Vermogens/GTF_u_RVmt), Vermogens/GTF_w_RVmt) ;
			attribute<ratio> GTF_RVlt (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_RVlt) , case(BCc=='u', Vermogens/GTF_u_RVlt), Vermogens/GTF_w_RVlt) ;
			attribute<ratio> GTF_TW   (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_TW  ) , case(BCc=='u', Vermogens/GTF_u_TW  ), Vermogens/GTF_w_TW  ) ;
			attribute<ratio> GTF_K    (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_K   ) , case(BCc=='u', Vermogens/GTF_u_K   ), Vermogens/GTF_w_K   ) ;
			attribute<ratio> GTF_Enet (..) :=
				switch(case(BCc=='t', Vermogens/GTF_t_Enet) , case(BCc=='u', Vermogens/GTF_u_Enet), Vermogens/GTF_w_Enet) ;
			attribute<kW>    ASW_RVmt (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_RVmt_t_opp) , case(BCc=='u', Vermogens/ASW_RVmt_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_RVmt_wl_opp),                Vermogens/ASW_RVmt_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_RVmt_t_asl) , case(BCc=='u', Vermogens/ASW_RVmt_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_RVmt_wl_asl),                Vermogens/ASW_RVmt_wh_asl) ;
			attribute<kW>    ASW_TWmt (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_TWmt_t_opp) , case(BCc=='u', Vermogens/ASW_TWmt_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_TWmt_wl_opp),                Vermogens/ASW_TWmt_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_TWmt_t_asl) , case(BCc=='u', Vermogens/ASW_TWmt_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_TWmt_wl_asl),                Vermogens/ASW_TWmt_wh_asl) ;
			attribute<kW>    ASW_RVlt (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_RVlt_t_opp) , case(BCc=='u', Vermogens/ASW_RVlt_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_RVlt_wl_opp),                Vermogens/ASW_RVlt_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_RVlt_t_asl) , case(BCc=='u', Vermogens/ASW_RVlt_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_RVlt_wl_asl),                Vermogens/ASW_RVlt_wh_asl) ;
			attribute<kW>    ASW_TWlt (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_TWlt_t_opp) , case(BCc=='u', Vermogens/ASW_TWlt_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_TWlt_wl_opp),                Vermogens/ASW_TWlt_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_TWlt_t_asl) , case(BCc=='u', Vermogens/ASW_TWlt_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_TWlt_wl_asl),                Vermogens/ASW_TWlt_wh_asl) ;
			attribute<kW>    ASW_K    (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_K_t_opp)    , case(BCc=='u', Vermogens/ASW_K_u_opp)     ,
										   case(BCc=='wl',Vermogens/ASW_K_wl_opp)   ,                Vermogens/ASW_K_wh_opp)    
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_K_t_asl)    , case(BCc=='u', Vermogens/ASW_K_u_asl)     ,
										   case(BCc=='wl',Vermogens/ASW_K_wl_asl   ),                Vermogens/ASW_K_wh_asl)    ;
			attribute<kW>    ASW_Eapp (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_Eapp_t_opp) , case(BCc=='u', Vermogens/ASW_Eapp_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_Eapp_wl_opp),                Vermogens/ASW_Eapp_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_Eapp_t_asl) , case(BCc=='u', Vermogens/ASW_Eapp_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_Eapp_wl_asl),                Vermogens/ASW_Eapp_wh_asl) ;
			attribute<kW>    ASW_Ehwp (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_Ehwp_t_opp) , case(BCc=='u', Vermogens/ASW_Ehwp_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_Ehwp_wl_opp),                Vermogens/ASW_Ehwp_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_Ehwp_t_asl) , case(BCc=='u', Vermogens/ASW_Ehwp_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_Ehwp_wl_asl),                Vermogens/ASW_Ehwp_wh_asl) ;
			attribute<kW>    ASW_Eewp (..) :=
				  Oppervlakte     * switch(case(BCc=='t', Vermogens/ASW_Eewp_t_opp) , case(BCc=='u', Vermogens/ASW_Eewp_u_opp)  ,
										   case(BCc=='wl',Vermogens/ASW_Eewp_wl_opp),                Vermogens/ASW_Eewp_wh_opp) 
				+ nrAansluitingen * switch(case(BCc=='t', Vermogens/ASW_Eewp_t_asl) , case(BCc=='u', Vermogens/ASW_Eewp_u_asl)  ,
										   case(BCc=='wl',Vermogens/ASW_Eewp_wl_asl),                Vermogens/ASW_Eewp_wh_asl) ;
		}
		container Functioneel
		{
			container DragerSpecifiekeOpties := SpecifiekeInstellingen/RuimtelijkeVraag/Drager;
			
			attribute<Ratio>	Klimaateffect (..)	:=	KlimaatFactorMap[gridm100_rel];
			
			attribute<GJ_yr>	TW(..) := (nrAansluitingen * ModelObject/V_TW_asl [Model_rel] + Oppervlakte * ModelObject/V_TW_opp [Model_rel])
						* DragerSpecifiekeOpties/TapWater;
						
			attribute<GJ_yr>	K (..) := =
			'('
				+	(all(ModelObject/V_K_asl == 0[GJ_Yr_asl]) ?'':'NrAansluitingen * ModelObject/V_K_asl[Model_rel] +')
				+	'Oppervlakte * ModelObject/V_K_opp[Model_rel] '
				+	') * DragerSpecifiekeOpties/Koude * ( 1.0 + 3.66*(1.0 - Klimaateffect))';
			
			attribute<GJ_yr>	EA(..) := (nrAansluitingen * ModelObject/V_EA_asl [Model_rel] + Oppervlakte * ModelObject/V_EA_opp [Model_rel])
						* DragerSpecifiekeOpties/ElektrischeApparatuur;
			
			// TODO, OPTIMIZE, V_RV_asl/@SL@ alleen meenemen indien niet allemaal 0, zoals bij utiliteiten wel het geval is
			container RV := for_each_nedv(Classifications/SchilLabel/Name
			,	replace(
					'(nrAansluitingen * ModelObject/V_RV_asl/@SL@[Model_rel] + Oppervlakte * ModelObject/V_RV_opp/@SL@[Model_rel])'
						'* DragerSpecifiekeOpties/RuimteVerwarming'
						'* Klimaateffect'
				,'@SL@', Classifications/SchilLabel/Name)
			,	.., GJ_Yr);
			
			attribute<GJ_Yr> CurrRV(..) := ='merge(SchilLabel_rel, GJ_Yr, '+AsItemList('RV/'+Classifications/SchilLabel/Name)+')';			
			attribute<GJ_yr> Ventilatie(..)	:=	=				
				'('
				+	(all(ModelObject/V_Vent_asl == 0[GJ_yr_asl]) ? '' : 'NrAansluitingen * ModelObject/V_Vent_asl + ')
				+ 'Oppervlakte * ModelObject/V_Vent_opp[Model_rel]'
				+ ') * DragerSpecifiekeOpties/ElektrischeApparatuur'
				;
		}
	}

	container Criteria := BebouwingsObject/Criteria // inherit, TODO: opruimen na aanpassing runs
	{
		attribute<bool> Always (BebouwingsObject) := const(true,  BebouwingsObject);
		attribute<bool> Never  (BebouwingsObject) := const(false, BebouwingsObject);
	}

	attribute<BebouwingsTypeDomein> BebouwingsType (BebouwingsObject) := RuimtelijkeVraagComponent/BebouwingsType;

	container EIA_Opties := ='SpecifiekeInstellingen/Beleid/EIA/E_'+NcwRefBase;
	container EEA_Opties := SpecifiekeInstellingen/Beleid/EEA/Kosten/Basis;

	container VerbruiksOpties {
	
		unit<uint8> SchilSprong_set := subset(SchilSprong_sel) {
			attribute<Classifications/SchilSprong> SchilSprong_rel := nr_OrgEntity;
			attribute<string> Name := Classifications/SchilSprong/name[SchilSprong_rel];
			attribute<Classifications/SchilLabel> Naar_rel := Classifications/SchilSprong/Naar_rel[SchilSprong_rel];
			attribute<Classifications/SchilSprongCode> SchilSprongCode_rel := Classifications/SchilSprong/SchilSprongCode_rel[SchilSprong_rel];
			
			attribute<string> LeerCurveName := Classifications/SchilLabel/LeerCurveName[Naar_rel];
			
			unit<uint32> xMO := combine(., ModelObject) {
				attribute<EUR_asl> Ki_asl := ='union_data(.,'+AsItemList(replace('(ModelObject/Ki_min_asl/@SS@ * Schuiven/KostenMin + ModelObject/Ki_max_asl/@SS@ * Schuiven/KostenMax) * Leercurves/'+LeerCurveName+'/Curve', '@SS@', Name))+')';
				attribute<EUR_m2 > Ki_opp := ='union_data(.,'+AsItemList(replace('(ModelObject/Ki_min_opp/@SS@ * Schuiven/KostenMin + ModelObject/Ki_max_opp/@SS@ * Schuiven/KostenMax) * Leercurves/'+LeerCurveName+'/Curve', '@SS@', Name))+')';
			}
		}
		unit<uint8> SchilSprongOrIdle_set := union_unit_uint8(Classifications/SchilLabel, SchilSprong_set) {
			attribute<Classifications/SchilLabel> Van_rel  := union_data(., ID(Classifications/SchilLabel), Classifications/SchilSprong/Van_rel [SchilSprong_set/nr_OrgEntity]);
			attribute<Classifications/SchilLabel> Naar_rel := union_data(., ID(Classifications/SchilLabel), Classifications/SchilSprong/Naar_rel[SchilSprong_set/nr_OrgEntity]);
			
			attribute<string> Name := union_data(., 'S'+repeat(Classifications/SchilLabel/name,2), SchilSprong_set/name);
			
			unit<uint32> xMO := combine(., ModelObject) {
				attribute<EUR_asl> Ki_asl := ='union_data(., ' + AsItemList(const('const(0[EUR_asl], ModelObject)', Classifications/SchilLabel))+', SchilSprong_set/xMO/Ki_asl)';
				attribute<EUR_m2 > Ki_opp := ='union_data(., ' + AsItemList(const('const(0[EUR_m2 ], ModelObject)', Classifications/SchilLabel))+', SchilSprong_set/xMO/Ki_opp)';
			}
		}
		
		parameter<string> BcCode := rjoin(BcName, Classifications/BebouwingsComponent/Name, Classifications/BebouwingsComponent/BcCode);
		unit<uint32> Installatie := Classifications/Installatie {
			// TODO, MTA: remove const in merge wanneer void domain hier zal worden toegestaan, issue XXX.
			attribute<EUR_asl> Ki_asl := =replace('(Ki_asl_min_@BC * Schuiven/KostenMin + Ki_asl_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, Float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/Name+'/Curve, .)')+')', '@BC', BcCode);
			attribute<EUR_kW>  Ki_cap := =replace('(Ki_cap_min_@BC * Schuiven/KostenMin + Ki_cap_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, Float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/Name+'/Curve, .)')+')', '@BC', BcCode);
			attribute<EUR_m2>  Ki_opp := =replace('(Ki_opp_min_@BC * Schuiven/KostenMin + Ki_opp_max_@BC * Schuiven/KostenMax)* merge(LeerCurve_rel, Float64, '+AsItemList('const(LeerCurves/'+Classifications/LeerCurves/Name+'/Curve, .)')+')', '@BC', BcCode);

			attribute<EUR_kW>  Ki30_cap := Ki_cap * AT30;
			attribute<EUR_kW>  Ki20_cap := Ki_cap * AT20;
			attribute<EUR_kW>  Ki15_cap := Ki_cap * AT15;
		}
		
		unit<uint8> GebouwOptie := Classifications/GebouwOptie {
			attribute<EUR_asl> Ki_asl := sum(Installatie/Ki_asl[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_m2 > Ki_opp := sum(Installatie/Ki_opp[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_m2 > Ki_cap := sum(Installatie/Ki_opp[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			
			attribute<EUR_asl> Ki30_asl := sum((Installatie/Ki_asl * Installatie/AT30)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_asl> Ki20_asl := sum((Installatie/Ki_asl * Installatie/AT20)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_asl> Ki15_asl := sum((Installatie/Ki_asl * Installatie/AT15)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			
			attribute<EUR_m2 > Ki30_opp := sum((Installatie/Ki_opp * Installatie/AT30)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_m2 > Ki20_opp := sum((Installatie/Ki_opp * Installatie/AT20)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
			attribute<EUR_m2 > Ki15_opp := sum((Installatie/Ki_opp * Installatie/AT15)[uInstallatie/Installatie_rel], uInstallatie/GebouwOptie_rel);
		}
	}
	
	template DoelLabelT {
		parameter<Classifications/DoelLabel_NaSprong> DoelLabel_rel;
		
		attribute<Classifications/SchilLabel> Van_rel(BebouwingsObject) := BeginState/schillabel_rel;
		parameter<Classifications/SchilLabel> Naar_rel                  := Classifications/DoelLabel_NaSprong/SchilLabel_rel[DoelLabel_rel];
		
		attribute<VerbruiksOpties/SchilSprong_set>     SchilSprong_rel    (BebouwingsObject) := rlookup(combine_data(Classifications/SchilSprongCode, Van_rel, Naar_rel), VerbruiksOpties/SchilSprong_set/SchilSprongCode_rel);
		attribute<VerbruiksOpties/SchilSprong_set/xMO> SchilSprong_xMO_rel(BebouwingsObject) := combine_data(VerbruiksOpties/schilsprong_set/xMO, SchilSprong_rel, Model_rel);
		
		attribute<EUR> Ki_schil (BebouwingsObject) := MakeDefined(
			VerbruiksOpties/schilsprong_set/xMO/Ki_asl[SchilSprong_xMO_rel] * RuimtelijkeVraagComponent/nrAansluitingen +
			VerbruiksOpties/schilsprong_set/xMO/Ki_opp[SchilSprong_xMO_rel] * RuimtelijkeVraagComponent/Oppervlakte    
		,	0[EUR]
		);
	}
	container DoelLabels := for_each_ne(Classifications/DoelLabel_NaSprong/Name, 'DoelLabelT(Classifications/DoelLabel_NaSprong/V/'+Classifications/DoelLabel_NaSprong/Name+')') {
		container geen  // handle as special case
		{
			attribute<EUR> Ki_schil (BebouwingsObject) := const(0[EUR], BebouwingsObject);
		}
	}
	
	template GebouwOptieT {
		parameter<Classifications/GebouwOptie> GebouwOptie_rel;
		parameter<Classifications/DoelLabel  > DoelLabel_rel         := Classifications/GebouwOptie/DoelLabel_rel[GebouwOptie_rel];
		parameter<Classifications/SchilLabel> SchilLabel_rel_formeel := Classifications/DoelLabel/SchilLabel_rel[DoelLabel_rel];
		attribute<Classifications/Installatie> Installatie_rel(Classifications/Product) := 
			= 'union_data(Classifications/Product, ' + AsItemList('Classifications/GebouwOptie/Installatie_rel/'+Classifications/Product/Name+'[GebouwOptie_rel]') + ')';
		
		parameter<bool> AltijdSprong := (DoelLabel_rel == Classifications/DoelLabel/V/A) && all(Installatie_rel != Classifications/Installatie/V/geen);
		parameter<bool> SomsSprong   := (DoelLabel_rel != Classifications/DoelLabel/V/geen);
		parameter<string> SprongSuffix := AltijdSprong ? '[0[SchilLabelDomain]]' : '';
		unit<uint32> SchilLabelDomain := =AltijdSprong ? 'range(UInt32, 0, 1)' : 'BebouwingsObject';
		attribute<Classifications/SchilLabel > SchilLabel_rel(SchilLabelDomain) := 
			= AltijdSprong ? 'union_data(SchilLabelDomain, SchilLabel_rel_formeel)'
			: SomsSprong   ? 'min_elem(BeginState/schillabel_rel, SchilLabel_rel_formeel)'
			:                'BeginState/schillabel_rel'
			;
		
		// TODO: rekening houden met Installatie='geen' => bestaande installatie gebruiken.		
		container Performance_rel := for_each_nedv(Classifications/Product/Name
		,	'Classifications/GebouwOptie/xLabel/Performance_rel/'+Classifications/Product/Name+'[combine_data(Classifications/GebouwOptie/xLabel, GebouwOptie_rel, SchilLabel_rel)]'
		,	SchilLabelDomain, Classifications/Performance
		);
		
		container InstallatiePerProduct := for_each_nedv(Classifications/Product/Name
		,   Installatie_rel != Classifications/Installatie/V/geen 
			? 'const(Classifications/Installatie/V/' + Classifications/Installatie/Name[Installatie_rel] + ', SchilLabelDomain)' 
			: 'beginState/InstallatiePerProduct/' + Classifications/Product/Name
		,	SchilLabelDomain, Classifications/Installatie
		);
		
		// investeringskosten
		container P_cap {
			attribute<Float64> RVb (SchilLabelDomain):=       Classifications/Performance/P_cap[Performance_rel/RVb];
			attribute<Float64> RVp (SchilLabelDomain):= 1.0 - Classifications/Performance/P_cap[Performance_rel/RVb];
			attribute<Float64> TWb (SchilLabelDomain):=       Classifications/Performance/P_cap[Performance_rel/TWb];
			attribute<Float64> TWp (SchilLabelDomain):= 1.0 - Classifications/Performance/P_cap[Performance_rel/TWb];
			attribute<Float64> Kb  (SchilLabelDomain):=       Classifications/Performance/P_cap[Performance_rel/Kb];
			attribute<Float64> Kp  (SchilLabelDomain):= 1.0 - Classifications/Performance/P_cap[Performance_rel/Kb];
		}
		
		unit<uint32> uInstallatie := subset(Classifications/GebouwOptie/uInstallatie/GebouwOptie_rel == GebouwOptie_rel)
		{
			attribute<Classifications/Installatie> Installatie_rel := Classifications/GebouwOptie/uInstallatie/Installatie_rel[nr_OrgEntity];
			attribute<string> Name := Classifications/Installatie/Name[Installatie_rel];
			attribute<string> Label := Name;
			attribute<.> Per_Product(Classifications/Product)  := rlookup(../Installatie_rel, Installatie_rel);
		}
		
		container cap_prod := for_each_nedv(Classifications/Product/Name
		,	replace('RuimtelijkeVraagComponent/AansluitCapaciteit/@T * P_cap/@P'+SprongSuffix
			,	'@T',Classifications/Product/TypeName
			,	'@P',Classifications/Product/Name
			)
		,	BebouwingsObject, kW
		);
		
		// TODO: Bestaande installaties igv optie installatie == geen.
		container cap_inst := for_each_nedv(uInstallatie/Name
		,	pcount(uInstallatie/Per_Product)== 0 ? 'const(0[kW], SchilLabelDomain)': 'max_elem('+AsItemList('cap_prod/'+Classifications/Product/Name,uInstallatie/Per_Product)+')'
		,	SchilLabelDomain, kW
		);
		
		parameter<string> KiX_cap_Expr := 'add('+AsItemList(replace('cap_inst/@I * VerbruiksOpties/Installatie/Ki@X_cap['+string(uInstallatie/Installatie_rel)+'[Classifications/Installatie]]', '@I', uInstallatie/Name))+')';
		attribute<EUR> Ki_cap  (BebouwingsObject) := =replace(KiX_cap_Expr, '@X', '');
		attribute<EUR> Ki30_cap(BebouwingsObject) := =replace(KiX_cap_Expr, '@X', '30');
		attribute<EUR> Ki20_cap(BebouwingsObject) := =replace(KiX_cap_Expr, '@X', '20');
		attribute<EUR> Ki15_cap(BebouwingsObject) := =replace(KiX_cap_Expr, '@X', '15');
		
		parameter<string> KiX_expr := 
			'add('
				'VerbruiksOpties/GebouwOptie/Ki@X_asl[GebouwOptie_rel] * RuimtelijkeVraagComponent/nrAansluitingen,  '
				'VerbruiksOpties/GebouwOptie/Ki@X_opp[GebouwOptie_rel] * RuimtelijkeVraagComponent/Oppervlakte , ' 
				'Ki@X_cap'
			+')';

			
		attribute<EUR> Ki_installatie  (BebouwingsObject) := =replace(KiX_expr, '@X', '');
		attribute<EUR> Ki30_installatie(BebouwingsObject) := =replace(KiX_expr, '@X', '30');
		attribute<EUR> Ki20_installatie(BebouwingsObject) := =replace(KiX_expr, '@X', '20');
		attribute<EUR> Ki15_installatie(BebouwingsObject) := =replace(KiX_expr, '@X', '15');		
		attribute<EUR> Ki_schil (BebouwingsObject)      := ='DoelLabels/'+Classifications/DoelLabel/Name[DoelLabel_rel]+'/Ki_schil';
		attribute<EUR> Ki_totaal(BebouwingsObject)      := Ki_installatie + Ki_schil;
		
		// metervraag
		container SPF := for_each_nedv(Classifications/Product/Name
		,	replace('Classifications/Performance/SPF_@S[Performance_rel/@P]', '@P', Classifications/Product/Name, '@S', Classifications/Product/ServiceName)
		,	SchilLabelDomain, Float64
		);
		
		// TODO, OPTIMIZE, MTA, consider merge(xy/schil, x/v[xy/x_rel] for each schil)
		container functioneel
		{
			attribute<GJ_Yr> RV(BebouwingsObject) := =
				AltijdSprong
				?	'RuimtelijkeVraagComponent/Functioneel/RV/'+Classifications/SchilLabel/Name[SchilLabel_rel_formeel]
				:	'merge(SchilLabel_rel, GJ_Yr, '+AsItemList('RuimtelijkeVraagComponent/Functioneel/RV/'+Classifications/SchilLabel/Name)+')';

			attribute<GJ_Yr> TW(BebouwingsObject) := RuimtelijkeVraagComponent/Functioneel/TW;
			attribute<GJ_Yr> K (BebouwingsObject) := RuimtelijkeVraagComponent/Functioneel/K ;
			
			attribute<Float64>  RVb(BebouwingsObject) := ='RV *        Classifications/Performance/P_Vol[Performance_rel/RVb] '+SprongSuffix;
			attribute<Float64>  RVp(BebouwingsObject) := ='RV * (1.0 - Classifications/Performance/P_Vol[Performance_rel/RVb])'+SprongSuffix;
			attribute<Float64>  TWb(BebouwingsObject) := ='TW *        Classifications/Performance/P_Vol[Performance_rel/TWb] '+SprongSuffix;
			attribute<Float64>  TWp(BebouwingsObject) := ='TW * (1.0 - Classifications/Performance/P_Vol[Performance_rel/TWb])'+SprongSuffix;
			attribute<Float64>  Kb (BebouwingsObject) := ='K  *        Classifications/Performance/P_Vol[Performance_rel/Kb ] '+SprongSuffix;
			attribute<Float64>  Kp (BebouwingsObject) := ='K  * (1.0 - Classifications/Performance/P_Vol[Performance_rel/Kb ])'+SprongSuffix;
		}
		
		container metervraag_base := for_each_nedv(Classifications/Product/Name
		,	replace('functioneel/@P / SPF/@P'+SprongSuffix, '@P', Classifications/Product/Name)
		,	BebouwingsObject, Float64
		);

		container BemeterdeGebouwInput_rel := for_each_nedv(Classifications/Product/Name
		,	'rlookup(Classifications/Performance/Input_rel, Classifications/BemeterdeGebouwInput/nr_OrgEntity)[Performance_rel/'+Classifications/Product/Name+']'
		,	SchilLabelDomain, Classifications/BemeterdeGebouwInput
		);

		container Expr_impl {
			attribute<string> MeterVraagExpr_asVector(Classifications/Product) := 'metervraag_base/' + Classifications/Product/Name;
			
			attribute<Classifications/BemeterdeGebouwInput> BemeterdeGebouwInput_rel_asVector(Classifications/Product) :=
				='union_data(Classifications/Product,'+AsItemList(AltijdSprong ? 'BemeterdeGebouwInput_rel/'+Classifications/Product/Name : '(0/0)[Classifications/BemeterdeGebouwInput]' )+')';
				
			attribute<string> aggr_NaSprong(Classifications/BemeterdeGebouwInput) := 
				pcount(BemeterdeGebouwInput_rel_asVector)>0
				?	'add('+AsItemList(MeterVraagExpr_asVector, BemeterdeGebouwInput_rel_asVector)+')'
				:	'const(0[GJ_Yr], BebouwingsObject)';
	
			// TODO: check waarom 0 bij alle Input in VRw ?
			attribute<string> aggr_OudLabel(Classifications/BemeterdeGebouwInput) := 
					replace('add('++AsItemList(replace('BemeterdeGebouwInput_rel/@P == Classifications/BemeterdeGebouwInput/V/@I ? metervraag_base/@P: 0[GJ_Yr]', '@P', Classifications/Product/Name))+')'
					, '@I', Classifications/BemeterdeGebouwInput/Name
					);
		}
		
		container metervraag_aggr := for_each_nedv(Classifications/BemeterdeGebouwInput/Name
		,	AltijdSprong ? Expr_impl/aggr_NaSprong : Expr_impl/aggr_OudLabel
		,	BebouwingsObject, GJ_Yr);
		
		container eEffect 
		{
			container volume := for_each_nedv(Classifications/Product/Name
			,	replace(
					'Classifications/Performance/eEffect_vol[Performance_rel/@P'+SprongSuffix+'] * metervraag_base/@P'
				,	'@P', Classifications/Product/Name)
			,	BebouwingsObject, GJ_Yr
			)
			{
				attribute<GJ_Yr> Totaal(BebouwingsObject) := ='add('+AsItemList(Classifications/Product/Name)+')';
			}
			
			container capaciteit := for_each_nedv(uInstallatie/Name
			,	replace(
					pcount(uInstallatie/Per_Product)==0?'const(0[GJ_Yr], BebouwingsObject)':'add('+AsItemList('Classifications/Performance/eEffect_cap[Performance_rel/'+Classifications/Product/Name+']', uInstallatie/Per_Product)+') * cap_inst/@I'
				,	'@I', uInstallatie/Name)
			,	BebouwingsObject, GJ_Yr
			)
			{
				attribute<GJ_Yr> Totaal(BebouwingsObject) := ='add('+AsItemList(uInstallatie/Name)+')';
			}
			
			
			attribute<GJ_Yr> Ventilatie(BebouwingsObject) := 
			(SchilLabel_rel <= Classifications/SchilLabel/V/B)
			?	RuimtelijkeVraagComponent/functioneel/Ventilatie
			:	const(0[GJ_Yr], SchilLabelDomain);
			
			
			attribute<GJ_Yr> Totaal(BebouwingsObject) := volume/Totaal + capaciteit/Totaal + Ventilatie;
		}
		
		container metervraag := metervraag_aggr // inherit all, but override 'e'
		{
			attribute<GJ_Yr> e(BebouwingsObject) := metervraag_aggr/e + eEffect/Totaal;	// TODO: Functioneel/PompEnergie, VentilatieKosten_eg, Functioneel/Apparatuur
		}
		
		container prijzen {
			attribute<EUR_GJ> e  (BebouwingsObject) := PrijzenElektriciteit/KGJ_eindgebruik_excl [classify(metervraag/e  , PrijzenElektriciteit/ClassBreak )];
			attribute<EUR_GJ> gas(BebouwingsObject) := PrijzenElektriciteit/KGJ_eindgebruik_excl [classify(metervraag/gas, PrijzenAardgas/ClassBreak )];	
		}
		
		attribute<EUR_Yr> Kj_verbruik(BebouwingsObject) := 
			prijzen/e   *  metervraag/e 
		+	prijzen/gas *  metervraag/gas;
		
		attribute<EUR_Yr> Kj_schil        (BebouwingsObject) := Ki_schil * NcwRefs/_30/AnnualisationFactor;
		attribute<EUR_Yr> Kj30_installatie(BebouwingsObject) := Ki30_installatie * NcwRefs/_30/AnnualisationFactor;
		attribute<EUR_Yr> Kj20_installatie(BebouwingsObject) := Ki20_installatie * NcwRefs/_20/AnnualisationFactor;
		attribute<EUR_Yr> Kj15_installatie(BebouwingsObject) := Ki15_installatie * NcwRefs/_15/AnnualisationFactor;
		attribute<EUR_Yr> Kj_installatie(BebouwingsObject) := Kj30_installatie + Kj20_installatie + Kj15_installatie;
		attribute<EUR_Yr> Km_schil      (BebouwingsObject) := Ki_schil       * NCW/mr30/AnnualisationFactor;
		
		attribute<EUR_Yr> Km30_installatie(BebouwingsObject) := Ki30_installatie * NCW/mr30/AnnualisationFactor; // TODO: toepassen AnnualisationFactor_S1, eWP_AnnualisationFactor_eg
		attribute<EUR_Yr> Km20_installatie(BebouwingsObject) := Ki20_installatie * NCW/mr20/AnnualisationFactor; // TODO: toepassen AnnualisationFactor_S1, eWP_AnnualisationFactor_eg
		attribute<EUR_Yr> Km15_installatie(BebouwingsObject) := Ki15_installatie * NCW/mr15/AnnualisationFactor; // TODO: toepassen AnnualisationFactor_S1, eWP_AnnualisationFactor_eg
		attribute<EUR_Yr> Km_installatie  (BebouwingsObject) := Km30_installatie + Km20_installatie + Km15_installatie;
		
		// TODO:
		// ( VermedenKosten_eg_excl/S_H_T * EIA_Opties/R_SplitIncentiveFactor * BTW_Factor 
		// - GebouwVerbetering_j/S_H_T * S_gv * BTW_Factor_gv - LokaleOpwekking_eg/S_H_T * S_lo * BTW_Factor 
		// + S_ISDE * BTW_Factor 
		// - VentilatieKosten_eg/S_H_T * BTW_Factor 
		// - OnderhoudAdministratie_j/S_H_T * (1.0 - EEA_Opties/S_OenM ) * BTW_Factor ) 
		// * float64( KanSpringen/S_H_T ) 
		
		attribute<EUR_Yr> kosten_j(BebouwingsObject) := 
			Kj_schil  * BTW_Factor_gv
			+ Kj_installatie * BTW_Factor
			+ Kj_verbruik * EIA_Opties/R_SplitIncentiveFactor * BTW_Factor;
			
		attribute<EUR_Yr> kosten_m(BebouwingsObject) := 
			Km_schil  
			+ Km_installatie
			+ Kj_verbruik;
	}
	
	container GebouwOpties := for_each_ne(Classifications/GebouwOptie/Name, 'GebouwOptieT(Classifications/GebouwOptie/V/'+Classifications/GebouwOptie/Name+')');
	
 	attribute<Classifications/GebouwOptie> BesteGebouwOptie(BebouwingsObject):= ='argmin('+AsItemList('GebouwOpties/'+Classifications/GebouwOptie/Name+'/kosten_j')+')[Classifications/GebouwOptie]';
	
	attribute<Classifications/SchilLabel> SchilLabel_rel(BebouwingsObject) := ='merge(BesteGebouwOptie, Classifications/SchilLabel, '+AsItemList('GebouwOpties/'+Classifications/GebouwOptie/Name+'/SchilLabel_rel')+')';
	container InstallatiePerProduct := for_each_nedv(Classifications/Product/Name
		,	replace('merge(BesteGebouwOptie, Classifications/Installatie, '+AsItemList('GebouwOpties/'+Classifications/GebouwOptie/Name+'/InstallatiePerProduct/@P')+')', '@P', Classifications/Product/Name)
		,	BebouwingsObject, Classifications/Installatie
		);
	
	
 	attribute<Classifications/WarmteOptie> WarmteOptie_rel(BebouwingsObject) := 
		Classifications/WarmteOptie/IsGebiedsOptie[beginState/WarmteOptie_rel] || (BesteGebouwOptie == Classifications/GebouwOptie/V/geen)
		?	beginState/WarmteOptie_rel
		:	Classifications/GebouwOptie/WarmteOptie_rel[BesteGebouwOptie];
	
	container statistics {
		attribute<EUR> Ki_lowest_value  (BebouwingsObject) := ='min_elem('+AsItemList('GebouwOpties/'+Classifications/GebouwOptie/Name+'kosten_j')+')';
		attribute<EUR> Ki_lowest_index  (BebouwingsObject) := ='argmin  ('+AsItemList('GebouwOpties/'+Classifications/GebouwOptie/Name+'kosten_j')+')';
		attribute<EUR> Ki_highest_value (BebouwingsObject) := ='max_elem('+AsItemList('GebouwOpties/'+Classifications/GebouwOptie/Name+'kosten_j')+')';
		attribute<EUR> Ki_highest_index (BebouwingsObject) := ='argmax  ('+AsItemList('GebouwOpties/'+Classifications/GebouwOptie/Name+'kosten_j')+')';
	}
	
	container Efficiency
	{	
		container Gebouw
		{
			attribute<units/Ratio> LaatsteWaarde_vast  (BebouwingsObject) :=
				MakeDefined(StartingStateComponent/Efficiency/Gebouw/ResultaatWaarde_vast[StartingState_rel], EnergieVraagModellen/Efficiency/Gebouw[Model_rel]);
			attribute<units/Ratio> LaatsteWaarde_var  (BebouwingsObject) :=
				MakeDefined(StartingStateComponent/Efficiency/Gebouw/ResultaatWaarde_var[StartingState_rel], EnergieVraagModellen/Efficiency/Gebouw[Model_rel]);

			attribute<units/Ratio> VerbeterFactor_vast (BebouwingsObject) :=
					Sprongen/LabelSprong ==  0[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_T/efficiency_vast [Model_rel] :
					Sprongen/LabelSprong ==  1[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_B/efficiency_vast [Model_rel] :
					Sprongen/LabelSprong ==  2[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency_vast[Model_rel] :
					Sprongen/LabelSprong ==  3[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_B/efficiency_vast [Model_rel] :
					Sprongen/LabelSprong ==  4[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency_vast[Model_rel] :
					Sprongen/LabelSprong ==  5[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency_vast[Model_rel] :
					Sprongen/LabelSprong ==  6[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency_vast[Model_rel] : // gebouw als bij 2
					Sprongen/LabelSprong ==  7[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency_vast[Model_rel] : // gebouw als bij 4
					Sprongen/LabelSprong ==  8[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency_vast[Model_rel] : // gebouw als bij 5
					Sprongen/LabelSprong == 10[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency_vast[Model_rel] : // gebouw als bij 2
					Sprongen/LabelSprong == 11[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency_vast[Model_rel] : // gebouw als bij 4
					Sprongen/LabelSprong == 12[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency_vast[Model_rel] : // gebouw als bij 5
					1.0[Ratio];
			attribute<units/Ratio> VerbeterFactor_var (BebouwingsObject) :=
					Sprongen/LabelSprong ==  0[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_T/efficiency_var [Model_rel] :
					Sprongen/LabelSprong ==  1[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_B/efficiency_var [Model_rel] :
					Sprongen/LabelSprong ==  2[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency_var[Model_rel] :
					Sprongen/LabelSprong ==  3[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_B/efficiency_var [Model_rel] :
					Sprongen/LabelSprong ==  4[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency_var[Model_rel] :
					Sprongen/LabelSprong ==  5[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency_var[Model_rel] :
					Sprongen/LabelSprong ==  6[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency_var[Model_rel] : // gebouw als bij 2
					Sprongen/LabelSprong ==  7[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency_var[Model_rel] : // gebouw als bij 4
					Sprongen/LabelSprong ==  8[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency_var[Model_rel] : // gebouw als bij 5
					Sprongen/LabelSprong == 10[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_H_AP/efficiency_var[Model_rel] : // gebouw als bij 2
					Sprongen/LabelSprong == 11[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_T_AP/efficiency_var[Model_rel] : // gebouw als bij 4
					Sprongen/LabelSprong == 12[Classifications/LabelSprong] ? EnergieVraagModellen/Verbeteringen/S_B_AP/efficiency_var[Model_rel] : // gebouw als bij 5
					1.0[Ratio];
			attribute<units/Ratio> ResultaatWaarde_vast (BebouwingsObject) := max_elem(VerbeterFactor_vast, LaatsteWaarde_vast);
			attribute<units/Ratio> ResultaatWaarde_var (BebouwingsObject) := max_elem(VerbeterFactor_var, LaatsteWaarde_var);
		}
		container SPFeWP_S1
		{
			attribute<string>        Variant_S1       (BebouwingsObject) :=		Invoer/RuimtelijkeData/leidraad_oktober_2019/buurt/S1_variant_keuze[planregio_rel];
			attribute<ratio>         LuchtBodemSchuif (BebouwingsObject) :=		Variant_S1 == 's1a'? 1.0[Ratio] : Variant_S1 == 's1b'? 0.0[Ratio] : 0.5[Ratio];
			attribute<Ratio>         R_lucht          (BebouwingsObject) :=		LuchtBodemSchuif;
			attribute<Ratio>         R_bodem          (BebouwingsObject) :=		1.0 - R_lucht;
			
			attribute<Ratio>	SPF_rv_A  (BebouwingsObject) :=	BC_kentallen/Eff_min * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_A_min + R_bodem * Kengetallen/BCkentallen/SPF_BWP_A_min) +
																BC_kentallen/Eff_max * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_A_max + R_bodem * Kengetallen/BCkentallen/SPF_BWP_A_max);
			attribute<Ratio>	SPF_rv_B  (BebouwingsObject) :=	BC_kentallen/Eff_min * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_B_min + R_bodem * Kengetallen/BCkentallen/SPF_BWP_B_min) +
																BC_kentallen/Eff_max * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_B_max + R_bodem * Kengetallen/BCkentallen/SPF_BWP_B_max);
			attribute<Ratio>	SPF_rv_U  (BebouwingsObject) :=	BC_kentallen/Eff_min * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_U_min + R_bodem * Kengetallen/BCkentallen/SPF_BWP_u_min) +
																BC_kentallen/Eff_max * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_U_max + R_bodem * Kengetallen/BCkentallen/SPF_BWP_U_max);
			attribute<Ratio>	SPF_Koude (BebouwingsObject) :=	BC_kentallen/Eff_min * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_Koude_min + R_bodem * Kengetallen/BCkentallen/SPF_BWP_Koude_min) +
																BC_kentallen/Eff_max * (R_lucht * Kengetallen/BCkentallen/SPF_LWP_Koude_max + R_bodem * Kengetallen/BCkentallen/SPF_BWP_Koude_max);
		}
		container RuimteVerwarming
		{
			attribute<units/Ratio> AardGas (BebouwingsObject):= // neem een opgegeven fractie van de Verbetering (Sprongen/Ruimteverwarming/Efficiency geen een maximale waarde)
				Sprongen/RuimteVerwarming/KanVerbeteren
					? Sprongen/RuimteVerwarming/efficiency
					: EnergieVraagModellen/Efficiency/RuimteVerwarming/AardGas[Model_rel];
			attribute<units/Ratio> Warmte (BebouwingsObject) := const(1.0, BebouwingsObject);
			
			
			attribute<units/Ratio>	BeWP_S1       (BebouwingsObject) :=		(BCname == 'BestaandeWoning') || (BCname == 'NieuwbouwWoning') ?
																			SPFeWP_S1/SPF_rv_B : SPFeWP_S1/SPF_rv_U;
			attribute<units/Ratio>	BeWP_org      (BebouwingsObject) :=		(BCname == 'BestaandeWoning') || (BCname == 'NieuwbouwWoning') ?
																			const(BC_kentallen/SPF_RV_B, BebouwingsObject) : const(BC_kentallen/SPF_RV_U, BebouwingsObject);
			attribute<units/Ratio>	AeWP_S1       (BebouwingsObject) :=		(BCname == 'BestaandeWoning') || (BCname == 'NieuwbouwWoning') ?
																			SPFeWP_S1/SPF_rv_A : SPFeWP_S1/SPF_rv_U;																
			attribute<units/Ratio>	AeWP_org      (BebouwingsObject) :=		(BCname == 'BestaandeWoning') || (BCname == 'NieuwbouwWoning') ?
																			const(BC_kentallen/SPF_RV_A, BebouwingsObject) : const(BC_kentallen/SPF_RV_U, BebouwingsObject);
			attribute<units/Ratio>	AeWP          (BebouwingsObject) :=		= Schuiven/LuchtBodemAlsS1 ? 'AewP_S1' : 'AewP_org';
			attribute<units/Ratio>	BeWP          (BebouwingsObject) :=		= Schuiven/LuchtBodemAlsS1 ? 'BewP_S1' : 'BewP_org';
			attribute<units/Ratio>	EWV           (BebouwingsObject) :=		const(BC_kentallen/SPF_EWV,  BebouwingsObject);
		}

		container Koude
		{
			attribute<units/Ratio>	Elektriciteit (BebouwingsObject) :=		EnergieVraagModellen/Efficiency/Koude/Elektriciteit[Model_rel];
			attribute<units/Ratio>	eWP_S1        (BebouwingsObject) :=		SPFeWP_S1/SPF_Koude;
			attribute<units/Ratio>	eWP_org       (BebouwingsObject) :=		const(BC_kentallen/SPF_Koude, BebouwingsObject);
			attribute<units/Ratio>	eWP           (BebouwingsObject) :=		= Schuiven/LuchtBodemAlsS1 ? 'ewP_S1' : 'ewP_org';
		}

		container WarmWater
		{
			attribute<units/Ratio>	AardGas       (BebouwingsObject) :=		EnergieVraagModellen/Efficiency/WarmWater/AardGas[Model_rel];
			attribute<units/Ratio>	Warmte        (BebouwingsObject) :=		const(1.0, BebouwingsObject);
			attribute<units/Ratio>	eWP           (BebouwingsObject) :=		const(BC_kentallen/SPF_WW,  BebouwingsObject);
			attribute<units/Ratio>	EWV           (BebouwingsObject) :=		const(BC_kentallen/SPF_EWV, BebouwingsObject);
		}

		container Apparatuur
		{
			attribute<units/Ratio> Elektriciteit (BebouwingsObject) := EnergieVraagModellen/Efficiency/Apparatuur/Elektriciteit[Model_rel];
		}
	}
	
	container DragerOpties
	{
		container RuimteVerwarming
		{
			// TODO: Wat hiermee te doen ?
			parameter<float64>	Aardgas_leidingverliesfactor	:=	1.0 - Kengetallen/Efficiency/Leidingverlies_RV_aardgas,	Descr = "extra op te wekken warmte door verlies in leidingen binnen gebouw", Source = "Validatiesessies startanalyse 2019"; //TODO source naar FO 4.0
			parameter<float64>	eWP_leidingverliesfactor		:=	1.0 - Kengetallen/Efficiency/Leidingverlies_RV_ewp,		Descr = "extra op te wekken warmte door verlies in leidingen binnen gebouw", Source = "Validatiesessies startanalyse 2019"; //TODO source naar FO 4.0
			
			container vast
			{
				attribute<GJ_yr>	AardGas (BebouwingsObject) :=	Functioneel/RuimteVerwarming_vast / Efficiency/Gebouw/ResultaatWaarde_vast;
				attribute<GJ_yr>	Warmte  (BebouwingsObject) :=	Functioneel/RuimteVerwarming_vast / Efficiency/Gebouw/ResultaatWaarde_vast;
				attribute<GJ_yr>	eWP     (BebouwingsObject) :=	Functioneel/RuimteVerwarming_vast / Efficiency/Gebouw/ResultaatWaarde_vast;
				attribute<GJ_yr>	EWV     (BebouwingsObject) :=	Functioneel/RuimteVerwarming_vast / Efficiency/Gebouw/ResultaatWaarde_vast;
			}

			container var
			{
				attribute<GJ_yr>	AardGas (BebouwingsObject) :=	Functioneel/RuimteVerwarming_var  / Efficiency/Gebouw/ResultaatWaarde_var;
				attribute<GJ_yr>	Warmte  (BebouwingsObject) :=	Functioneel/RuimteVerwarming_var  / Efficiency/Gebouw/ResultaatWaarde_var;
				attribute<GJ_yr>	eWP     (BebouwingsObject) :=	Functioneel/RuimteVerwarming_var  / Efficiency/Gebouw/ResultaatWaarde_var;
				attribute<GJ_yr>	EWV     (BebouwingsObject) :=	Functioneel/RuimteVerwarming_var  / Efficiency/Gebouw/ResultaatWaarde_var;
			}

			attribute<GJ_yr>	AardGas		(BebouwingsObject)	:=	(vast/AardGas + var/AardGas) / (Efficiency/RuimteVerwarming/AardGas * Aardgas_leidingverliesfactor);
			attribute<GJ_yr>	Warmte		(BebouwingsObject)	:=	(vast/Warmte  + var/Warmte ) / Efficiency/RuimteVerwarming/Warmte;
			attribute<GJ_yr>	BeWP		(BebouwingsObject)	:=	(vast/eWP     + var/eWP    ) / (Efficiency/RuimteVerwarming/BeWP * eWP_leidingverliesfactor);
			attribute<GJ_yr>	AeWP		(BebouwingsObject)	:=	(vast/eWP     + var/eWP    ) / (Efficiency/RuimteVerwarming/AeWP * eWP_leidingverliesfactor);
			attribute<GJ_yr>	EWV			(BebouwingsObject)	:=	(vast/EWV     + var/EWV    ) / Efficiency/RuimteVerwarming/EWV;
		}
		container Koude
		{
			attribute<ratio> KoudeInvulling (BebouwingsObject) := const(Vraagkentallen/KoudeInvulling, BebouwingsObject);
			attribute<GJ_yr> Elektriciteit  (BebouwingsObject) := KoudeInvulling * (Functioneel/Koude / Efficiency/Koude/Elektriciteit);
		}
		container WarmWater
		{
			parameter<float64>	Aardgas_leidingverliesfactor	:=	1.0 - Kengetallen/Efficiency/Leidingverlies_WW_aardgas,	Descr = "extra op te wekken warmte door verlies in leidingen binnen gebouw", Source = "Validatiesessies startanalyse 2019"; //TODO source naar FO 4.0
			parameter<float64>	eWP_leidingverliesfactor		:=	1.0 - Kengetallen/Efficiency/Leidingverlies_WW_ewp,		Descr = "extra op te wekken warmte door verlies in leidingen binnen gebouw", Source = "Validatiesessies startanalyse 2019"; //TODO source naar FO 4.0
			
			attribute<GJ_yr> AardGas     (BebouwingsObject) := ((Functioneel/WarmWater - Opwekking/Zonneboiler) / Efficiency/WarmWater/AardGas) / Aardgas_leidingverliesfactor;
			attribute<GJ_yr> Warmte      (BebouwingsObject) := ((Functioneel/WarmWater - Opwekking/Zonneboiler) / Efficiency/WarmWater/Warmte );
			attribute<GJ_yr> eWP         (BebouwingsObject) := ((Functioneel/WarmWater - Opwekking/Zonneboiler) / Efficiency/WarmWater/eWP    ) / eWP_leidingverliesfactor;
			attribute<GJ_yr> EWV         (BebouwingsObject) := ((Functioneel/WarmWater - Opwekking/Zonneboiler) / Efficiency/WarmWater/EWV    );
			attribute<GJ_yr> ZonneBoiler (BebouwingsObject) := Opwekking/Zonneboiler;
		}
		container Warmte
		{
			attribute<GJ_yr> AardGas (BebouwingsObject) := RuimteVerwarming/AardGas + WarmWater/AardGas;
			attribute<GJ_yr> Warmte  (BebouwingsObject) := RuimteVerwarming/Warmte  + WarmWater/Warmte;
			attribute<GJ_yr> BeWP    (BebouwingsObject) := RuimteVerwarming/BeWP    + WarmWater/eWP;
			attribute<GJ_yr> AeWP    (BebouwingsObject) := RuimteVerwarming/AeWP    + WarmWater/eWP;
			attribute<GJ_yr> EWV     (BebouwingsObject) := RuimteVerwarming/EWV     + WarmWater/EWV;
		}
		container Apparatuur
		{
			attribute<GJ_yr>	Zon_PV        (BebouwingsObject)	:=	Opwekking/Zon_PV;
			attribute<GJ_yr>	Elektriciteit (BebouwingsObject)	:=	Functioneel/Apparatuur / Efficiency/Apparatuur/Elektriciteit - Zon_PV;
			attribute<GJ_yr>	Ventilatie    (BebouwingsObject)	:=	Functioneel/Ventilatie;
		}
	}
	container Aandeel
	{
		attribute<float64>  Ventilatie           (BebouwingsObject) := float64(Energielabel/Currvalue <= /Classifications/energielabel/V/LabelB || Energielabel/Currvalue == /Classifications/energielabel/V/BeWP);
		attribute<Ratio>    Electric             (BebouwingsObject) := Opwekking/eWP + Opwekking/EWV;
		attribute<Ratio>    Electric_mWKK        (BebouwingsObject) := Electric + Opwekking/mWKK;
		attribute<Ratio>    IndividueleOpwekking (BebouwingsObject) := Electric_mWKK + Opwekking/hWP, IntegrityCheck = "this <= 1.0";
		attribute<float64>  WarmteVraag          (BebouwingsObject) := min_elem(RuimtelijkeVraagComponent/AandeelWarmteVraag, 1.0 - IndividueleOpwekking);
		attribute<float64>  NietDeelnemers       (BebouwingsObject) := 1.0 - WarmteVraag;
		attribute<float64>  Gas                  (BebouwingsObject) := 1.0 - max_elem(float64(Classifications/WarmteOptie/isGebiedsOptie[WarmteAllocatie]), Electric);
	}
	
	container OpwekkingsOpties
	{
		container bereidheid
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject) := const(LocatieSpecifiekeOpties/OpwekkingF/Zon_PV,      BebouwingsObject);
			attribute<Ratio> ZonneBoiler(BebouwingsObject) := const(LocatieSpecifiekeOpties/OpwekkingF/ZonneBoiler, BebouwingsObject);
		}
		container org_capaciteit
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject) := MakeDefined(StartingStateComponent/OpwekkingsOpties/capaciteit/Zon_PV     [StartingState_rel], 0[Ratio]);
			attribute<Ratio> ZonneBoiler(BebouwingsObject) := MakeDefined(StartingStateComponent/OpwekkingsOpties/capaciteit/ZonneBoiler[StartingState_rel], 0[Ratio]);
		}
		container investering
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject) := median(0.0, bereidheid/Zon_PV      - org_capaciteit/Zon_PV,      1.0[Ratio] - org_capaciteit/Zon_PV);
			attribute<Ratio> ZonneBoiler(BebouwingsObject) := median(0.0, bereidheid/ZonneBoiler - org_capaciteit/ZonneBoiler, 1.0[Ratio] - org_capaciteit/ZonneBoiler);
		}
		container capaciteit
		{
			attribute<Ratio> Zon_PV     (BebouwingsObject) := org_capaciteit/Zon_PV      + investering/Zon_PV;
			attribute<Ratio> ZonneBoiler(BebouwingsObject) := org_capaciteit/ZonneBoiler + investering/ZonneBoiler;
		}
	}

	container Hoeveelheden
	{
		attribute<m2>      ZonneBoiler (BebouwingsObject) := RuimtelijkeVraagComponent/oppervlakte * OpwekkingsOpties/capaciteit/ZonneBoiler * BC_kentallen/R_ZonB_opp  [BebouwingsType];
		attribute<m2>      Zon_PV      (BebouwingsObject) := RuimtelijkeVraagComponent/oppervlakte * OpwekkingsOpties/capaciteit/Zon_PV      * BC_kentallen/m2dak_m2bvo [BebouwingsType];
	
		attribute<nrAansl> mWKK        (BebouwingsObject) := RuimtelijkeVraagComponent/nrAansluitingen * Opwekking/mWKK;
		attribute<nrAansl> hWP         (BebouwingsObject) := RuimtelijkeVraagComponent/nrAansluitingen * Opwekking/hWP;
	}

	container BC_kentallen :=	kengetallen/BCkentallen/BC_kentallen(
									Schuiven/LuchtBodemSchuif,
									Schuiven/EfficiencySchuif,
									LeerCurves/eWPlw/Curve,
									LeerCurves/eWPww/Curve,
									LeerCurves/hWP/Curve,
									LeerCurves/ZonPV/Curve,
									LeerCurves/ZonB/Curve,
									LeerCurves/mWKK/Curve,
									LeerCurves/LTAS/Curve,
									Schuiven/KostenMin,
									Schuiven/KostenMax,
									BCname,
									BebouwingsTypeDomein);
	container SchilLabel
	{
		attribute<Classifications/SchilLabel> LastValue    (BebouwingsObject) := StartingStateComponent/SchilLabel_rel[StartingState_rel];
		attribute<Classifications/SchilLabel> CurrValue    (BebouwingsObject) := Sprongen/NaarEnergieLabel;
		attribute<bool>                       WasChanged   (BebouwingsObject) := StartingStateComponent/EnergieLabel/IsChanged[StartingState_rel];
		attribute<bool>                       IsChangedNow (BebouwingsObject) := LastValue != CurrValue;
		attribute<bool>                       IsChanged    (BebouwingsObject) := WasChanged || IsChangedNow;
	}
		
	#include<Sprongen.dms>

	container Opwekking
	{
		attribute<GJ_yr> ZonneBoiler (BebouwingsObject) := Hoeveelheden/ZonneBoiler * kengetallen/Constanten/Opbr_zonB_GJ;
		attribute<GJ_yr> Zon_PV      (BebouwingsObject) := Hoeveelheden/Zon_PV      * kengetallen/Constanten/Opbr_zonPV_GJ;

		attribute<Ratio> BeWP (BebouwingsObject) := value(Sprongen/BeWP, Ratio);
		attribute<Ratio> AeWP (BebouwingsObject) := value(Sprongen/AeWP, Ratio);
		attribute<Ratio> eWP  (BebouwingsObject) := BeWP + AeWP;
		attribute<Ratio> EWV  (BebouwingsObject) := value(Sprongen/EWV, Ratio);
		attribute<Ratio> mWKK (BebouwingsObject) := min_elem(OpwekkingsOpties/Capaciteit/mWKK, 1.0 - EWV - eWP);
		attribute<Ratio> hWP  (BebouwingsObject) := min_elem(OpwekkingsOpties/Capaciteit/hWP,  1.0 - EWV - eWP -mWKK);
	}
	
	attribute<Classifications/WarmteOptie> WarmteAllocatie(BebouwingsObject) := WarmteOptie_rel; // REMOVE, OBOLETE: gebruik WamteOptie_rel direct.
	// voor info over gebruik hWP etc voor RW gelieve de resulterende PerProductAsTable te raadplegen
	
	attribute<Eur_yr>                      KoudeAllocatie   (BebouwingsObject) := const( 0[Eur_yr], BebouwingsObject);
	attribute<Eur_yr>                      Om_Comfort       (BebouwingsObject) := const( 0[Eur_yr], BebouwingsObject); //placeholders om statenaallocatie te kunnen initialiseren, todo: remove
	
	
/*	
	Classifications/WarmteOptie/isGebiedsOptie[WamteOptie_rel]
		? WarmteAllocatie_Org
		: Classifications/EnergieLabel/WarmteOptie_rel[EnergieLabel/CurrValue] != 0[Classifications/WarmteOptie] ? Classifications/EnergieLabel/WarmteOptie_rel[EnergieLabel/CurrValue]
		: Hoeveelheden/hWP  > 0d ? 3[Classifications/WarmteOptie]
		: Hoeveelheden/mWKK > 0d ? 1[Classifications/WarmteOptie] : 0[Classifications/WarmteOptie];
*/
	attribute<string>	WarmteOptie		(BebouwingsObject)	:=	Classifications/WarmteOptie/name[WarmteAllocatie];
	
	container Kosten
	{
		attribute<Eur>	Ki_ZonneBoiler  (BebouwingsObject) :=	Hoeveelheden/ZonneBoiler  * BC_kentallen/Ki_ZonB;
		attribute<Eur>	Ki_Zon_PV       (BebouwingsObject) :=	Hoeveelheden/Zon_PV       * BC_kentallen/Ki_ZonPV;
		attribute<Eur>	Ki_mWKK         (BebouwingsObject) :=	Hoeveelheden/mWKK         * BC_kentallen/Ki_mWKK;
		attribute<Eur>	Ki_hWP_var      (BebouwingsObject) :=	Hoeveelheden/hWP > 0d ? RuimtelijkeVraagComponent/Aansluitcapaciteit/RV * BC_kentallen/Ki_hWP_var : 0[eur];
		attribute<Eur>	Ki_hWP_vast     (BebouwingsObject) :=	Hoeveelheden/hWP          * BC_kentallen/Ki_hWP_vast;
		attribute<Eur>	Ki_hWP          (BebouwingsObject) :=	Ki_hWP_var + Ki_hWP_vast;
		attribute<Eur>	Ki_eWP          (BebouwingsObject) :=	RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_eWP;
		attribute<Eur>	Ki_EWV          (BebouwingsObject) :=	RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_EWV;
		attribute<Eur>	Oi_HR           (BebouwingsObject) :=	WarmteAllocatie != 0[Classifications/WarmteOptie] ? 
																(1[Ratio] - Kengetallen/constanten/afschrijving_resterend) * Sprongen/Ki_HR : 0[eur];

		attribute<Ratio> fractie_afschrijftermijn_15jaar (BebouwingsObject) :=	= Schuiven/LuchtBodemAlsS1 ? 'Sprongen/AnnualisationFactor_S1/fractie_afschrijftermijn_15jaar' : 'const(BC_kentallen/fractie_afschrijftermijn_15jaar, BebouwingsObject)';														
		attribute<Ratio> fractie_afschrijftermijn_30jaar (BebouwingsObject) :=	= Schuiven/LuchtBodemAlsS1 ? 'Sprongen/AnnualisationFactor_S1/fractie_afschrijftermijn_30jaar' : 'const(BC_kentallen/fractie_afschrijftermijn_30jaar, BebouwingsObject)';
		
		attribute<Eur> Ki_LokaleOpwekking30 (BebouwingsObject) := Ki_ZonneBoiler + Ki_Zon_PV + Ki_EWV + fractie_afschrijftermijn_30jaar * Ki_eWP;
		attribute<Eur> Ki_LokaleOpwekking15 (BebouwingsObject) := Ki_mWKK + Ki_hWP + fractie_afschrijftermijn_15jaar * Ki_eWP;
		
		attribute<Eur> Ki_GebouwVerbetering (BebouwingsObject) := RuimtelijkeVraagComponent/nrModelUnits * Sprongen/Ki_gv; // cumulatief
		attribute<Eur_yr> Kj_gv_incentive   (BebouwingsObject) := Sprongen/Incentive_eigenaar_excl + StartingStateComponent/Kosten/Kj_gv_incentive[StartingState_rel];

		attribute<Eur> Ki_LokaleOpwekking   (BebouwingsObject) := Ki_LokaleOpwekking30 + Ki_LokaleOpwekking15;
		attribute<Eur> Ki_Totaal            (BebouwingsObject) := Ki_LokaleOpwekking + Ki_GebouwVerbetering;
	}
	
	container WarmteVraag
	{
		attribute<bool> KanGebiedsoptie (BebouwingsObject) := Classifications/GebouwOptie/kanGebiedsOptie[Results/CurrentOptie];
		
		container deelnemers
		{
			attribute<nrAansl>   NrAansluitingen    (BebouwingsObject) := float64(KanGebiedsoptie) * RuimtelijkeVraagComponent/AandeelWarmteVraag * RuimtelijkeVraagComponent/nrAansluitingen;
			attribute<m2>        Oppervlakte        (BebouwingsObject) := float64(KanGebiedsoptie) * RuimtelijkeVraagComponent/AandeelWarmteVraag * RuimtelijkeVraagComponent/Oppervlakte;
			attribute<kW>        AansluitCapaciteit (BebouwingsObject) := float64(KanGebiedsoptie) * RuimtelijkeVraagComponent/AandeelWarmteVraag * RuimtelijkeVraagComponent/AansluitCapaciteit/Warmte;
			attribute<GJ_yr>     Verbruik           (BebouwingsObject) := float64(KanGebiedsoptie) * RuimtelijkeVraagComponent/AandeelWarmteVraag * Verbruik_RV + Verbruik_WW;
			attribute<GJ_yr>     Verbruik_RV        (BebouwingsObject) := float64(KanGebiedsoptie) * RuimtelijkeVraagComponent/AandeelWarmteVraag * results/Functioneel/Vj_RV;
			attribute<GJ_yr>     Verbruik_WW        (BebouwingsObject) := float64(KanGebiedsoptie) * RuimtelijkeVraagComponent/AandeelWarmteVraag * results/Functioneel/Vj_TW;
		}

		container alle
		{
			attribute<nrAansl>   NrAansluitingen    (BebouwingsObject) := RuimtelijkeVraagComponent/AandeelWarmteVraag * RuimtelijkeVraagComponent/nrAansluitingen;
			attribute<kW>        AansluitCapaciteit (BebouwingsObject) := RuimtelijkeVraagComponent/AandeelWarmteVraag * RuimtelijkeVraagComponent/AansluitCapaciteit/Warmte;
			attribute<GJ_yr>     Verbruik           (BebouwingsObject) := RuimtelijkeVraagComponent/AandeelWarmteVraag * results/Functioneel/Vj_RV + results/Functioneel/Vj_TW;
			attribute<m2>        Oppervlakte        (BebouwingsObject) := RuimtelijkeVraagComponent/AandeelWarmteVraag * RuimtelijkeVraagComponent/Oppervlakte;
		}
	}

	container Warmtewet
	{
		unit<uint32> GasVerbruikers := subset(results/Aansluitingen/Gnet > 0.0)
		{
			attribute<GJ_yr> Vj_gas    := Results/Metervraag/gas[nr_OrgEntity];
			attribute<GJ_yr> Vj_warmte := Results/Functioneel/Vj_RV[nr_OrgEntity] + Results/Functioneel/Vj_TW[nr_OrgEntity];
			//TODO bij Vj_warmte aftrek eventuele installaties die al een deel van de vraag vullen binnen deze groep (bijv Zonneboilers)
		}
		parameter<float64> PrijsFactor_impl :=  sum(GasVerbruikers/Vj_gas) / sum(GasVerbruikers/Vj_warmte) * Voorkeuren/MinderDanAndersFactor;
		parameter<float64> PrijsFactor_corr :=  MakeDefined(PrijsFactor_impl, 1.25);
		parameter<float64> PrijsFactor      :=  = 'BebouwingsComponenten/'+rjoin(BCname, Classifications/BebouwingsComponent/name, Classifications/BebouwingsComponent/name[Classifications/BebouwingsComponent/Warmtewet_BC_rel])+'/Warmtewet/PrijsFactor_corr';

		parameter<Eur_GJ> WarmtePrijs := = Voorkeuren/IsVasteWarmtePrijs 
			? 'Voorkeuren/VasteWarmtePrijs'
			: 'PrijsFactor * PrijzenAardgas/KGJ_eindgebruik_excl[classify(0[GJ_yr], PrijzenAardgas/ClassBreak)]';
	}
	
	container Results
	{
		attribute<Classifications/GebouwOptie> CurrentOptie (BebouwingsObject) := BesteGebouwOptie;
		attribute<Classifications/Schillabel > CurrentLabel (BebouwingsObject) := const(Classifications/schillabel/V/b, BebouwingsObject); //TODO Maarten
		
		container Installaties := InstallatiePerProduct
		{
			attribute<Classifications/Installatie> Dak (BebouwingsObject) := const(Classifications/Installatie/V/VR, BebouwingsObject); //TODO Maarten
		}
		container BemeterdeGebouwInput_rel :=  for_each_nedv(Classifications/Product/Name
			,	replace('merge(CurrentOptie, Classifications/BemeterdeGebouwInput, '+AsItemList('GebouwOpties/'+Classifications/GebouwOptie/Name+'/BemeterdeGebouwInput_rel/@P')+')', '@P', Classifications/Product/Name)
			,	BebouwingsObject, Classifications/BemeterdeGebouwInput
			);
		
		container Aansluitingen
		{
			attribute<bool>    IsHybride     (BebouwingsObject) := const(false, bebouwingsObject); //TODO relateren aan gebouwoptie die gekozen is - Maarten
			attribute<bool>    IsAllElectric (BebouwingsObject) := 
				BemeterdeGebouwInput_rel/RVb == Classifications/BemeterdeGebouwInput/V/e
			&&	BemeterdeGebouwInput_rel/RVp == Classifications/BemeterdeGebouwInput/V/e
			&&	BemeterdeGebouwInput_rel/TWb == Classifications/BemeterdeGebouwInput/V/e
			&&	BemeterdeGebouwInput_rel/TWp == Classifications/BemeterdeGebouwInput/V/e;
			
			attribute<nrAansl> Gnet          (BebouwingsObject) := Metervraag/gas <= 0.0[GJ_yr] ? 0.0[nrAansl] : RuimtelijkeVraagComponent/nraansluitingen;
			attribute<nrAansl> H2net         (BebouwingsObject) := 0.0 * RuimtelijkeVraagComponent/nraansluitingen; //TODO, bijhouden H2 aansluitingen
			attribute<nrAansl> Enet_app      (BebouwingsObject) := float64(!IsHybride && !IsAllElectric)  * RuimtelijkeVraagComponent/nraansluitingen;  // alleen apparatuur
			attribute<nrAansl> Enet_hwp      (BebouwingsObject) := float64(IsHybride)                     * RuimtelijkeVraagComponent/nraansluitingen;  // apparatuur en hybride systeem
			attribute<nrAansl> Enet_ewp      (BebouwingsObject) := float64(IsAllElectric)                 * RuimtelijkeVraagComponent/nraansluitingen;  // apparatuur en volledig elektrisch verwarmd
		}
		container Functioneel
		{
			attribute<GJ_yr> Vj_RV   (BebouwingsObject) := ='merge(CurrentOptie, GJ_Yr, '+AsItemList('GebouwOpties/'+Classifications/GebouwOptie/Name+'/Functioneel/RV')+')';
			attribute<GJ_yr> Vj_TW   (BebouwingsObject) := ='merge(CurrentOptie, GJ_Yr, '+AsItemList('GebouwOpties/'+Classifications/GebouwOptie/Name+'/Functioneel/TW')+')';
			attribute<GJ_yr> Vj_K    (BebouwingsObject) := ='merge(CurrentOptie, GJ_Yr, '+AsItemList('GebouwOpties/'+Classifications/GebouwOptie/Name+'/Functioneel/K')+')';
			attribute<GJ_yr> Vj_Vent (BebouwingsObject) := const(0.0 [GJ_yr], BebouwingsObject); //TODO Maarten
			attribute<GJ_yr> Vj_App  (BebouwingsObject) := RuimtelijkeVraagComponent/Functioneel/EA;
		}
		container Metervraag := for_each_nedv(Classifications/BemeterdeGebouwInput/Name
			,	replace('merge(CurrentOptie, GJ_Yr, '+AsItemList('GebouwOpties/'+Classifications/GebouwOptie/Name+'/metervraag/@I')+')', '@I', Classifications/BemeterdeGebouwInput/Name)
			,	BebouwingsObject, GJ_yr
			);
			
		container Eenmalig
		{
			//Aansluitbijdrages
			attribute<Eur>   Ki_Asl_Enet (BebouwingsObject) :=  BC_kentallen/Ki_Aansl_e_asl * RuimtelijkeVraagComponent/nraansluitingen
															+   BC_kentallen/Ki_Aansl_e_opp * RuimtelijkeVraagComponent/oppervlakte;
			attribute<Eur>   Ki_Asl_Gnet (BebouwingsObject) :=  Metervraag/gas <= 0.0[GJ_yr] ? 0.0[Eur] :
																BC_kentallen/Ki_Aansl_g_asl * RuimtelijkeVraagComponent/nraansluitingen
															+   BC_kentallen/Ki_Aansl_g_opp * RuimtelijkeVraagComponent/oppervlakte;
		
			//Investeringen
			attribute<Eur>   Ki_LO_30   (BebouwingsObject) := const(0.0 [Eur], BebouwingsObject); //TODO Maarten
			attribute<Eur>   Ki_LO_20   (BebouwingsObject) := const(0.0 [Eur], BebouwingsObject); //TODO Maarten
			attribute<Eur>   Ki_LO_15   (BebouwingsObject) := const(0.0 [Eur], BebouwingsObject); //TODO Maarten
			attribute<Eur>   Ki_GV      (BebouwingsObject) := const(0.0 [Eur], BebouwingsObject); //TODO Maarten
		
			//Subsidies
			attribute<Eur>   Oi_s_LO_30 (BebouwingsObject) := const(0.0 [Eur], BebouwingsObject); //TODO Maarten
			attribute<Eur>   Oi_s_LO_20 (BebouwingsObject) := const(0.0 [Eur], BebouwingsObject); //TODO Maarten
			attribute<Eur>   Oi_s_LO_15 (BebouwingsObject) := const(0.0 [Eur], BebouwingsObject); //TODO Maarten
			attribute<Eur>   Oi_s_GV    (BebouwingsObject) := const(0.0 [Eur], BebouwingsObject); //TODO Maarten
		}
		container Kapitaallasten
		{
			//Aansluitbijdrages
			attribute<Eur_yr> Kji_Asl_Enet (BebouwingsObject) := Eenmalig/Ki_Asl_Enet * NcwRefs/_50/AnnualisationFactor;
			attribute<Eur_yr> Kmi_Asl_Enet (BebouwingsObject) := Eenmalig/Ki_Asl_Enet * NCW/mr50/AnnualisationFactor;
			attribute<Eur_yr> Kji_Asl_Gnet (BebouwingsObject) := Eenmalig/Ki_Asl_Gnet * NcwRefs/_50/AnnualisationFactor;
			attribute<Eur_yr> Kmi_Asl_Gnet (BebouwingsObject) := Eenmalig/Ki_Asl_Gnet * NCW/mr50/AnnualisationFactor;
			
			//Investeringen			
			attribute<Eur_yr> Kji_LO_30 (BebouwingsObject) := Eenmalig/Ki_LO_30 * NcwRefs/_30/AnnualisationFactor;
			attribute<Eur_yr> Kmi_LO_30 (BebouwingsObject) := Eenmalig/Ki_LO_30 * NCW/mr30/AnnualisationFactor;
			attribute<Eur_yr> Kji_LO_20 (BebouwingsObject) := Eenmalig/Ki_LO_20 * NcwRefs/_20/AnnualisationFactor;
			attribute<Eur_yr> Kmi_LO_20 (BebouwingsObject) := Eenmalig/Ki_LO_20 * NCW/mr20/AnnualisationFactor;
			attribute<Eur_yr> Kji_LO_15 (BebouwingsObject) := Eenmalig/Ki_LO_15 * NcwRefs/_15/AnnualisationFactor;
			attribute<Eur_yr> Kmi_LO_15 (BebouwingsObject) := Eenmalig/Ki_LO_15 * NCW/mr15/AnnualisationFactor;
			attribute<Eur_yr> Kji_gv    (BebouwingsObject) := Eenmalig/Ki_gv    * NcwRefs/_30/AnnualisationFactor;
			attribute<Eur_yr> Kmi_gv    (BebouwingsObject) := Eenmalig/Ki_gv    * NCW/mr30/AnnualisationFactor;
			
			//Subsidies
			attribute<Eur_yr> Oji_s_LO_30 (BebouwingsObject) := Eenmalig/Oi_s_LO_30 * NcwRefs/_30/AnnualisationFactor;
			attribute<Eur_yr> Oji_s_LO_20 (BebouwingsObject) := Eenmalig/Oi_s_LO_20 * NcwRefs/_20/AnnualisationFactor;
			attribute<Eur_yr> Oji_s_LO_15 (BebouwingsObject) := Eenmalig/Oi_s_LO_15 * NcwRefs/_15/AnnualisationFactor;
			attribute<Eur_yr> Oji_s_gv    (BebouwingsObject) := Eenmalig/Oi_s_gv    * NcwRefs/_30/AnnualisationFactor;
		}
		container Jaarlijks
		{
			//Vastrecht en korting
			attribute<Eur_yr> Kj_vastrecht_E (BebouwingsObject) := Opbrengsten/VastRechtBijdrageE;
			attribute<Eur_yr> Kj_vastrecht_G (BebouwingsObject) := Metervraag/gas <= 0.0[GJ_yr] ? 0.0[Eur_yr] : Opbrengsten/VastRechtBijdrageG;
			attribute<Eur_yr> Oj_Hkorting_E  (BebouwingsObject) := Opbrengsten/HeffingskortingE;
			
			//Elektriciteit
			attribute<classifications/gebruiksgrootteklasse> e_gebruiksgrootteklasse_rel (BebouwingsObject) := classify(Metervraag/e, Prijzen/Elektriciteit/Staffel/ClassBreak);
			attribute<Eur_yr> Kj_e       (BebouwingsObject) := Metervraag/e * Prijzen/Elektriciteit/Staffel/KGJ_eindgebruik_excl[e_gebruiksgrootteklasse_rel];
			attribute<Eur_yr> Km_e       (BebouwingsObject) := Metervraag/e * Prijzen/Elektriciteit/Staffel/KGJ_maatschappelijk [e_gebruiksgrootteklasse_rel];
			attribute<Eur_yr> Kj_e_EH    (BebouwingsObject) := Metervraag/e * Prijzen/Elektriciteit/Staffel/KGJ_EnergieHeffing[e_gebruiksgrootteklasse_rel];
			attribute<Eur_yr> Kj_e_CO2   (BebouwingsObject) := Metervraag/e * Prijzen/Elektriciteit/Staffel/KGJ_CO2Heffing[e_gebruiksgrootteklasse_rel];

			//Gas
			attribute<classifications/gebruiksgrootteklasse> g_gebruiksgrootteklasse_rel (BebouwingsObject) := classify(Metervraag/gas, Prijzen/Aardgas/Staffel/ClassBreak);
			attribute<Eur_yr> Kj_gas     (BebouwingsObject) := Metervraag/gas * Prijzen/Aardgas/Staffel/KGJ_eindgebruik_excl[e_gebruiksgrootteklasse_rel];
			attribute<Eur_yr> Km_gas     (BebouwingsObject) := Metervraag/gas * Prijzen/Aardgas/Staffel/KGJ_maatschappelijk [e_gebruiksgrootteklasse_rel];
			attribute<Eur_yr> Kj_gas_EH  (BebouwingsObject) := Metervraag/gas * Prijzen/Aardgas/Staffel/KGJ_EnergieHeffing[e_gebruiksgrootteklasse_rel];
			attribute<Eur_yr> Kj_gas_CO2 (BebouwingsObject) := Metervraag/gas * Prijzen/Aardgas/Staffel/KGJ_CO2Heffing[e_gebruiksgrootteklasse_rel];
			
			//Overige dragers TODO: linken aan eventuele verbruiken
			attribute<Eur_yr> Kj_H2        (BebouwingsObject) := const(0.0 [Eur_yr], BebouwingsObject); //TODO relateren verbruik en : invoer/energieprijzen/Overig/results/Waterstof [rlookup(RekenJaar_jaar,invoer/energieprijzen/Overig/results/jaar)];
			attribute<Eur_yr> Kj_kolen     (BebouwingsObject) := const(0.0 [Eur_yr], BebouwingsObject); //TODO relateren verbruik en : invoer/energieprijzen/Overig/results/Kolen_Excl[rlookup(RekenJaar_jaar,invoer/energieprijzen/Overig/results/jaar)];
			attribute<Eur_yr> Kj_kolen_CO2 (BebouwingsObject) := const(0.0 [Eur_yr], BebouwingsObject); //TODO relateren verbruik en : invoer/energieprijzen/Overig/results/Kolen_CO2 [rlookup(RekenJaar_jaar,invoer/energieprijzen/Overig/results/jaar)];
			attribute<Eur_yr> Kj_pellets   (BebouwingsObject) := const(0.0 [Eur_yr], BebouwingsObject); //TODO relateren verbruik en : invoer/energieprijzen/Overig/results/Pellets   [rlookup(RekenJaar_jaar,invoer/energieprijzen/Overig/results/jaar)];
			attribute<Eur_yr> Kj_biomassa  (BebouwingsObject) := const(0.0 [Eur_yr], BebouwingsObject); //TODO relateren verbruik en : invoer/energieprijzen/Overig/results/Biomasssa [rlookup(RekenJaar_jaar,invoer/energieprijzen/Overig/results/jaar)]; 
		
			//Onderhoud installaties
			attribute<Eur_yr> Kj_OH_LO   (BebouwingsObject) := const(0.0 [Eur_yr], BebouwingsObject); //TODO Maarten
		}
	}
}
