template GebouwOptieT {
	// Begin case parameters
	unit<uint32> BebouwingsObject;
	parameter<Classifications/GebouwOptie> GebouwOptie_rel;
	parameter<string> Criterium_expr;
	// End case parameters
	
	parameter<Classifications/DoelLabel  > DoelLabel_rel         := Classifications/GebouwOptie/DoelLabel_rel[GebouwOptie_rel];
	parameter<Classifications/SchilLabel> SchilLabel_rel_formeel := Classifications/DoelLabel/SchilLabel_rel[DoelLabel_rel];
	attribute<Classifications/Installatie> Installatie_rel(Classifications/Product) := 
		= 'union_data(Classifications/Product, ' + AsItemList('Classifications/GebouwOptie/Installatie_rel/'+Classifications/Product/Name+'[GebouwOptie_rel]') + ')';
	
	parameter<bool> AltijdSprong := (DoelLabel_rel == Classifications/DoelLabel/V/A) && all(Installatie_rel != Classifications/Installatie/V/geen);
	parameter<bool> SomsSprong   := (DoelLabel_rel != Classifications/DoelLabel/V/geen);
	parameter<string> SprongSuffix := AltijdSprong ? '[0[SchilLabelDomain]]' : '';
	unit<uint32> SchilLabelDomain := =AltijdSprong ? 'range(UInt32, 0, 1)' : 'BebouwingsObject';
	
	attribute<Classifications/SchilLabel > SchilLabel_rel(SchilLabelDomain) := 
		= AltijdSprong ? 'union_data(SchilLabelDomain, SchilLabel_rel_formeel)'
		: SomsSprong   ? 'min_elem(BebouwingsObject/schillabel_rel, SchilLabel_rel_formeel)'
		:                'BebouwingsObject/schillabel_rel'
		;
	
	// InstallatiePerProduct geeft per BebouwingsObject of per SchilLabel voor ieder Product de te kiezen of al aanwezige installatie
	container InstallatiePerProduct := for_each_nedv(Classifications/Product/Name
	,   Installatie_rel != Classifications/Installatie/V/geen 
		? 'const(Classifications/Installatie/V/' + Classifications/Installatie/Name[Installatie_rel] + ', SchilLabelDomain)' 
		: 'bebouwingsObject/InstallatiePerProduct/' + Classifications/Product/Name
	,	SchilLabelDomain, Classifications/Installatie
	);


	// Performance_rel geeft per BebouwingsObject of per SchilLabel voor ieder Product het performance profiel obv (InstallatieNaam, SchilLabel of x, ProductType {RV, TW of K} )
	container Performance_key1 := for_each_nedv(Classifications/Product/Name
		,	'Classifications/Installatie/Name[InstallatiePerProduct/'+Classifications/Product/Name+']+''.'' + Classifications/SchilLabel/Name[SchilLabel_rel] + ''.' + Classifications/Product/TypeName+''''
		,	SchilLabelDomain, string
		), isHidden = "True";
	container Performance_key2 := for_each_nedv(Classifications/Product/Name
		,	'Classifications/Installatie/Name[InstallatiePerProduct/'+Classifications/Product/Name+']+''.x.' + Classifications/Product/TypeName+''''
		,	SchilLabelDomain, string
		), isHidden = "True";	
	container PerformancePerProduct := for_each_nedv(Classifications/Product/Name
		,	replace(
				'MakeDefined('
					'rlookup(Performance_key1/@P, Classifications/Performance/code), '
					'rlookup(Performance_key2/@P, Classifications/Performance/code),'
					'rlookup(''geen.x.x'', Classifications/Performance/code)'
				')'
			, '@P', Classifications/Product/Name)
		,	SchilLabelDomain, Classifications/Performance
		);	
	
	// cap_prod geeft per BebouwingsObject of per SchilLabel voor ieder Product de benodigde capaciteit obv het vastgestelde profiel.
	container CapaciteitPerProduct {
		attribute<kW> RVb (SchilLabelDomain):= BebouwingsObject/AansluitCapaciteit/RV * Classifications/Performance/P_cap[PerformancePerProduct/RVb];
		attribute<kW> TWb (SchilLabelDomain):= BebouwingsObject/AansluitCapaciteit/TW * Classifications/Performance/P_cap[PerformancePerProduct/TWb];
		attribute<kW> Kb  (SchilLabelDomain):= BebouwingsObject/AansluitCapaciteit/K  * Classifications/Performance/P_cap[PerformancePerProduct/Kb];
		attribute<kW> RVp (SchilLabelDomain):= BebouwingsObject/AansluitCapaciteit/RV - RVb;
		attribute<kW> TWp (SchilLabelDomain):= BebouwingsObject/AansluitCapaciteit/TW - TWb;
		attribute<kW> Kp  (SchilLabelDomain):= BebouwingsObject/AansluitCapaciteit/K  - Kb;
	}

	container CapaciteitPerInstallatie := for_each_nedv(Classifications/Installatie/Name
	,	replace('max_elem('
				'add(CapaciteitPerProduct/RVb * Float64(InstallatiePerProduct/RVb == @VI), CapaciteitPerProduct/RVp * Float64(InstallatiePerProduct/RVp == @VI)), '
				'add(CapaciteitPerProduct/TWb * Float64(InstallatiePerProduct/TWb == @VI), CapaciteitPerProduct/TWp * Float64(InstallatiePerProduct/TWp == @VI)), '
				'add(CapaciteitPerProduct/Kb  * Float64(InstallatiePerProduct/Kb  == @VI), CapaciteitPerProduct/Kp  * Float64(InstallatiePerProduct/Kp  == @VI)) '
			')'
		,	'@VI', 'Classifications/Installatie/V/' + Classifications/Installatie/Name)
	,	SchilLabelDomain, kW
	);
	
	parameter<string> KX_cap_Expr := 
		'add('+
			AsItemList(
				replace('CapaciteitPerInstallatie/@I * VerbruiksOpties/Installatie/K@X_cap[Classifications/Installatie/V/@I]'
				, '@I', Classifications/Installatie/Name)
			)+
		')'
	,	isHidden = "True";
	
	attribute<EUR   > Ki_cap    (BebouwingsObject) := =replace(KX_cap_Expr, '@X', 'i');
	attribute<EUR   > Ki30_cap  (BebouwingsObject) := =replace(KX_cap_Expr, '@X', 'i30');
	attribute<EUR   > Ki20_cap  (BebouwingsObject) := =replace(KX_cap_Expr, '@X', 'i20');
	attribute<EUR   > Ki15_cap  (BebouwingsObject) := =replace(KX_cap_Expr, '@X', 'i15');
	attribute<EUR_yr> Kj_OH_cap (BebouwingsObject) := =replace(KX_cap_Expr, '@X', 'j_OH');
	attribute<EUR_yr> Kj_Adm_cap(BebouwingsObject) := =replace(KX_cap_Expr, '@X', 'j_Adm');
	
	// TODO, OPTIMIZE, CONSIDER bepaling LTAS_vereist, of uberhaupt mogelijk, per SchilLabel.
	attribute<bool> LTAS_vereist(BebouwingsObject) := 
		Classifications/Performance/AfgifteSysteem_rel[PerformancePerProduct/RVb] == Classifications/AfgifteSysteem/V/LTAS
	||	Classifications/Performance/AfgifteSysteem_rel[PerformancePerProduct/RVp] == Classifications/AfgifteSysteem/V/LTAS;
	attribute<bool> LTAS_aanwezig(BebouwingsObject) := bebouwingsObject/AfgifteSysteem_rel == Classifications/AfgifteSysteem/V/LTAS;
	
	attribute<EUR   > Ki_LTAS   (BebouwingsObject) := (LTAS_vereist && not(LTAS_aanwezig))
		?	(BebouwingsObject/IsHoogbouw ? BC_kentallen/Ki_LTAS_h_asl : BC_kentallen/Ki_LTAS_l_asl) * BebouwingsObject/nrAansluitingen
			+ BC_kentallen/Ki_LTAS_opp * BebouwingsObject/Oppervlakte
		:	const(0[EUR], BebouwingsObject);
	
	parameter<string> KX_expr := 
		'add('
			'VerbruiksOpties/GebouwOptie/K@X_asl[GebouwOptie_rel] * BebouwingsObject/nrAansluitingen,  '
			'VerbruiksOpties/GebouwOptie/K@X_opp[GebouwOptie_rel] * BebouwingsObject/Oppervlakte , ' 
			'K@X_cap'
		+')'
	,	isHidden = "True";
	
	
	attribute<EUR   > Ki_LO    (BebouwingsObject) := =replace(KX_expr, '@X', 'i');
	attribute<EUR   > Ki30_LO  (BebouwingsObject) := =replace(KX_expr, '@X', 'i30');
	attribute<EUR   > Ki20_LO  (BebouwingsObject) := =replace(KX_expr, '@X', 'i20');
	attribute<EUR   > Ki15_LO  (BebouwingsObject) := =replace(KX_expr, '@X', 'i15');		
	attribute<EUR_Yr> KJ_OH_LO (BebouwingsObject) := =replace(KX_expr, '@X', 'j_OH');
	attribute<EUR_Yr> Kj_Adm_LO(BebouwingsObject) := =replace(KX_expr, '@X', 'j_Adm');
	attribute<EUR   > Ki_GV    (BebouwingsObject) := ='DoelLabels/'+Classifications/DoelLabel/Name[DoelLabel_rel]+'/Ki_GV';
	
	attribute<EUR> Ki_totaal  (BebouwingsObject) := Ki_LO   + Ki_GV + Ki_LTAS;
	attribute<EUR> Ki30_totaal(BebouwingsObject) := Ki30_LO + Ki_GV + Ki_LTAS;
	attribute<EUR> Ki20_totaal(BebouwingsObject) := Ki20_LO;
	attribute<EUR> Ki15_totaal(BebouwingsObject) := Ki15_LO;
	
	// metervraag
	container SPF := for_each_nedv(Classifications/Product/Name
	,	replace('Classifications/Performance/SPF_@S[PerformancePerProduct/@P]', '@P', Classifications/Product/Name, '@S', Classifications/Product/ServiceName)
	,	SchilLabelDomain, Float64
	);
	
	// TODO, OPTIMIZE, MTA, consider merge(xy/schil, x/v[xy/x_rel] for each schil)
	container functioneel
	{
		attribute<GJ_Yr> RV(BebouwingsObject) := =
			AltijdSprong
			?	'BebouwingsObject/Functioneel/RV/'+Classifications/SchilLabel/Name[SchilLabel_rel_formeel]
			:	'merge(SchilLabel_rel, GJ_Yr, '+AsItemList('BebouwingsObject/Functioneel/RV/'+Classifications/SchilLabel/Name)+')';

		attribute<GJ_Yr> TW(BebouwingsObject) := BebouwingsObject/Functioneel/TW;
		attribute<GJ_Yr> K (BebouwingsObject) := BebouwingsObject/Functioneel/K ;
		
		attribute<Float64>  RVb(BebouwingsObject) := ='RV *        Classifications/Performance/P_Vol[PerformancePerProduct/RVb] '+SprongSuffix;
		attribute<Float64>  RVp(BebouwingsObject) := ='RV * (1.0 - Classifications/Performance/P_Vol[PerformancePerProduct/RVb])'+SprongSuffix;
		attribute<Float64>  TWb(BebouwingsObject) := ='TW *        Classifications/Performance/P_Vol[PerformancePerProduct/TWb] '+SprongSuffix;
		attribute<Float64>  TWp(BebouwingsObject) := ='TW * (1.0 - Classifications/Performance/P_Vol[PerformancePerProduct/TWb])'+SprongSuffix;
		attribute<Float64>  Kb (BebouwingsObject) := ='K  *        Classifications/Performance/P_Vol[PerformancePerProduct/Kb ] '+SprongSuffix;
		attribute<Float64>  Kp (BebouwingsObject) := ='K  * (1.0 - Classifications/Performance/P_Vol[PerformancePerProduct/Kb ])'+SprongSuffix;
	}
	
	container metervraag_base := for_each_nedv(Classifications/Product/Name
	,	replace('functioneel/@P / SPF/@P'+SprongSuffix, '@P', Classifications/Product/Name)
	,	BebouwingsObject, Float64
	);

	container BemeterdeGebouwInput_rel := for_each_nedv(Classifications/Product/Name
	,	'rlookup(Classifications/Performance/Input_rel, Classifications/BemeterdeGebouwInput/nr_OrgEntity)[PerformancePerProduct/'+Classifications/Product/Name+']'
	,	SchilLabelDomain, Classifications/BemeterdeGebouwInput
	);

	container Expr_impl {
		attribute<string> MeterVraagExpr_asVector(Classifications/Product) := 'metervraag_base/' + Classifications/Product/Name;
		
		attribute<Classifications/BemeterdeGebouwInput> BemeterdeGebouwInput_rel_asVector(Classifications/Product) :=
			='union_data(Classifications/Product,'+AsItemList(AltijdSprong ? 'BemeterdeGebouwInput_rel/'+Classifications/Product/Name : '(0/0)[Classifications/BemeterdeGebouwInput]' )+')';
			
		attribute<string> aggr_NaSprong(Classifications/BemeterdeGebouwInput) := 
			pcount(BemeterdeGebouwInput_rel_asVector)>0
			?	'add('+AsItemList(MeterVraagExpr_asVector, BemeterdeGebouwInput_rel_asVector)+')'
			:	'const(0[GJ_Yr], BebouwingsObject)';

		// TODO: check waarom 0 bij alle Input in VRw ?
		attribute<string> aggr_OudLabel(Classifications/BemeterdeGebouwInput) := 
				replace('add('++AsItemList(replace('BemeterdeGebouwInput_rel/@P == Classifications/BemeterdeGebouwInput/V/@I ? metervraag_base/@P: 0[GJ_Yr]', '@P', Classifications/Product/Name))+')'
				, '@I', Classifications/BemeterdeGebouwInput/Name
				);
	}
	
	container metervraag_aggr := for_each_nedv(Classifications/BemeterdeGebouwInput/Name
	,	AltijdSprong ? Expr_impl/aggr_NaSprong : Expr_impl/aggr_OudLabel
	,	BebouwingsObject, GJ_Yr);
	
	container eEffect 
	{
		container volume := for_each_nedv(Classifications/Product/Name
		,	replace(
				'Classifications/Performance/eEffect_vol[PerformancePerProduct/@P'+SprongSuffix+'] * metervraag_base/@P'
			,	'@P', Classifications/Product/Name)
		,	BebouwingsObject, GJ_Yr
		)
		{
			attribute<GJ_Yr> Totaal(BebouwingsObject) := ='add('+AsItemList(Classifications/Product/Name)+')';
		}
		
		container capaciteit := for_each_nedv(Classifications/Installatie/Name
		,	replace(
				'add('+
					AsItemList(
						replace('Classifications/Performance/eEffect_cap[PerformancePerProduct/@P] * Float64(InstallatiePerProduct/@P == Classifications/Installatie/V/@I)'
						,	'@P', Classifications/Product/Name
						)
					)+
				') * CapaciteitPerInstallatie/@I'
			,	'@I', Classifications/Installatie/Name)
		,	BebouwingsObject, GJ_Yr
		)
		{
			attribute<GJ_Yr> Totaal(BebouwingsObject) := ='add('+AsItemList(Classifications/Installatie/Name)+')';
		}
		
		
		attribute<GJ_Yr> Ventilatie(BebouwingsObject) := 
		(SchilLabel_rel <= Classifications/SchilLabel/V/B)
		?	BebouwingsObject/functioneel/Ventilatie
		:	const(0[GJ_Yr], SchilLabelDomain);
		
		
		attribute<GJ_Yr> Totaal(BebouwingsObject) := volume/Totaal + capaciteit/Totaal + Ventilatie;
	}
	
	container metervraag := metervraag_aggr // inherit all, but override 'e'
	{
		attribute<GJ_Yr> e(BebouwingsObject) := metervraag_aggr/e + eEffect/Totaal;	// TODO: Functioneel/PompEnergie, VentilatieKosten_eg, Functioneel/Apparatuur
	}
	
	container prijzen {
		attribute<EUR_GJ> Pj_e  (BebouwingsObject) := PrijzenElektriciteit/KGJ_eindgebruik_excl[classify(metervraag/e  , PrijzenElektriciteit/ClassBreak )];
		attribute<EUR_GJ> Pj_gas(BebouwingsObject) := PrijzenAardgas/KGJ_eindgebruik_excl      [classify(metervraag/gas, PrijzenAardgas/ClassBreak )];	
		attribute<EUR_GJ> Pm_e  (BebouwingsObject) := PrijzenElektriciteit/KGJ_Maatschappelijk [classify(metervraag/e  , PrijzenElektriciteit/ClassBreak )];
		attribute<EUR_GJ> Pm_gas(BebouwingsObject) := PrijzenAardgas/KGJ_Maatschappelijk       [classify(metervraag/gas, PrijzenAardgas/ClassBreak )];				
	}
	
	attribute<EUR_Yr> Kj_verbruik(BebouwingsObject) := 
		prijzen/Pj_e   *  metervraag/e 
	+	prijzen/Pj_gas *  metervraag/gas;
	attribute<EUR_Yr> Km_verbruik(BebouwingsObject) := 
		prijzen/Pm_e   *  metervraag/e 
	+	prijzen/Pm_gas *  metervraag/gas;
	
	attribute<EUR_Yr> Kji_GV  (BebouwingsObject) := Ki_GV   * NcwRefs/_30/AnnualisationFactor;
	attribute<EUR_Yr> Kji_LTAS(BebouwingsObject) := Ki_LTAS * NcwRefs/_30/AnnualisationFactor;
	attribute<EUR_Yr> Kji30_LO(BebouwingsObject) := Ki30_LO * NcwRefs/_30/AnnualisationFactor;
	attribute<EUR_Yr> Kji20_LO(BebouwingsObject) := Ki20_LO * NcwRefs/_20/AnnualisationFactor;
	attribute<EUR_Yr> Kji15_LO(BebouwingsObject) := Ki15_LO * NcwRefs/_15/AnnualisationFactor;
	attribute<EUR_Yr> Kji_LO  (BebouwingsObject) := Kji30_LO + Kji20_LO + Kji15_LO;
	
	attribute<EUR_Yr> Kmi_GV  (BebouwingsObject) := Ki_GV   * NCW/mr30/AnnualisationFactor;
	attribute<EUR_Yr> Kmi_LTAS(BebouwingsObject) := Ki_LTAS * NCW/mr30/AnnualisationFactor;
	attribute<EUR_Yr> Kmi30_LO(BebouwingsObject) := Ki30_LO * NCW/mr30/AnnualisationFactor; // TODO: toepassen AnnualisationFactor_S1, eWP_AnnualisationFactor_eg
	attribute<EUR_Yr> Kmi20_LO(BebouwingsObject) := Ki20_LO * NCW/mr20/AnnualisationFactor; // TODO: toepassen AnnualisationFactor_S1, eWP_AnnualisationFactor_eg
	attribute<EUR_Yr> Kmi15_LO(BebouwingsObject) := Ki15_LO * NCW/mr15/AnnualisationFactor; // TODO: toepassen AnnualisationFactor_S1, eWP_AnnualisationFactor_eg
	attribute<EUR_Yr> Kmi_LO  (BebouwingsObject) := Kmi30_LO + Kmi20_LO + Kmi15_LO;
	
	attribute<bool> Criterium (BebouwingsObject) := = (Criterium_expr == '') ? 'Criteria/Always' : Criterium_expr;
	// TODO:
	// - LokaleOpwekking_eg/S_H_T * S_lo * BTW_Factor 
	// + S_ISDE * BTW_Factor 
	// - VentilatieKosten_eg/S_H_T * BTW_Factor 
	// - OnderhoudAdministratie_j/S_H_T * (1.0 - EEA_Opties/S_OenM ) * BTW_Factor
	
	parameter<float64>	S_gv   := (1.0 - EIA_Opties/Rs_GebouwVerbetering) * (1.0 - EEA_Opties/Rs_GebouwVerbetering), Descr = "eigen aandeel investering op gebouwverbetering na aftrek van subsidies";
	parameter<float64>	S_lo   := (1.0 - EIA_Opties/Rs_LokaleOpwekking  ) * (1.0 - EEA_Opties/Rs_LokaleOpwekking), Descr = "eigen aandeel investering op lokale opwekking na aftrek van subsidies";
	
	attribute<EUR_Yr> kosten_j(BebouwingsObject) := 
		  Kji_GV * S_gv * BTW_Factor_gv
		+ Kji_LO * S_lo * BTW_Factor
		+ Kji_LTAS      * BTW_Factor
		+ (Kj_OH_LO + Kj_Adm_LO)* (1.0 - EEA_Opties/S_OenM ) * BTW_Factor
		+ Kj_verbruik * EIA_Opties/R_SplitIncentiveFactor * BTW_Factor;
		
	attribute<EUR_Yr> kosten_m(BebouwingsObject) := 
		  Kmi_GV
		+ Kmi_LO
		+ Kmi_LTAS
		+ (Kj_OH_LO + Kj_Adm_LO)
		+ Km_verbruik;
		
	attribute<EUR_Yr> kosten(BebouwingsObject) := 
		=	(LocatieSpecifiekeOpties/GebouwOpties/KiesMaatschappelijk) 
		?	'kosten_m'
		:	'kosten_j'
	;
	
	attribute<EUR_Yr> kosten_or_undefined(BebouwingsObject) := 
		=	(Criterium_expr == '') 
		?	'kosten'
		:	'('+Criterium_expr + ') ? (0/0)[EUR_yr] : kosten'
	;
}
